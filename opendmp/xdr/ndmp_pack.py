# Generated by rpcgen.py from ndmp.x on Sun Dec 16 22:08:51 2012
import xdr.ndmp_const as const
import xdr.ndmp_type as types
from . import xdrlib
from xdrlib import Error as XDRError

class nullclass(object):
    pass

class TypeException(Exception):
    pass

class NDMPPacker(xdrlib.Packer):
    def __init__(self, check_enum=True, check_array=True):
        xdrlib.Packer.__init__(self)
        self.check_enum = check_enum
        self.check_array = check_array

    pack_hyper = xdrlib.Packer.pack_hyper
    pack_string = xdrlib.Packer.pack_string
    pack_int = xdrlib.Packer.pack_int
    pack_float = xdrlib.Packer.pack_float
    pack_uint = xdrlib.Packer.pack_uint
    pack_opaque = xdrlib.Packer.pack_opaque
    pack_double = xdrlib.Packer.pack_double
    pack_unsigned = xdrlib.Packer.pack_uint
    pack_quadruple = xdrlib.Packer.pack_double
    pack_uhyper = xdrlib.Packer.pack_uhyper
    pack_bool = xdrlib.Packer.pack_bool
    pack_u_long = xdrlib.Packer.pack_uint
    pack_u_short = xdrlib.Packer.pack_uint
    pack_short = xdrlib.Packer.pack_uint
    pack_u_char = xdrlib.Packer.pack_string
    
    def pack_ndmp_u_quad(self, data):
        if hasattr(self, 'filter_ndmp_u_quad'):
            data = getattr(self, 'filter_ndmp_u_quad')(data)
        if data.high is None:
            raise TypeError('data.high == None')
        self.pack_u_long(data.high)
        if data.low is None:
            raise TypeError('data.low == None')
        self.pack_u_long(data.low)

    def pack_ndmp_pval(self, data):
        if hasattr(self, 'filter_ndmp_pval'):
            data = getattr(self, 'filter_ndmp_pval')(data)
        if data.name is None:
            raise TypeError('data.name == None')
        self.pack_string(data.name)
        if data.value is None:
            raise TypeError('data.value == None')
        self.pack_string(data.value)

    def pack_ndmp_scsi_device(self, data):
        if hasattr(self, 'filter_ndmp_scsi_device'):
            data = getattr(self, 'filter_ndmp_scsi_device')(data)
        if data.name is None:
            raise TypeError('data.name == None')
        self.pack_string(data.name)

    def pack_ndmp_tape_device(self, data):
        if hasattr(self, 'filter_ndmp_tape_device'):
            data = getattr(self, 'filter_ndmp_tape_device')(data)
        if data.name is None:
            raise TypeError('data.name == None')
        self.pack_string(data.name)

    def pack_ndmp_error(self, data):
        if hasattr(self, 'filter_ndmp_error'):
            data = getattr(self, 'filter_ndmp_error')(data)
        if self.check_enum and data not in [const.NDMP_NO_ERR, const.NDMP_NOT_SUPPORTED_ERR, const.NDMP_DEVICE_BUSY_ERR, const.NDMP_DEVICE_OPENED_ERR, const.NDMP_NOT_AUTHORIZED_ERR, const.NDMP_PERMISSION_ERR, const.NDMP_DEV_NOT_OPEN_ERR, const.NDMP_IO_ERR, const.NDMP_TIMEOUT_ERR, const.NDMP_ILLEGAL_ARGS_ERR, const.NDMP_NO_TAPE_LOADED_ERR, const.NDMP_WRITE_PROTECT_ERR, const.NDMP_EOF_ERR, const.NDMP_EOM_ERR, const.NDMP_FILE_NOT_FOUND_ERR, const.NDMP_BAD_FILE_ERR, const.NDMP_NO_DEVICE_ERR, const.NDMP_NO_BUS_ERR, const.NDMP_XDR_DECODE_ERR, const.NDMP_ILLEGAL_STATE_ERR, const.NDMP_UNDEFINED_ERR, const.NDMP_XDR_ENCODE_ERR, const.NDMP_NO_MEM_ERR, const.NDMP_CONNECT_ERR, const.NDMP_SEQUENCE_NUM_ERR, const.NDMP_READ_IN_PROGRESS_ERR, const.NDMP_PRECONDITION_ERR, const.NDMP_CLASS_NOT_SUPPORTED_ERR, const.NDMP_VERSION_NOT_SUPPORTED_ERR, const.NDMP_EXT_DUPL_CLASSES_ERR, const.NDMP_EXT_DANDN_ILLEGAL_ERR]:
            raise XDRError('value=%s not in enum ndmp_error' % data)
        self.pack_int(data)

    def pack_ndmp_header_message_type(self, data):
        if hasattr(self, 'filter_ndmp_header_message_type'):
            data = getattr(self, 'filter_ndmp_header_message_type')(data)
        if self.check_enum and data not in [const.NDMP_MESSAGE_REQUEST, const.NDMP_MESSAGE_REPLY]:
            raise XDRError('value=%s not in enum ndmp_header_message_type' % data)
        self.pack_int(data)

    def pack_ndmp_message(self, data):
        if hasattr(self, 'filter_ndmp_message'):
            data = getattr(self, 'filter_ndmp_message')(data)
        if self.check_enum and data not in [const.NDMP_CONNECT_OPEN, const.NDMP_CONNECT_CLIENT_AUTH, const.NDMP_CONNECT_CLOSE, const.NDMP_CONNECT_SERVER_AUTH, const.NDMP_CONFIG_GET_HOST_INFO, const.NDMP_CONFIG_GET_BUTYPE_ATTR, const.NDMP_CONFIG_GET_CONNECTION_TYPE, const.NDMP_CONFIG_GET_AUTH_ATTR, const.NDMP_CONFIG_GET_BUTYPE_INFO, const.NDMP_CONFIG_GET_FS_INFO, const.NDMP_CONFIG_GET_TAPE_INFO, const.NDMP_CONFIG_GET_SCSI_INFO, const.NDMP_CONFIG_GET_SERVER_INFO, const.NDMP_CONFIG_SET_EXT_LIST, const.NDMP_CONFIG_GET_EXT_LIST, const.NDMP_SCSI_OPEN, const.NDMP_SCSI_CLOSE, const.NDMP_SCSI_GET_STATE, const.NDMP_SCSI_SET_TARGET, const.NDMP_SCSI_RESET_DEVICE, const.NDMP_SCSI_RESET_BUS, const.NDMP_SCSI_EXECUTE_CDB, const.NDMP_TAPE_OPEN, const.NDMP_TAPE_CLOSE, const.NDMP_TAPE_GET_STATE, const.NDMP_TAPE_MTIO, const.NDMP_TAPE_WRITE, const.NDMP_TAPE_READ, const.NDMP_TAPE_SET_RECORD_SIZE, const.NDMP_TAPE_EXECUTE_CDB, const.NDMP_DATA_GET_STATE, const.NDMP_DATA_START_BACKUP, const.NDMP_DATA_START_RECOVER, const.NDMP_DATA_ABORT, const.NDMP_DATA_GET_ENV, const.NDMP_DATA_RESVD1, const.NDMP_DATA_RESVD2, const.NDMP_DATA_STOP, const.NDMP_DATA_CONTINUE, const.NDMP_DATA_LISTEN, const.NDMP_DATA_CONNECT, const.NDMP_DATA_START_RECOVER_FILEHIST, const.NDMP_NOTIFY_RESERVED, const.NDMP_NOTIFY_DATA_HALTED, const.NDMP_NOTIFY_CONNECTION_STATUS, const.NDMP_NOTIFY_MOVER_HALTED, const.NDMP_NOTIFY_MOVER_PAUSED, const.NDMP_NOTIFY_DATA_READ, const.NDMP_LOG_FILE, const.NDMP_LOG_MESSAGE, const.NDMP_FH_ADD_UNIX_PATH, const.NDMP_FH_ADD_UNIX_DIR, const.NDMP_FH_ADD_UNIX_NODE, const.NDMP_FH_ADD_FILE, const.NDMP_FH_ADD_DIR, const.NDMP_FH_ADD_NODE, const.NDMP_MOVER_GET_STATE, const.NDMP_MOVER_LISTEN, const.NDMP_MOVER_CONTINUE, const.NDMP_MOVER_ABORT, const.NDMP_MOVER_STOP, const.NDMP_MOVER_SET_WINDOW, const.NDMP_MOVER_READ, const.NDMP_MOVER_CLOSE, const.NDMP_MOVER_SET_RECORD_SIZE, const.NDMP_MOVER_CONNECT, const.NDMP_EXT_STANDARD_BASE, const.NDMP_EXT_PROPRIETARY_BASE]:
            raise XDRError('value=%s not in enum ndmp_message' % data)
        self.pack_int(data)

    def pack_ndmp_header(self, data):
        if hasattr(self, 'filter_ndmp_header'):
            data = getattr(self, 'filter_ndmp_header')(data)
        if data.sequence is None:
            raise TypeError('data.sequence == None')
        self.pack_u_long(data.sequence)
        if data.time_stamp is None:
            raise TypeError('data.time_stamp == None')
        self.pack_u_long(data.time_stamp)
        if data.message_type is None:
            raise TypeError('data.message_type == None')
        self.pack_ndmp_header_message_type(data.message_type)
        if data.message is None:
            raise TypeError('data.message == None')
        self.pack_ndmp_message(data.message)
        if data.reply_sequence is None:
            raise TypeError('data.reply_sequence == None')
        self.pack_u_long(data.reply_sequence)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_connect_open_request(self, data):
        if hasattr(self, 'filter_ndmp_connect_open_request'):
            data = getattr(self, 'filter_ndmp_connect_open_request')(data)
        if data.protocol_version is None:
            raise TypeError('data.protocol_version == None')
        self.pack_u_short(data.protocol_version)

    def pack_ndmp_connect_open_reply(self, data):
        if hasattr(self, 'filter_ndmp_connect_open_reply'):
            data = getattr(self, 'filter_ndmp_connect_open_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_auth_type(self, data):
        if hasattr(self, 'filter_ndmp_auth_type'):
            data = getattr(self, 'filter_ndmp_auth_type')(data)
        if self.check_enum and data not in [const.NDMP_AUTH_NONE, const.NDMP_AUTH_TEXT, const.NDMP_AUTH_MD5]:
            raise XDRError('value=%s not in enum ndmp_auth_type' % data)
        self.pack_int(data)

    def pack_ndmp_auth_text(self, data):
        if hasattr(self, 'filter_ndmp_auth_text'):
            data = getattr(self, 'filter_ndmp_auth_text')(data)
        if data.user is None:
            raise TypeError('data.user == None')
        self.pack_string(data.user)
        if data.password is None:
            raise TypeError('data.password == None')
        self.pack_string(data.password)

    def pack_ndmp_auth_md5(self, data):
        if hasattr(self, 'filter_ndmp_auth_md5'):
            data = getattr(self, 'filter_ndmp_auth_md5')(data)
        if data.user is None:
            raise TypeError('data.user == None')
        self.pack_string(data.user)
        if data.auth_digest is None:
            raise TypeError('data.auth_digest == None')
        self.pack_fopaque(16, data.auth_digest)

    def pack_ndmp_auth_data(self, data):
        if hasattr(self, 'filter_ndmp_auth_data'):
            data = getattr(self, 'filter_ndmp_auth_data')(data)
        if data.auth_type is None:
            raise TypeError('data.auth_type == None')
        self.pack_ndmp_auth_type(data.auth_type)
        if data.auth_type == const.NDMP_AUTH_NONE:
            pass
        elif data.auth_type == const.NDMP_AUTH_TEXT:
            if data.auth_text is None:
                raise TypeError('data.auth_text == None')
            self.pack_ndmp_auth_text(data.auth_text)
        elif data.auth_type == const.NDMP_AUTH_MD5:
            if data.auth_md5 is None:
                raise TypeError('data.auth_md5 == None')
            self.pack_ndmp_auth_md5(data.auth_md5)
        else:
            raise XDRError('bad switch=%s' % data).auth_type

    def pack_ndmp_connect_client_auth_request(self, data):
        if hasattr(self, 'filter_ndmp_connect_client_auth_request'):
            data = getattr(self, 'filter_ndmp_connect_client_auth_request')(data)
        if data.auth_data is None:
            raise TypeError('data.auth_data == None')
        self.pack_ndmp_auth_data(data.auth_data)

    def pack_ndmp_connect_client_auth_reply(self, data):
        if hasattr(self, 'filter_ndmp_connect_client_auth_reply'):
            data = getattr(self, 'filter_ndmp_connect_client_auth_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_auth_attr(self, data):
        if hasattr(self, 'filter_ndmp_auth_attr'):
            data = getattr(self, 'filter_ndmp_auth_attr')(data)
        if data.auth_type is None:
            raise TypeError('data.auth_type == None')
        self.pack_ndmp_auth_type(data.auth_type)
        if data.auth_type == const.NDMP_AUTH_NONE:
            pass
        elif data.auth_type == const.NDMP_AUTH_TEXT:
            pass
        elif data.auth_type == const.NDMP_AUTH_MD5:
            if data.challenge is None:
                raise TypeError('data.challenge == None')
            self.pack_fopaque(64, data.challenge)
        else:
            raise XDRError('bad switch=%s' % data).auth_type

    def pack_ndmp_connect_server_auth_request(self, data):
        if hasattr(self, 'filter_ndmp_connect_server_auth_request'):
            data = getattr(self, 'filter_ndmp_connect_server_auth_request')(data)
        if data.client_attr is None:
            raise TypeError('data.client_attr == None')
        self.pack_ndmp_auth_attr(data.client_attr)

    def pack_ndmp_connect_server_auth_reply(self, data):
        if hasattr(self, 'filter_ndmp_connect_server_auth_reply'):
            data = getattr(self, 'filter_ndmp_connect_server_auth_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.auth_result is None:
            raise TypeError('data.auth_result == None')
        self.pack_ndmp_auth_data(data.auth_result)

    def pack_ndmp_auth_text_v3(self, data):
        if hasattr(self, 'filter_ndmp_auth_text_v3'):
            data = getattr(self, 'filter_ndmp_auth_text_v3')(data)
        if data.auth_id is None:
            raise TypeError('data.auth_id == None')
        self.pack_string(data.auth_id)
        if data.auth_password is None:
            raise TypeError('data.auth_password == None')
        self.pack_string(data.auth_password)

    def pack_ndmp_auth_md5_v3(self, data):
        if hasattr(self, 'filter_ndmp_auth_md5_v3'):
            data = getattr(self, 'filter_ndmp_auth_md5_v3')(data)
        if data.auth_id is None:
            raise TypeError('data.auth_id == None')
        self.pack_string(data.auth_id)
        if data.auth_digest is None:
            raise TypeError('data.auth_digest == None')
        self.pack_fopaque(16, data.auth_digest)

    def pack_ndmp_auth_data_v3(self, data):
        if hasattr(self, 'filter_ndmp_auth_data_v3'):
            data = getattr(self, 'filter_ndmp_auth_data_v3')(data)
        if data.auth_type is None:
            raise TypeError('data.auth_type == None')
        self.pack_ndmp_auth_type(data.auth_type)
        if data.auth_type == const.NDMP_AUTH_NONE:
            pass
        elif data.auth_type == const.NDMP_AUTH_TEXT:
            if data.auth_text is None:
                raise TypeError('data.auth_text == None')
            self.pack_ndmp_auth_text_v3(data.auth_text)
        elif data.auth_type == const.NDMP_AUTH_MD5:
            if data.auth_md5 is None:
                raise TypeError('data.auth_md5 == None')
            self.pack_ndmp_auth_md5_v3(data.auth_md5)
        else:
            raise XDRError('bad switch=%s' % data).auth_type

    def pack_ndmp_connect_client_auth_request_v3(self, data):
        if hasattr(self, 'filter_ndmp_connect_client_auth_request_v3'):
            data = getattr(self, 'filter_ndmp_connect_client_auth_request_v3')(data)
        if data.auth_data is None:
            raise TypeError('data.auth_data == None')
        self.pack_ndmp_auth_data_v3(data.auth_data)

    def pack_ndmp_connect_client_auth_reply_v3(self, data):
        if hasattr(self, 'filter_ndmp_connect_client_auth_reply_v3'):
            data = getattr(self, 'filter_ndmp_connect_client_auth_reply_v3')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_config_get_host_info_reply(self, data):
        if hasattr(self, 'filter_ndmp_config_get_host_info_reply'):
            data = getattr(self, 'filter_ndmp_config_get_host_info_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.hostname is None:
            raise TypeError('data.hostname == None')
        self.pack_string(data.hostname)
        if data.os_type is None:
            raise TypeError('data.os_type == None')
        self.pack_string(data.os_type)
        if data.os_vers is None:
            raise TypeError('data.os_vers == None')
        self.pack_string(data.os_vers)
        if data.hostid is None:
            raise TypeError('data.hostid == None')
        self.pack_string(data.hostid)
        if data.auth_type is None:
            raise TypeError('data.auth_type == None')
        self.pack_array(data.auth_type, self.pack_ndmp_auth_type)

    def pack_ndmp_config_get_butype_attr_request(self, data):
        if hasattr(self, 'filter_ndmp_config_get_butype_attr_request'):
            data = getattr(self, 'filter_ndmp_config_get_butype_attr_request')(data)
        if data.name is None:
            raise TypeError('data.name == None')
        self.pack_string(data.name)

    def pack_ndmp_config_get_butype_attr_reply(self, data):
        if hasattr(self, 'filter_ndmp_config_get_butype_attr_reply'):
            data = getattr(self, 'filter_ndmp_config_get_butype_attr_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.attrs is None:
            raise TypeError('data.attrs == None')
        self.pack_u_long(data.attrs)

    def pack_ndmp_addr_type(self, data):
        if hasattr(self, 'filter_ndmp_addr_type'):
            data = getattr(self, 'filter_ndmp_addr_type')(data)
        if self.check_enum and data not in [const.NDMP_ADDR_LOCAL, const.NDMP_ADDR_TCP, const.NDMP_ADDR_FC, const.NDMP_ADDR_IPC]:
            raise XDRError('value=%s not in enum ndmp_addr_type' % data)
        self.pack_int(data)

    def pack_ndmp_config_get_mover_type_reply(self, data):
        if hasattr(self, 'filter_ndmp_config_get_mover_type_reply'):
            data = getattr(self, 'filter_ndmp_config_get_mover_type_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.methods is None:
            raise TypeError('data.methods == None')
        self.pack_array(data.methods, self.pack_ndmp_addr_type)

    def pack_ndmp_config_get_auth_attr_request(self, data):
        if hasattr(self, 'filter_ndmp_config_get_auth_attr_request'):
            data = getattr(self, 'filter_ndmp_config_get_auth_attr_request')(data)
        if data.auth_type is None:
            raise TypeError('data.auth_type == None')
        self.pack_ndmp_auth_type(data.auth_type)

    def pack_ndmp_config_get_auth_attr_reply(self, data):
        if hasattr(self, 'filter_ndmp_config_get_auth_attr_reply'):
            data = getattr(self, 'filter_ndmp_config_get_auth_attr_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.server_attr is None:
            raise TypeError('data.server_attr == None')
        self.pack_ndmp_auth_attr(data.server_attr)

    def pack_ndmp_config_get_host_info_reply_v3(self, data):
        if hasattr(self, 'filter_ndmp_config_get_host_info_reply_v3'):
            data = getattr(self, 'filter_ndmp_config_get_host_info_reply_v3')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.hostname is None:
            raise TypeError('data.hostname == None')
        self.pack_string(data.hostname)
        if data.os_type is None:
            raise TypeError('data.os_type == None')
        self.pack_string(data.os_type)
        if data.os_vers is None:
            raise TypeError('data.os_vers == None')
        self.pack_string(data.os_vers)
        if data.hostid is None:
            raise TypeError('data.hostid == None')
        self.pack_string(data.hostid)

    def pack_ndmp_config_get_connection_type_reply_v3(self, data):
        if hasattr(self, 'filter_ndmp_config_get_connection_type_reply_v3'):
            data = getattr(self, 'filter_ndmp_config_get_connection_type_reply_v3')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.addr_types is None:
            raise TypeError('data.addr_types == None')
        self.pack_array(data.addr_types, self.pack_ndmp_addr_type)

    def pack_ndmp_config_get_server_info_reply_v3(self, data):
        if hasattr(self, 'filter_ndmp_config_get_server_info_reply_v3'):
            data = getattr(self, 'filter_ndmp_config_get_server_info_reply_v3')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.vendor_name is None:
            raise TypeError('data.vendor_name == None')
        self.pack_string(data.vendor_name)
        if data.product_name is None:
            raise TypeError('data.product_name == None')
        self.pack_string(data.product_name)
        if data.revision_number is None:
            raise TypeError('data.revision_number == None')
        self.pack_string(data.revision_number)
        if data.auth_type is None:
            raise TypeError('data.auth_type == None')
        self.pack_array(data.auth_type, self.pack_ndmp_auth_type)

    def pack_ndmp_butype_info(self, data):
        if hasattr(self, 'filter_ndmp_butype_info'):
            data = getattr(self, 'filter_ndmp_butype_info')(data)
        if data.butype_name is None:
            raise TypeError('data.butype_name == None')
        self.pack_string(data.butype_name)
        if data.default_env is None:
            raise TypeError('data.default_env == None')
        self.pack_array(data.default_env, self.pack_ndmp_pval)
        if data.attrs is None:
            raise TypeError('data.attrs == None')
        self.pack_u_long(data.attrs)

    def pack_ndmp_config_get_butype_info_reply_v3(self, data):
        if hasattr(self, 'filter_ndmp_config_get_butype_info_reply_v3'):
            data = getattr(self, 'filter_ndmp_config_get_butype_info_reply_v3')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.butype_info is None:
            raise TypeError('data.butype_info == None')
        self.pack_array(data.butype_info, self.pack_ndmp_butype_info)

    def pack_ndmp_fs_info_v3(self, data):
        if hasattr(self, 'filter_ndmp_fs_info_v3'):
            data = getattr(self, 'filter_ndmp_fs_info_v3')(data)
        if data.invalid is None:
            raise TypeError('data.invalid == None')
        self.pack_u_long(data.invalid)
        if data.fs_type is None:
            raise TypeError('data.fs_type == None')
        self.pack_string(data.fs_type)
        if data.fs_logical_device is None:
            raise TypeError('data.fs_logical_device == None')
        self.pack_string(data.fs_logical_device)
        if data.fs_physical_device is None:
            raise TypeError('data.fs_physical_device == None')
        self.pack_string(data.fs_physical_device)
        if data.total_size is None:
            raise TypeError('data.total_size == None')
        self.pack_ndmp_u_quad(data.total_size)
        if data.used_size is None:
            raise TypeError('data.used_size == None')
        self.pack_ndmp_u_quad(data.used_size)
        if data.avail_size is None:
            raise TypeError('data.avail_size == None')
        self.pack_ndmp_u_quad(data.avail_size)
        if data.total_inodes is None:
            raise TypeError('data.total_inodes == None')
        self.pack_ndmp_u_quad(data.total_inodes)
        if data.used_inodes is None:
            raise TypeError('data.used_inodes == None')
        self.pack_ndmp_u_quad(data.used_inodes)
        if data.fs_env is None:
            raise TypeError('data.fs_env == None')
        self.pack_array(data.fs_env, self.pack_ndmp_pval)
        if data.fs_status is None:
            raise TypeError('data.fs_status == None')
        self.pack_string(data.fs_status)

    def pack_ndmp_config_get_fs_info_reply_v3(self, data):
        if hasattr(self, 'filter_ndmp_config_get_fs_info_reply_v3'):
            data = getattr(self, 'filter_ndmp_config_get_fs_info_reply_v3')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.fs_info is None:
            raise TypeError('data.fs_info == None')
        self.pack_array(data.fs_info, self.pack_ndmp_fs_info_v3)

    def pack_ndmp_device_capability_v3(self, data):
        if hasattr(self, 'filter_ndmp_device_capability_v3'):
            data = getattr(self, 'filter_ndmp_device_capability_v3')(data)
        if data.device is None:
            raise TypeError('data.device == None')
        self.pack_string(data.device)
        if data.attr is None:
            raise TypeError('data.attr == None')
        self.pack_u_long(data.attr)
        if data.capability is None:
            raise TypeError('data.capability == None')
        self.pack_array(data.capability, self.pack_ndmp_pval)

    def pack_ndmp_device_info_v3(self, data):
        if hasattr(self, 'filter_ndmp_device_info_v3'):
            data = getattr(self, 'filter_ndmp_device_info_v3')(data)
        if data.model is None:
            raise TypeError('data.model == None')
        self.pack_string(data.model)
        if data.caplist is None:
            raise TypeError('data.caplist == None')
        self.pack_array(data.caplist, self.pack_ndmp_device_capability_v3)

    def pack_ndmp_config_get_tape_info_reply_v3(self, data):
        if hasattr(self, 'filter_ndmp_config_get_tape_info_reply_v3'):
            data = getattr(self, 'filter_ndmp_config_get_tape_info_reply_v3')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.tape_info is None:
            raise TypeError('data.tape_info == None')
        self.pack_array(data.tape_info, self.pack_ndmp_device_info_v3)

    def pack_ndmp_config_get_scsi_info_reply_v3(self, data):
        if hasattr(self, 'filter_ndmp_config_get_scsi_info_reply_v3'):
            data = getattr(self, 'filter_ndmp_config_get_scsi_info_reply_v3')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.scsi_info is None:
            raise TypeError('data.scsi_info == None')
        self.pack_array(data.scsi_info, self.pack_ndmp_device_info_v3)

    def pack_ndmp_config_get_butype_info_reply_v4(self, data):
        if hasattr(self, 'filter_ndmp_config_get_butype_info_reply_v4'):
            data = getattr(self, 'filter_ndmp_config_get_butype_info_reply_v4')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.butype_info is None:
            raise TypeError('data.butype_info == None')
        self.pack_array(data.butype_info, self.pack_ndmp_butype_info)

    def pack_ndmp_class_list(self, data):
        if hasattr(self, 'filter_ndmp_class_list'):
            data = getattr(self, 'filter_ndmp_class_list')(data)
        if data.ext_class_id is None:
            raise TypeError('data.ext_class_id == None')
        self.pack_u_short(data.ext_class_id)
        if data.ext_version is None:
            raise TypeError('data.ext_version == None')
        self.pack_array(data.ext_version, self.pack_u_short)

    def pack_ndmp_class_version(self, data):
        if hasattr(self, 'filter_ndmp_class_version'):
            data = getattr(self, 'filter_ndmp_class_version')(data)
        if data.ext_class_id is None:
            raise TypeError('data.ext_class_id == None')
        self.pack_u_short(data.ext_class_id)
        if data.ext_version is None:
            raise TypeError('data.ext_version == None')
        self.pack_u_short(data.ext_version)

    def pack_ndmp_config_get_ext_list_reply(self, data):
        if hasattr(self, 'filter_ndmp_config_get_ext_list_reply'):
            data = getattr(self, 'filter_ndmp_config_get_ext_list_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.class_list is None:
            raise TypeError('data.class_list == None')
        self.pack_array(data.class_list, self.pack_ndmp_class_list)

    def pack_ndmp_config_set_ext_list_request(self, data):
        if hasattr(self, 'filter_ndmp_config_set_ext_list_request'):
            data = getattr(self, 'filter_ndmp_config_set_ext_list_request')(data)
        if data.ndmp_selected_ext is None:
            raise TypeError('data.ndmp_selected_ext == None')
        self.pack_array(data.ndmp_selected_ext, self.pack_ndmp_class_version)

    def pack_ndmp_config_set_ext_list_reply(self, data):
        if hasattr(self, 'filter_ndmp_config_set_ext_list_reply'):
            data = getattr(self, 'filter_ndmp_config_set_ext_list_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_scsi_open_request(self, data):
        if hasattr(self, 'filter_ndmp_scsi_open_request'):
            data = getattr(self, 'filter_ndmp_scsi_open_request')(data)
        if data.device is None:
            raise TypeError('data.device == None')
        self.pack_ndmp_scsi_device(data.device)

    def pack_ndmp_scsi_open_reply(self, data):
        if hasattr(self, 'filter_ndmp_scsi_open_reply'):
            data = getattr(self, 'filter_ndmp_scsi_open_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_scsi_close_reply(self, data):
        if hasattr(self, 'filter_ndmp_scsi_close_reply'):
            data = getattr(self, 'filter_ndmp_scsi_close_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_scsi_get_state_reply(self, data):
        if hasattr(self, 'filter_ndmp_scsi_get_state_reply'):
            data = getattr(self, 'filter_ndmp_scsi_get_state_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.target_controller is None:
            raise TypeError('data.target_controller == None')
        self.pack_short(data.target_controller)
        if data.target_id is None:
            raise TypeError('data.target_id == None')
        self.pack_short(data.target_id)
        if data.target_lun is None:
            raise TypeError('data.target_lun == None')
        self.pack_short(data.target_lun)

    def pack_ndmp_scsi_set_target_request(self, data):
        if hasattr(self, 'filter_ndmp_scsi_set_target_request'):
            data = getattr(self, 'filter_ndmp_scsi_set_target_request')(data)
        if data.device is None:
            raise TypeError('data.device == None')
        self.pack_ndmp_scsi_device(data.device)
        if data.target_controller is None:
            raise TypeError('data.target_controller == None')
        self.pack_u_short(data.target_controller)
        if data.target_id is None:
            raise TypeError('data.target_id == None')
        self.pack_u_short(data.target_id)
        if data.target_lun is None:
            raise TypeError('data.target_lun == None')
        self.pack_u_short(data.target_lun)

    def pack_ndmp_scsi_set_target_reply(self, data):
        if hasattr(self, 'filter_ndmp_scsi_set_target_reply'):
            data = getattr(self, 'filter_ndmp_scsi_set_target_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_scsi_reset_device_reply(self, data):
        if hasattr(self, 'filter_ndmp_scsi_reset_device_reply'):
            data = getattr(self, 'filter_ndmp_scsi_reset_device_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_scsi_reset_bus_reply(self, data):
        if hasattr(self, 'filter_ndmp_scsi_reset_bus_reply'):
            data = getattr(self, 'filter_ndmp_scsi_reset_bus_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_execute_cdb_request(self, data):
        if hasattr(self, 'filter_ndmp_execute_cdb_request'):
            data = getattr(self, 'filter_ndmp_execute_cdb_request')(data)
        if data.flags is None:
            raise TypeError('data.flags == None')
        self.pack_u_long(data.flags)
        if data.timeout is None:
            raise TypeError('data.timeout == None')
        self.pack_u_long(data.timeout)
        if data.datain_len is None:
            raise TypeError('data.datain_len == None')
        self.pack_u_long(data.datain_len)
        if data.cdb is None:
            raise TypeError('data.cdb == None')
        self.pack_opaque(data.cdb)
        if data.dataout is None:
            raise TypeError('data.dataout == None')
        self.pack_opaque(data.dataout)

    def pack_ndmp_execute_cdb_reply(self, data):
        if hasattr(self, 'filter_ndmp_execute_cdb_reply'):
            data = getattr(self, 'filter_ndmp_execute_cdb_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.status is None:
            raise TypeError('data.status == None')
        self.pack_int(data.status)
        if data.dataout_len is None:
            raise TypeError('data.dataout_len == None')
        self.pack_u_long(data.dataout_len)
        if data.datain is None:
            raise TypeError('data.datain == None')
        self.pack_opaque(data.datain)
        if data.ext_sense is None:
            raise TypeError('data.ext_sense == None')
        self.pack_opaque(data.ext_sense)

    def pack_ndmp_scsi_open_request_v3(self, data):
        if hasattr(self, 'filter_ndmp_scsi_open_request_v3'):
            data = getattr(self, 'filter_ndmp_scsi_open_request_v3')(data)
        if data.device is None:
            raise TypeError('data.device == None')
        self.pack_string(data.device)

    def pack_ndmp_scsi_set_target_request_v3(self, data):
        if hasattr(self, 'filter_ndmp_scsi_set_target_request_v3'):
            data = getattr(self, 'filter_ndmp_scsi_set_target_request_v3')(data)
        if data.device is None:
            raise TypeError('data.device == None')
        self.pack_string(data.device)
        if data.target_controller is None:
            raise TypeError('data.target_controller == None')
        self.pack_u_short(data.target_controller)
        if data.target_id is None:
            raise TypeError('data.target_id == None')
        self.pack_u_short(data.target_id)
        if data.target_lun is None:
            raise TypeError('data.target_lun == None')
        self.pack_u_short(data.target_lun)

    def pack_ndmp_tape_open_mode(self, data):
        if hasattr(self, 'filter_ndmp_tape_open_mode'):
            data = getattr(self, 'filter_ndmp_tape_open_mode')(data)
        if self.check_enum and data not in [const.NDMP_TAPE_READ_MODE, const.NDMP_TAPE_WRITE_MODE, const.NDMP_TAPE_RAW_MODE, const.NDMP_TAPE_RAW1_MODE, const.NDMP_TAPE_RAW2_MODE]:
            raise XDRError('value=%s not in enum ndmp_tape_open_mode' % data)
        self.pack_int(data)

    def pack_ndmp_tape_open_request(self, data):
        if hasattr(self, 'filter_ndmp_tape_open_request'):
            data = getattr(self, 'filter_ndmp_tape_open_request')(data)
        if data.device is None:
            raise TypeError('data.device == None')
        self.pack_ndmp_tape_device(data.device)
        if data.mode is None:
            raise TypeError('data.mode == None')
        self.pack_ndmp_tape_open_mode(data.mode)

    def pack_ndmp_tape_open_reply(self, data):
        if hasattr(self, 'filter_ndmp_tape_open_reply'):
            data = getattr(self, 'filter_ndmp_tape_open_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_tape_close_reply(self, data):
        if hasattr(self, 'filter_ndmp_tape_close_reply'):
            data = getattr(self, 'filter_ndmp_tape_close_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_tape_get_state_reply(self, data):
        if hasattr(self, 'filter_ndmp_tape_get_state_reply'):
            data = getattr(self, 'filter_ndmp_tape_get_state_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.flags is None:
            raise TypeError('data.flags == None')
        self.pack_u_long(data.flags)
        if data.file_num is None:
            raise TypeError('data.file_num == None')
        self.pack_u_long(data.file_num)
        if data.soft_errors is None:
            raise TypeError('data.soft_errors == None')
        self.pack_u_long(data.soft_errors)
        if data.block_size is None:
            raise TypeError('data.block_size == None')
        self.pack_u_long(data.block_size)
        if data.blockno is None:
            raise TypeError('data.blockno == None')
        self.pack_u_long(data.blockno)
        if data.total_space is None:
            raise TypeError('data.total_space == None')
        self.pack_ndmp_u_quad(data.total_space)
        if data.space_remain is None:
            raise TypeError('data.space_remain == None')
        self.pack_ndmp_u_quad(data.space_remain)

    def pack_ndmp_tape_mtio_op(self, data):
        if hasattr(self, 'filter_ndmp_tape_mtio_op'):
            data = getattr(self, 'filter_ndmp_tape_mtio_op')(data)
        if self.check_enum and data not in [const.NDMP_MTIO_FSF, const.NDMP_MTIO_BSF, const.NDMP_MTIO_FSR, const.NDMP_MTIO_BSR, const.NDMP_MTIO_REW, const.NDMP_MTIO_EOF, const.NDMP_MTIO_OFF, const.NDMP_MTIO_TUR]:
            raise XDRError('value=%s not in enum ndmp_tape_mtio_op' % data)
        self.pack_int(data)

    def pack_ndmp_tape_mtio_request(self, data):
        if hasattr(self, 'filter_ndmp_tape_mtio_request'):
            data = getattr(self, 'filter_ndmp_tape_mtio_request')(data)
        if data.tape_op is None:
            raise TypeError('data.tape_op == None')
        self.pack_ndmp_tape_mtio_op(data.tape_op)
        if data.count is None:
            raise TypeError('data.count == None')
        self.pack_u_long(data.count)

    def pack_ndmp_tape_mtio_reply(self, data):
        if hasattr(self, 'filter_ndmp_tape_mtio_reply'):
            data = getattr(self, 'filter_ndmp_tape_mtio_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.resid_count is None:
            raise TypeError('data.resid_count == None')
        self.pack_u_long(data.resid_count)

    def pack_ndmp_tape_write_request(self, data):
        if hasattr(self, 'filter_ndmp_tape_write_request'):
            data = getattr(self, 'filter_ndmp_tape_write_request')(data)
        if data.data_out is None:
            raise TypeError('data.data_out == None')
        self.pack_opaque(data.data_out)

    def pack_ndmp_tape_write_reply(self, data):
        if hasattr(self, 'filter_ndmp_tape_write_reply'):
            data = getattr(self, 'filter_ndmp_tape_write_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.count is None:
            raise TypeError('data.count == None')
        self.pack_u_long(data.count)

    def pack_ndmp_tape_read_request(self, data):
        if hasattr(self, 'filter_ndmp_tape_read_request'):
            data = getattr(self, 'filter_ndmp_tape_read_request')(data)
        if data.count is None:
            raise TypeError('data.count == None')
        self.pack_u_long(data.count)

    def pack_ndmp_tape_read_reply(self, data):
        if hasattr(self, 'filter_ndmp_tape_read_reply'):
            data = getattr(self, 'filter_ndmp_tape_read_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.data_in is None:
            raise TypeError('data.data_in == None')
        self.pack_opaque(data.data_in)

    pack_ndmp_tape_execute_cdb_request = pack_ndmp_execute_cdb_request

    pack_ndmp_tape_execute_cdb_reply = pack_ndmp_execute_cdb_reply

    def pack_ndmp_tape_open_request_v3(self, data):
        if hasattr(self, 'filter_ndmp_tape_open_request_v3'):
            data = getattr(self, 'filter_ndmp_tape_open_request_v3')(data)
        if data.device is None:
            raise TypeError('data.device == None')
        self.pack_string(data.device)
        if data.mode is None:
            raise TypeError('data.mode == None')
        self.pack_ndmp_tape_open_mode(data.mode)

    def pack_ndmp_tape_get_state_reply_v3(self, data):
        if hasattr(self, 'filter_ndmp_tape_get_state_reply_v3'):
            data = getattr(self, 'filter_ndmp_tape_get_state_reply_v3')(data)
        if data.invalid is None:
            raise TypeError('data.invalid == None')
        self.pack_u_long(data.invalid)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.flags is None:
            raise TypeError('data.flags == None')
        self.pack_u_long(data.flags)
        if data.file_num is None:
            raise TypeError('data.file_num == None')
        self.pack_u_long(data.file_num)
        if data.soft_errors is None:
            raise TypeError('data.soft_errors == None')
        self.pack_u_long(data.soft_errors)
        if data.block_size is None:
            raise TypeError('data.block_size == None')
        self.pack_u_long(data.block_size)
        if data.blockno is None:
            raise TypeError('data.blockno == None')
        self.pack_u_long(data.blockno)
        if data.total_space is None:
            raise TypeError('data.total_space == None')
        self.pack_ndmp_u_quad(data.total_space)
        if data.space_remain is None:
            raise TypeError('data.space_remain == None')
        self.pack_ndmp_u_quad(data.space_remain)
        if data.partition is None:
            raise TypeError('data.partition == None')
        self.pack_u_long(data.partition)

    def pack_ndmp_tape_get_state_reply_v4(self, data):
        if hasattr(self, 'filter_ndmp_tape_get_state_reply_v4'):
            data = getattr(self, 'filter_ndmp_tape_get_state_reply_v4')(data)
        if data.unsupported is None:
            raise TypeError('data.unsupported == None')
        self.pack_u_long(data.unsupported)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.flags is None:
            raise TypeError('data.flags == None')
        self.pack_u_long(data.flags)
        if data.file_num is None:
            raise TypeError('data.file_num == None')
        self.pack_u_long(data.file_num)
        if data.soft_errors is None:
            raise TypeError('data.soft_errors == None')
        self.pack_u_long(data.soft_errors)
        if data.block_size is None:
            raise TypeError('data.block_size == None')
        self.pack_u_long(data.block_size)
        if data.blockno is None:
            raise TypeError('data.blockno == None')
        self.pack_u_long(data.blockno)
        if data.total_space is None:
            raise TypeError('data.total_space == None')
        self.pack_ndmp_u_quad(data.total_space)
        if data.space_remain is None:
            raise TypeError('data.space_remain == None')
        self.pack_ndmp_u_quad(data.space_remain)

    def pack_ndmp_mover_mode(self, data):
        if hasattr(self, 'filter_ndmp_mover_mode'):
            data = getattr(self, 'filter_ndmp_mover_mode')(data)
        if self.check_enum and data not in [const.NDMP_MOVER_MODE_READ, const.NDMP_MOVER_MODE_WRITE, const.NDMP_MOVER_MODE_NOACTION]:
            raise XDRError('value=%s not in enum ndmp_mover_mode' % data)
        self.pack_int(data)

    def pack_ndmp_mover_state(self, data):
        if hasattr(self, 'filter_ndmp_mover_state'):
            data = getattr(self, 'filter_ndmp_mover_state')(data)
        if self.check_enum and data not in [const.NDMP_MOVER_STATE_IDLE, const.NDMP_MOVER_STATE_LISTEN, const.NDMP_MOVER_STATE_ACTIVE, const.NDMP_MOVER_STATE_PAUSED, const.NDMP_MOVER_STATE_HALTED]:
            raise XDRError('value=%s not in enum ndmp_mover_state' % data)
        self.pack_int(data)

    def pack_ndmp_mover_pause_reason(self, data):
        if hasattr(self, 'filter_ndmp_mover_pause_reason'):
            data = getattr(self, 'filter_ndmp_mover_pause_reason')(data)
        if self.check_enum and data not in [const.NDMP_MOVER_PAUSE_NA, const.NDMP_MOVER_PAUSE_EOM, const.NDMP_MOVER_PAUSE_EOF, const.NDMP_MOVER_PAUSE_SEEK, const.NDMP_MOVER_PAUSE_MEDIA_ERROR, const.NDMP_MOVER_PAUSE_EOW]:
            raise XDRError('value=%s not in enum ndmp_mover_pause_reason' % data)
        self.pack_int(data)

    def pack_ndmp_mover_halt_reason(self, data):
        if hasattr(self, 'filter_ndmp_mover_halt_reason'):
            data = getattr(self, 'filter_ndmp_mover_halt_reason')(data)
        if self.check_enum and data not in [const.NDMP_MOVER_HALT_NA, const.NDMP_MOVER_HALT_CONNECT_CLOSED, const.NDMP_MOVER_HALT_ABORTED, const.NDMP_MOVER_HALT_INTERNAL_ERROR, const.NDMP_MOVER_HALT_CONNECT_ERROR, const.NDMP_MOVER_HALT_MEDIA_ERROR]:
            raise XDRError('value=%s not in enum ndmp_mover_halt_reason' % data)
        self.pack_int(data)

    def pack_ndmp_mover_get_state_reply(self, data):
        if hasattr(self, 'filter_ndmp_mover_get_state_reply'):
            data = getattr(self, 'filter_ndmp_mover_get_state_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.state is None:
            raise TypeError('data.state == None')
        self.pack_ndmp_mover_state(data.state)
        if data.pause_reason is None:
            raise TypeError('data.pause_reason == None')
        self.pack_ndmp_mover_pause_reason(data.pause_reason)
        if data.halt_reason is None:
            raise TypeError('data.halt_reason == None')
        self.pack_ndmp_mover_halt_reason(data.halt_reason)
        if data.record_size is None:
            raise TypeError('data.record_size == None')
        self.pack_u_long(data.record_size)
        if data.record_num is None:
            raise TypeError('data.record_num == None')
        self.pack_u_long(data.record_num)
        if data.data_written is None:
            raise TypeError('data.data_written == None')
        self.pack_ndmp_u_quad(data.data_written)
        if data.seek_position is None:
            raise TypeError('data.seek_position == None')
        self.pack_ndmp_u_quad(data.seek_position)
        if data.bytes_left_to_read is None:
            raise TypeError('data.bytes_left_to_read == None')
        self.pack_ndmp_u_quad(data.bytes_left_to_read)
        if data.window_offset is None:
            raise TypeError('data.window_offset == None')
        self.pack_ndmp_u_quad(data.window_offset)
        if data.window_length is None:
            raise TypeError('data.window_length == None')
        self.pack_ndmp_u_quad(data.window_length)

    def pack_ndmp_tcp_addr(self, data):
        if hasattr(self, 'filter_ndmp_tcp_addr'):
            data = getattr(self, 'filter_ndmp_tcp_addr')(data)
        if data.ip_addr is None:
            raise TypeError('data.ip_addr == None')
        self.pack_u_long(data.ip_addr)
        if data.port is None:
            raise TypeError('data.port == None')
        self.pack_u_short(data.port)

    def pack_ndmp_mover_addr(self, data):
        if hasattr(self, 'filter_ndmp_mover_addr'):
            data = getattr(self, 'filter_ndmp_mover_addr')(data)
        if data.addr_type is None:
            raise TypeError('data.addr_type == None')
        self.pack_ndmp_addr_type(data.addr_type)
        if data.addr_type == const.NDMP_ADDR_LOCAL:
            pass
        elif data.addr_type == const.NDMP_ADDR_TCP:
            if data.addr is None:
                raise TypeError('data.addr == None')
            self.pack_ndmp_tcp_addr(data.addr)
        else:
            raise XDRError('bad switch=%s' % data).addr_type

    def pack_ndmp_mover_listen_request(self, data):
        if hasattr(self, 'filter_ndmp_mover_listen_request'):
            data = getattr(self, 'filter_ndmp_mover_listen_request')(data)
        if data.mode is None:
            raise TypeError('data.mode == None')
        self.pack_ndmp_mover_mode(data.mode)
        if data.addr_type is None:
            raise TypeError('data.addr_type == None')
        self.pack_ndmp_addr_type(data.addr_type)

    def pack_ndmp_mover_listen_reply(self, data):
        if hasattr(self, 'filter_ndmp_mover_listen_reply'):
            data = getattr(self, 'filter_ndmp_mover_listen_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.mover is None:
            raise TypeError('data.mover == None')
        self.pack_ndmp_mover_addr(data.mover)

    def pack_ndmp_mover_set_record_size_request(self, data):
        if hasattr(self, 'filter_ndmp_mover_set_record_size_request'):
            data = getattr(self, 'filter_ndmp_mover_set_record_size_request')(data)
        if data.len is None:
            raise TypeError('data.len == None')
        self.pack_u_long(data.len)

    def pack_ndmp_mover_set_record_size_reply(self, data):
        if hasattr(self, 'filter_ndmp_mover_set_record_size_reply'):
            data = getattr(self, 'filter_ndmp_mover_set_record_size_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_mover_set_window_request(self, data):
        if hasattr(self, 'filter_ndmp_mover_set_window_request'):
            data = getattr(self, 'filter_ndmp_mover_set_window_request')(data)
        if data.offset is None:
            raise TypeError('data.offset == None')
        self.pack_ndmp_u_quad(data.offset)
        if data.length is None:
            raise TypeError('data.length == None')
        self.pack_ndmp_u_quad(data.length)

    def pack_ndmp_mover_set_window_reply(self, data):
        if hasattr(self, 'filter_ndmp_mover_set_window_reply'):
            data = getattr(self, 'filter_ndmp_mover_set_window_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_mover_continue_reply(self, data):
        if hasattr(self, 'filter_ndmp_mover_continue_reply'):
            data = getattr(self, 'filter_ndmp_mover_continue_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_mover_abort_reply(self, data):
        if hasattr(self, 'filter_ndmp_mover_abort_reply'):
            data = getattr(self, 'filter_ndmp_mover_abort_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_mover_stop_reply(self, data):
        if hasattr(self, 'filter_ndmp_mover_stop_reply'):
            data = getattr(self, 'filter_ndmp_mover_stop_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_mover_read_request(self, data):
        if hasattr(self, 'filter_ndmp_mover_read_request'):
            data = getattr(self, 'filter_ndmp_mover_read_request')(data)
        if data.offset is None:
            raise TypeError('data.offset == None')
        self.pack_ndmp_u_quad(data.offset)
        if data.length is None:
            raise TypeError('data.length == None')
        self.pack_ndmp_u_quad(data.length)

    def pack_ndmp_mover_read_reply(self, data):
        if hasattr(self, 'filter_ndmp_mover_read_reply'):
            data = getattr(self, 'filter_ndmp_mover_read_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_mover_close_reply(self, data):
        if hasattr(self, 'filter_ndmp_mover_close_reply'):
            data = getattr(self, 'filter_ndmp_mover_close_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_fc_addr_v3(self, data):
        if hasattr(self, 'filter_ndmp_fc_addr_v3'):
            data = getattr(self, 'filter_ndmp_fc_addr_v3')(data)
        if data.loop_id is None:
            raise TypeError('data.loop_id == None')
        self.pack_u_long(data.loop_id)

    def pack_ndmp_ipc_addr_v3(self, data):
        if hasattr(self, 'filter_ndmp_ipc_addr_v3'):
            data = getattr(self, 'filter_ndmp_ipc_addr_v3')(data)
        if data.comm_data is None:
            raise TypeError('data.comm_data == None')
        self.pack_opaque(data.comm_data)

    def pack_ndmp_addr_v3(self, data):
        if hasattr(self, 'filter_ndmp_addr_v3'):
            data = getattr(self, 'filter_ndmp_addr_v3')(data)
        if data.addr_type is None:
            raise TypeError('data.addr_type == None')
        self.pack_ndmp_addr_type(data.addr_type)
        if data.addr_type == const.NDMP_ADDR_LOCAL:
            pass
        elif data.addr_type == const.NDMP_ADDR_TCP:
            if data.tcp_addr is None:
                raise TypeError('data.tcp_addr == None')
            self.pack_ndmp_tcp_addr(data.tcp_addr)
        elif data.addr_type == const.NDMP_ADDR_FC:
            if data.fc_addr is None:
                raise TypeError('data.fc_addr == None')
            self.pack_ndmp_fc_addr_v3(data.fc_addr)
        elif data.addr_type == const.NDMP_ADDR_IPC:
            if data.ipc_addr is None:
                raise TypeError('data.ipc_addr == None')
            self.pack_ndmp_ipc_addr_v3(data.ipc_addr)
        else:
            raise XDRError('bad switch=%s' % data).addr_type

    def pack_ndmp_mover_get_state_reply_v3(self, data):
        if hasattr(self, 'filter_ndmp_mover_get_state_reply_v3'):
            data = getattr(self, 'filter_ndmp_mover_get_state_reply_v3')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.state is None:
            raise TypeError('data.state == None')
        self.pack_ndmp_mover_state(data.state)
        if data.pause_reason is None:
            raise TypeError('data.pause_reason == None')
        self.pack_ndmp_mover_pause_reason(data.pause_reason)
        if data.halt_reason is None:
            raise TypeError('data.halt_reason == None')
        self.pack_ndmp_mover_halt_reason(data.halt_reason)
        if data.record_size is None:
            raise TypeError('data.record_size == None')
        self.pack_u_long(data.record_size)
        if data.record_num is None:
            raise TypeError('data.record_num == None')
        self.pack_u_long(data.record_num)
        if data.data_written is None:
            raise TypeError('data.data_written == None')
        self.pack_ndmp_u_quad(data.data_written)
        if data.seek_position is None:
            raise TypeError('data.seek_position == None')
        self.pack_ndmp_u_quad(data.seek_position)
        if data.bytes_left_to_read is None:
            raise TypeError('data.bytes_left_to_read == None')
        self.pack_ndmp_u_quad(data.bytes_left_to_read)
        if data.window_offset is None:
            raise TypeError('data.window_offset == None')
        self.pack_ndmp_u_quad(data.window_offset)
        if data.window_length is None:
            raise TypeError('data.window_length == None')
        self.pack_ndmp_u_quad(data.window_length)
        if data.data_connection_addr is None:
            raise TypeError('data.data_connection_addr == None')
        self.pack_ndmp_addr_v3(data.data_connection_addr)

    def pack_ndmp_mover_listen_reply_v3(self, data):
        if hasattr(self, 'filter_ndmp_mover_listen_reply_v3'):
            data = getattr(self, 'filter_ndmp_mover_listen_reply_v3')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.data_connection_addr is None:
            raise TypeError('data.data_connection_addr == None')
        self.pack_ndmp_addr_v3(data.data_connection_addr)

    def pack_ndmp_mover_connect_request_v3(self, data):
        if hasattr(self, 'filter_ndmp_mover_connect_request_v3'):
            data = getattr(self, 'filter_ndmp_mover_connect_request_v3')(data)
        if data.mode is None:
            raise TypeError('data.mode == None')
        self.pack_ndmp_mover_mode(data.mode)
        if data.addr is None:
            raise TypeError('data.addr == None')
        self.pack_ndmp_addr_v3(data.addr)

    def pack_ndmp_mover_connect_reply_v3(self, data):
        if hasattr(self, 'filter_ndmp_mover_connect_reply_v3'):
            data = getattr(self, 'filter_ndmp_mover_connect_reply_v3')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_tcp_addr_v4(self, data):
        if hasattr(self, 'filter_ndmp_tcp_addr_v4'):
            data = getattr(self, 'filter_ndmp_tcp_addr_v4')(data)
        if data.ip_addr is None:
            raise TypeError('data.ip_addr == None')
        self.pack_u_long(data.ip_addr)
        if data.port is None:
            raise TypeError('data.port == None')
        self.pack_u_short(data.port)
        if data.addr_env is None:
            raise TypeError('data.addr_env == None')
        self.pack_array(data.addr_env, self.pack_ndmp_pval)

    def pack_ndmp_addr_v4(self, data):
        if hasattr(self, 'filter_ndmp_addr_v4'):
            data = getattr(self, 'filter_ndmp_addr_v4')(data)
        if data.addr_type is None:
            raise TypeError('data.addr_type == None')
        self.pack_ndmp_addr_type(data.addr_type)
        if data.addr_type == const.NDMP_ADDR_LOCAL:
            pass
        elif data.addr_type == const.NDMP_ADDR_TCP:
            if data.tcp_addr is None:
                raise TypeError('data.tcp_addr == None')
            self.pack_array(data.tcp_addr, self.pack_ndmp_tcp_addr_v4)
        elif data.addr_type == const.NDMP_ADDR_IPC:
            if data.ipc_addr is None:
                raise TypeError('data.ipc_addr == None')
            self.pack_ndmp_ipc_addr_v3(data.ipc_addr)
        else:
            raise XDRError('bad switch=%s' % data).addr_type

    def pack_ndmp_mover_connect_request_v4(self, data):
        if hasattr(self, 'filter_ndmp_mover_connect_request_v4'):
            data = getattr(self, 'filter_ndmp_mover_connect_request_v4')(data)
        if data.mode is None:
            raise TypeError('data.mode == None')
        self.pack_ndmp_mover_mode(data.mode)
        if data.addr is None:
            raise TypeError('data.addr == None')
        self.pack_ndmp_addr_v4(data.addr)

    def pack_ndmp_mover_listen_reply_v4(self, data):
        if hasattr(self, 'filter_ndmp_mover_listen_reply_v4'):
            data = getattr(self, 'filter_ndmp_mover_listen_reply_v4')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.connect_addr is None:
            raise TypeError('data.connect_addr == None')
        self.pack_ndmp_addr_v4(data.connect_addr)

    def pack_ndmp_mover_get_state_reply_v4(self, data):
        if hasattr(self, 'filter_ndmp_mover_get_state_reply_v4'):
            data = getattr(self, 'filter_ndmp_mover_get_state_reply_v4')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.mode is None:
            raise TypeError('data.mode == None')
        self.pack_ndmp_mover_mode(data.mode)
        if data.state is None:
            raise TypeError('data.state == None')
        self.pack_ndmp_mover_state(data.state)
        if data.pause_reason is None:
            raise TypeError('data.pause_reason == None')
        self.pack_ndmp_mover_pause_reason(data.pause_reason)
        if data.halt_reason is None:
            raise TypeError('data.halt_reason == None')
        self.pack_ndmp_mover_halt_reason(data.halt_reason)
        if data.record_size is None:
            raise TypeError('data.record_size == None')
        self.pack_u_long(data.record_size)
        if data.record_num is None:
            raise TypeError('data.record_num == None')
        self.pack_u_long(data.record_num)
        if data.bytes_moved is None:
            raise TypeError('data.bytes_moved == None')
        self.pack_ndmp_u_quad(data.bytes_moved)
        if data.seek_position is None:
            raise TypeError('data.seek_position == None')
        self.pack_ndmp_u_quad(data.seek_position)
        if data.bytes_left_to_read is None:
            raise TypeError('data.bytes_left_to_read == None')
        self.pack_ndmp_u_quad(data.bytes_left_to_read)
        if data.window_offset is None:
            raise TypeError('data.window_offset == None')
        self.pack_ndmp_u_quad(data.window_offset)
        if data.window_length is None:
            raise TypeError('data.window_length == None')
        self.pack_ndmp_u_quad(data.window_length)
        if data.data_connection_addr is None:
            raise TypeError('data.data_connection_addr == None')
        self.pack_ndmp_addr_v4(data.data_connection_addr)

    def pack_ndmp_data_operation(self, data):
        if hasattr(self, 'filter_ndmp_data_operation'):
            data = getattr(self, 'filter_ndmp_data_operation')(data)
        if self.check_enum and data not in [const.NDMP_DATA_OP_NOACTION, const.NDMP_DATA_OP_BACKUP, const.NDMP_DATA_OP_RECOVER, const.NDMP_DATA_OP_RECOVER_FILEHIST]:
            raise XDRError('value=%s not in enum ndmp_data_operation' % data)
        self.pack_int(data)

    def pack_ndmp_data_state(self, data):
        if hasattr(self, 'filter_ndmp_data_state'):
            data = getattr(self, 'filter_ndmp_data_state')(data)
        if self.check_enum and data not in [const.NDMP_DATA_STATE_IDLE, const.NDMP_DATA_STATE_ACTIVE, const.NDMP_DATA_STATE_HALTED, const.NDMP_DATA_STATE_LISTEN, const.NDMP_DATA_STATE_CONNECTED]:
            raise XDRError('value=%s not in enum ndmp_data_state' % data)
        self.pack_int(data)

    def pack_ndmp_data_halt_reason(self, data):
        if hasattr(self, 'filter_ndmp_data_halt_reason'):
            data = getattr(self, 'filter_ndmp_data_halt_reason')(data)
        if self.check_enum and data not in [const.NDMP_DATA_HALT_NA, const.NDMP_DATA_HALT_SUCCESSFUL, const.NDMP_DATA_HALT_ABORTED, const.NDMP_DATA_HALT_INTERNAL_ERROR, const.NDMP_DATA_HALT_CONNECT_ERROR]:
            raise XDRError('value=%s not in enum ndmp_data_halt_reason' % data)
        self.pack_int(data)

    def pack_ndmp_data_get_state_reply(self, data):
        if hasattr(self, 'filter_ndmp_data_get_state_reply'):
            data = getattr(self, 'filter_ndmp_data_get_state_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.operation is None:
            raise TypeError('data.operation == None')
        self.pack_ndmp_data_operation(data.operation)
        if data.state is None:
            raise TypeError('data.state == None')
        self.pack_ndmp_data_state(data.state)
        if data.halt_reason is None:
            raise TypeError('data.halt_reason == None')
        self.pack_ndmp_data_halt_reason(data.halt_reason)
        if data.bytes_processed is None:
            raise TypeError('data.bytes_processed == None')
        self.pack_ndmp_u_quad(data.bytes_processed)
        if data.est_bytes_remain is None:
            raise TypeError('data.est_bytes_remain == None')
        self.pack_ndmp_u_quad(data.est_bytes_remain)
        if data.est_time_remain is None:
            raise TypeError('data.est_time_remain == None')
        self.pack_u_long(data.est_time_remain)
        if data.mover is None:
            raise TypeError('data.mover == None')
        self.pack_ndmp_mover_addr(data.mover)
        if data.read_offset is None:
            raise TypeError('data.read_offset == None')
        self.pack_ndmp_u_quad(data.read_offset)
        if data.read_length is None:
            raise TypeError('data.read_length == None')
        self.pack_ndmp_u_quad(data.read_length)

    def pack_ndmp_data_start_backup_request(self, data):
        if hasattr(self, 'filter_ndmp_data_start_backup_request'):
            data = getattr(self, 'filter_ndmp_data_start_backup_request')(data)
        if data.mover is None:
            raise TypeError('data.mover == None')
        self.pack_ndmp_mover_addr(data.mover)
        if data.bu_type is None:
            raise TypeError('data.bu_type == None')
        self.pack_string(data.bu_type)
        if data.env is None:
            raise TypeError('data.env == None')
        self.pack_array(data.env, self.pack_ndmp_pval)

    def pack_ndmp_data_start_backup_reply(self, data):
        if hasattr(self, 'filter_ndmp_data_start_backup_reply'):
            data = getattr(self, 'filter_ndmp_data_start_backup_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_name(self, data):
        if hasattr(self, 'filter_ndmp_name'):
            data = getattr(self, 'filter_ndmp_name')(data)
        if data.name is None:
            raise TypeError('data.name == None')
        self.pack_string(data.name)
        if data.dest is None:
            raise TypeError('data.dest == None')
        self.pack_string(data.dest)
        if data.ssid is None:
            raise TypeError('data.ssid == None')
        self.pack_u_short(data.ssid)
        if data.fh_info is None:
            raise TypeError('data.fh_info == None')
        self.pack_ndmp_u_quad(data.fh_info)

    def pack_ndmp_data_start_recover_request(self, data):
        if hasattr(self, 'filter_ndmp_data_start_recover_request'):
            data = getattr(self, 'filter_ndmp_data_start_recover_request')(data)
        if data.mover is None:
            raise TypeError('data.mover == None')
        self.pack_ndmp_mover_addr(data.mover)
        if data.env is None:
            raise TypeError('data.env == None')
        self.pack_array(data.env, self.pack_ndmp_pval)
        if data.nlist is None:
            raise TypeError('data.nlist == None')
        self.pack_array(data.nlist, self.pack_ndmp_name)
        if data.bu_type is None:
            raise TypeError('data.bu_type == None')
        self.pack_string(data.bu_type)

    def pack_ndmp_data_start_recover_reply(self, data):
        if hasattr(self, 'filter_ndmp_data_start_recover_reply'):
            data = getattr(self, 'filter_ndmp_data_start_recover_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_data_abort_reply(self, data):
        if hasattr(self, 'filter_ndmp_data_abort_reply'):
            data = getattr(self, 'filter_ndmp_data_abort_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_data_stop_reply(self, data):
        if hasattr(self, 'filter_ndmp_data_stop_reply'):
            data = getattr(self, 'filter_ndmp_data_stop_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_data_get_env_reply(self, data):
        if hasattr(self, 'filter_ndmp_data_get_env_reply'):
            data = getattr(self, 'filter_ndmp_data_get_env_reply')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.env is None:
            raise TypeError('data.env == None')
        self.pack_array(data.env, self.pack_ndmp_pval)

    def pack_ndmp_notify_data_halted_request(self, data):
        if hasattr(self, 'filter_ndmp_notify_data_halted_request'):
            data = getattr(self, 'filter_ndmp_notify_data_halted_request')(data)
        if data.reason is None:
            raise TypeError('data.reason == None')
        self.pack_ndmp_data_halt_reason(data.reason)
        if data.text_reason is None:
            raise TypeError('data.text_reason == None')
        self.pack_string(data.text_reason)

    def pack_ndmp_data_get_state_reply_v3(self, data):
        if hasattr(self, 'filter_ndmp_data_get_state_reply_v3'):
            data = getattr(self, 'filter_ndmp_data_get_state_reply_v3')(data)
        if data.invalid is None:
            raise TypeError('data.invalid == None')
        self.pack_u_long(data.invalid)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.operation is None:
            raise TypeError('data.operation == None')
        self.pack_ndmp_data_operation(data.operation)
        if data.state is None:
            raise TypeError('data.state == None')
        self.pack_ndmp_data_state(data.state)
        if data.halt_reason is None:
            raise TypeError('data.halt_reason == None')
        self.pack_ndmp_data_halt_reason(data.halt_reason)
        if data.bytes_processed is None:
            raise TypeError('data.bytes_processed == None')
        self.pack_ndmp_u_quad(data.bytes_processed)
        if data.est_bytes_remain is None:
            raise TypeError('data.est_bytes_remain == None')
        self.pack_ndmp_u_quad(data.est_bytes_remain)
        if data.est_time_remain is None:
            raise TypeError('data.est_time_remain == None')
        self.pack_u_long(data.est_time_remain)
        if data.data_connection_addr is None:
            raise TypeError('data.data_connection_addr == None')
        self.pack_ndmp_addr_v3(data.data_connection_addr)
        if data.read_offset is None:
            raise TypeError('data.read_offset == None')
        self.pack_ndmp_u_quad(data.read_offset)
        if data.read_length is None:
            raise TypeError('data.read_length == None')
        self.pack_ndmp_u_quad(data.read_length)

    def pack_ndmp_data_start_backup_request_v3(self, data):
        if hasattr(self, 'filter_ndmp_data_start_backup_request_v3'):
            data = getattr(self, 'filter_ndmp_data_start_backup_request_v3')(data)
        if data.bu_type is None:
            raise TypeError('data.bu_type == None')
        self.pack_string(data.bu_type)
        if data.env is None:
            raise TypeError('data.env == None')
        self.pack_array(data.env, self.pack_ndmp_pval)

    def pack_ndmp_name_v3(self, data):
        if hasattr(self, 'filter_ndmp_name_v3'):
            data = getattr(self, 'filter_ndmp_name_v3')(data)
        if data.original_path is None:
            raise TypeError('data.original_path == None')
        self.pack_string(data.original_path)
        if data.destination_dir is None:
            raise TypeError('data.destination_dir == None')
        self.pack_string(data.destination_dir)
        if data.new_name is None:
            raise TypeError('data.new_name == None')
        self.pack_string(data.new_name)
        if data.other_name is None:
            raise TypeError('data.other_name == None')
        self.pack_string(data.other_name)
        if data.node is None:
            raise TypeError('data.node == None')
        self.pack_ndmp_u_quad(data.node)
        if data.fh_info is None:
            raise TypeError('data.fh_info == None')
        self.pack_ndmp_u_quad(data.fh_info)

    def pack_ndmp_data_start_recover_request_v3(self, data):
        if hasattr(self, 'filter_ndmp_data_start_recover_request_v3'):
            data = getattr(self, 'filter_ndmp_data_start_recover_request_v3')(data)
        if data.env is None:
            raise TypeError('data.env == None')
        self.pack_array(data.env, self.pack_ndmp_pval)
        if data.nlist is None:
            raise TypeError('data.nlist == None')
        self.pack_array(data.nlist, self.pack_ndmp_name_v3)
        if data.bu_type is None:
            raise TypeError('data.bu_type == None')
        self.pack_string(data.bu_type)

    def pack_ndmp_data_listen_request_v3(self, data):
        if hasattr(self, 'filter_ndmp_data_listen_request_v3'):
            data = getattr(self, 'filter_ndmp_data_listen_request_v3')(data)
        if data.addr_type is None:
            raise TypeError('data.addr_type == None')
        self.pack_ndmp_addr_type(data.addr_type)

    def pack_ndmp_data_listen_reply_v3(self, data):
        if hasattr(self, 'filter_ndmp_data_listen_reply_v3'):
            data = getattr(self, 'filter_ndmp_data_listen_reply_v3')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.data_connection_addr is None:
            raise TypeError('data.data_connection_addr == None')
        self.pack_ndmp_addr_v3(data.data_connection_addr)

    def pack_ndmp_data_connect_request_v3(self, data):
        if hasattr(self, 'filter_ndmp_data_connect_request_v3'):
            data = getattr(self, 'filter_ndmp_data_connect_request_v3')(data)
        if data.addr is None:
            raise TypeError('data.addr == None')
        self.pack_ndmp_addr_v3(data.addr)

    def pack_ndmp_data_connect_reply_v3(self, data):
        if hasattr(self, 'filter_ndmp_data_connect_reply_v3'):
            data = getattr(self, 'filter_ndmp_data_connect_reply_v3')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_data_get_state_reply_v4(self, data):
        if hasattr(self, 'filter_ndmp_data_get_state_reply_v4'):
            data = getattr(self, 'filter_ndmp_data_get_state_reply_v4')(data)
        if data.unsupported is None:
            raise TypeError('data.unsupported == None')
        self.pack_u_long(data.unsupported)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.operation is None:
            raise TypeError('data.operation == None')
        self.pack_ndmp_data_operation(data.operation)
        if data.state is None:
            raise TypeError('data.state == None')
        self.pack_ndmp_data_state(data.state)
        if data.halt_reason is None:
            raise TypeError('data.halt_reason == None')
        self.pack_ndmp_data_halt_reason(data.halt_reason)
        if data.bytes_processed is None:
            raise TypeError('data.bytes_processed == None')
        self.pack_ndmp_u_quad(data.bytes_processed)
        if data.est_bytes_remain is None:
            raise TypeError('data.est_bytes_remain == None')
        self.pack_ndmp_u_quad(data.est_bytes_remain)
        if data.est_time_remain is None:
            raise TypeError('data.est_time_remain == None')
        self.pack_u_long(data.est_time_remain)
        if data.data_connection_addr is None:
            raise TypeError('data.data_connection_addr == None')
        self.pack_ndmp_addr_v4(data.data_connection_addr)
        if data.read_offset is None:
            raise TypeError('data.read_offset == None')
        self.pack_ndmp_u_quad(data.read_offset)
        if data.read_length is None:
            raise TypeError('data.read_length == None')
        self.pack_ndmp_u_quad(data.read_length)

    def pack_ndmp_data_listen_reply_v4(self, data):
        if hasattr(self, 'filter_ndmp_data_listen_reply_v4'):
            data = getattr(self, 'filter_ndmp_data_listen_reply_v4')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)
        if data.connect_addr is None:
            raise TypeError('data.connect_addr == None')
        self.pack_ndmp_addr_v4(data.connect_addr)

    def pack_ndmp_data_connect_request_v4(self, data):
        if hasattr(self, 'filter_ndmp_data_connect_request_v4'):
            data = getattr(self, 'filter_ndmp_data_connect_request_v4')(data)
        if data.addr is None:
            raise TypeError('data.addr == None')
        self.pack_ndmp_addr_v4(data.addr)

    def pack_ndmp_connect_reason(self, data):
        if hasattr(self, 'filter_ndmp_connect_reason'):
            data = getattr(self, 'filter_ndmp_connect_reason')(data)
        if self.check_enum and data not in [const.NDMP_CONNECTED, const.NDMP_SHUTDOWN, const.NDMP_REFUSED]:
            raise XDRError('value=%s not in enum ndmp_connect_reason' % data)
        self.pack_int(data)

    def pack_ndmp_notify_connected_request(self, data):
        if hasattr(self, 'filter_ndmp_notify_connected_request'):
            data = getattr(self, 'filter_ndmp_notify_connected_request')(data)
        if data.reason is None:
            raise TypeError('data.reason == None')
        self.pack_ndmp_connect_reason(data.reason)
        if data.protocol_version is None:
            raise TypeError('data.protocol_version == None')
        self.pack_u_short(data.protocol_version)
        if data.text_reason is None:
            raise TypeError('data.text_reason == None')
        self.pack_string(data.text_reason.encode())

    def pack_ndmp_notify_mover_paused_request(self, data):
        if hasattr(self, 'filter_ndmp_notify_mover_paused_request'):
            data = getattr(self, 'filter_ndmp_notify_mover_paused_request')(data)
        if data.reason is None:
            raise TypeError('data.reason == None')
        self.pack_ndmp_mover_pause_reason(data.reason)
        if data.seek_position is None:
            raise TypeError('data.seek_position == None')
        self.pack_ndmp_u_quad(data.seek_position)

    def pack_ndmp_notify_mover_halted_request(self, data):
        if hasattr(self, 'filter_ndmp_notify_mover_halted_request'):
            data = getattr(self, 'filter_ndmp_notify_mover_halted_request')(data)
        if data.reason is None:
            raise TypeError('data.reason == None')
        self.pack_ndmp_mover_halt_reason(data.reason)
        if data.text_reason is None:
            raise TypeError('data.text_reason == None')
        self.pack_string(data.text_reason)

    def pack_ndmp_notify_data_read_request(self, data):
        if hasattr(self, 'filter_ndmp_notify_data_read_request'):
            data = getattr(self, 'filter_ndmp_notify_data_read_request')(data)
        if data.offset is None:
            raise TypeError('data.offset == None')
        self.pack_ndmp_u_quad(data.offset)
        if data.length is None:
            raise TypeError('data.length == None')
        self.pack_ndmp_u_quad(data.length)

    def pack_ndmp_notify_data_halted_request_v4(self, data):
        if hasattr(self, 'filter_ndmp_notify_data_halted_request_v4'):
            data = getattr(self, 'filter_ndmp_notify_data_halted_request_v4')(data)
        if data.reason is None:
            raise TypeError('data.reason == None')
        self.pack_ndmp_data_halt_reason(data.reason)

    def pack_ndmp_notify_mover_halted_request_v4(self, data):
        if hasattr(self, 'filter_ndmp_notify_mover_halted_request_v4'):
            data = getattr(self, 'filter_ndmp_notify_mover_halted_request_v4')(data)
        if data.reason is None:
            raise TypeError('data.reason == None')
        self.pack_ndmp_mover_halt_reason(data.reason)

    def pack_ndmp_log_log_request(self, data):
        if hasattr(self, 'filter_ndmp_log_log_request'):
            data = getattr(self, 'filter_ndmp_log_log_request')(data)
        if data.entry is None:
            raise TypeError('data.entry == None')
        self.pack_string(data.entry)

    def pack_ndmp_debug_level(self, data):
        if hasattr(self, 'filter_ndmp_debug_level'):
            data = getattr(self, 'filter_ndmp_debug_level')(data)
        if self.check_enum and data not in [const.NDMP_DBG_USER_INFO, const.NDMP_DBG_USER_SUMMARY, const.NDMP_DBG_USER_DETAIL, const.NDMP_DBG_DIAG_INFO, const.NDMP_DBG_DIAG_SUMMARY, const.NDMP_DBG_DIAG_DETAIL, const.NDMP_DBG_PROG_INFO, const.NDMP_DBG_PROG_SUMMARY, const.NDMP_DBG_PROG_DETAIL]:
            raise XDRError('value=%s not in enum ndmp_debug_level' % data)
        self.pack_int(data)

    def pack_ndmp_log_debug_request(self, data):
        if hasattr(self, 'filter_ndmp_log_debug_request'):
            data = getattr(self, 'filter_ndmp_log_debug_request')(data)
        if data.level is None:
            raise TypeError('data.level == None')
        self.pack_ndmp_debug_level(data.level)
        if data.message is None:
            raise TypeError('data.message == None')
        self.pack_string(data.message)

    def pack_ndmp_log_file_request(self, data):
        if hasattr(self, 'filter_ndmp_log_file_request'):
            data = getattr(self, 'filter_ndmp_log_file_request')(data)
        if data.name is None:
            raise TypeError('data.name == None')
        self.pack_string(data.name)
        if data.ssid is None:
            raise TypeError('data.ssid == None')
        self.pack_u_short(data.ssid)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_log_type(self, data):
        if hasattr(self, 'filter_ndmp_log_type'):
            data = getattr(self, 'filter_ndmp_log_type')(data)
        if self.check_enum and data not in [const.NDMP_LOG_NORMAL, const.NDMP_LOG_DEBUG, const.NDMP_LOG_ERROR, const.NDMP_LOG_WARNING]:
            raise XDRError('value=%s not in enum ndmp_log_type' % data)
        self.pack_int(data)

    def pack_ndmp_log_message_request_v3(self, data):
        if hasattr(self, 'filter_ndmp_log_message_request_v3'):
            data = getattr(self, 'filter_ndmp_log_message_request_v3')(data)
        if data.log_type is None:
            raise TypeError('data.log_type == None')
        self.pack_ndmp_log_type(data.log_type)
        if data.message_id is None:
            raise TypeError('data.message_id == None')
        self.pack_u_long(data.message_id)
        if data.entry is None:
            raise TypeError('data.entry == None')
        self.pack_string(data.entry)

    def pack_ndmp_log_file_request_v3(self, data):
        if hasattr(self, 'filter_ndmp_log_file_request_v3'):
            data = getattr(self, 'filter_ndmp_log_file_request_v3')(data)
        if data.name is None:
            raise TypeError('data.name == None')
        self.pack_string(data.name)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_ndmp_error(data.error)

    def pack_ndmp_has_associated_message(self, data):
        if hasattr(self, 'filter_ndmp_has_associated_message'):
            data = getattr(self, 'filter_ndmp_has_associated_message')(data)
        if self.check_enum and data not in [const.NDMP_NO_ASSOCIATED_MESSAGE, const.NDMP_HAS_ASSOCIATED_MESSAGE]:
            raise XDRError('value=%s not in enum ndmp_has_associated_message' % data)
        self.pack_int(data)

    def pack_ndmp_recovery_status(self, data):
        if hasattr(self, 'filter_ndmp_recovery_status'):
            data = getattr(self, 'filter_ndmp_recovery_status')(data)
        if self.check_enum and data not in [const.NDMP_RECOVERY_SUCCESSFUL, const.NDMP_RECOVERY_FAILED_PERMISSION, const.NDMP_RECOVERY_FAILED_NOT_FOUND, const.NDMP_RECOVERY_FAILED_NO_DIRECTORY, const.NDMP_RECOVERY_FAILED_OUT_OF_MEMORY, const.NDMP_RECOVERY_FAILED_IO_ERROR, const.NDMP_RECOVERY_FAILED_UNDEFINED_ERROR, const.NDMP_RECOVERY_FAILED_FILE_PATH_EXISTS]:
            raise XDRError('value=%s not in enum ndmp_recovery_status' % data)
        self.pack_int(data)

    def pack_ndmp_log_message_request_v4(self, data):
        if hasattr(self, 'filter_ndmp_log_message_request_v4'):
            data = getattr(self, 'filter_ndmp_log_message_request_v4')(data)
        if data.log_type is None:
            raise TypeError('data.log_type == None')
        self.pack_ndmp_log_type(data.log_type)
        if data.message_id is None:
            raise TypeError('data.message_id == None')
        self.pack_u_long(data.message_id)
        if data.entry is None:
            raise TypeError('data.entry == None')
        self.pack_string(data.entry)
        if data.associated_message_valid is None:
            raise TypeError('data.associated_message_valid == None')
        self.pack_ndmp_has_associated_message(data.associated_message_valid)
        if data.associated_message_sequence is None:
            raise TypeError('data.associated_message_sequence == None')
        self.pack_u_long(data.associated_message_sequence)

    def pack_ndmp_log_file_request_v4(self, data):
        if hasattr(self, 'filter_ndmp_log_file_request_v4'):
            data = getattr(self, 'filter_ndmp_log_file_request_v4')(data)
        if data.name is None:
            raise TypeError('data.name == None')
        self.pack_string(data.name)
        if data.recovery_status is None:
            raise TypeError('data.recovery_status == None')
        self.pack_ndmp_recovery_status(data.recovery_status)

    def pack_ndmp_unix_path(self, data):
        if hasattr(self, 'filter_ndmp_unix_path'):
            data = getattr(self, 'filter_ndmp_unix_path')(data)
        self.pack_string(data)

    def pack_ndmp_file_type(self, data):
        if hasattr(self, 'filter_ndmp_file_type'):
            data = getattr(self, 'filter_ndmp_file_type')(data)
        if self.check_enum and data not in [const.NDMP_FILE_DIR, const.NDMP_FILE_FIFO, const.NDMP_FILE_CSPEC, const.NDMP_FILE_BSPEC, const.NDMP_FILE_REG, const.NDMP_FILE_SLINK, const.NDMP_FILE_SOCK, const.NDMP_FILE_REGISTRY, const.NDMP_FILE_OTHER]:
            raise XDRError('value=%s not in enum ndmp_file_type' % data)
        self.pack_int(data)

    def pack_ndmp_unix_file_stat(self, data):
        if hasattr(self, 'filter_ndmp_unix_file_stat'):
            data = getattr(self, 'filter_ndmp_unix_file_stat')(data)
        if data.ftype is None:
            raise TypeError('data.ftype == None')
        self.pack_ndmp_file_type(data.ftype)
        if data.mtime is None:
            raise TypeError('data.mtime == None')
        self.pack_u_long(data.mtime)
        if data.atime is None:
            raise TypeError('data.atime == None')
        self.pack_u_long(data.atime)
        if data.ctime is None:
            raise TypeError('data.ctime == None')
        self.pack_u_long(data.ctime)
        if data.uid is None:
            raise TypeError('data.uid == None')
        self.pack_u_long(data.uid)
        if data.gid is None:
            raise TypeError('data.gid == None')
        self.pack_u_long(data.gid)
        if data.mode is None:
            raise TypeError('data.mode == None')
        self.pack_u_long(data.mode)
        if data.size is None:
            raise TypeError('data.size == None')
        self.pack_ndmp_u_quad(data.size)
        if data.fh_info is None:
            raise TypeError('data.fh_info == None')
        self.pack_ndmp_u_quad(data.fh_info)

    def pack_ndmp_fh_unix_path(self, data):
        if hasattr(self, 'filter_ndmp_fh_unix_path'):
            data = getattr(self, 'filter_ndmp_fh_unix_path')(data)
        if data.name is None:
            raise TypeError('data.name == None')
        self.pack_ndmp_unix_path(data.name)
        if data.fstat is None:
            raise TypeError('data.fstat == None')
        self.pack_ndmp_unix_file_stat(data.fstat)

    def pack_ndmp_fh_add_unix_path_request(self, data):
        if hasattr(self, 'filter_ndmp_fh_add_unix_path_request'):
            data = getattr(self, 'filter_ndmp_fh_add_unix_path_request')(data)
        if data.paths is None:
            raise TypeError('data.paths == None')
        self.pack_array(data.paths, self.pack_ndmp_fh_unix_path)

    def pack_ndmp_fh_unix_dir(self, data):
        if hasattr(self, 'filter_ndmp_fh_unix_dir'):
            data = getattr(self, 'filter_ndmp_fh_unix_dir')(data)
        if data.name is None:
            raise TypeError('data.name == None')
        self.pack_ndmp_unix_path(data.name)
        if data.node is None:
            raise TypeError('data.node == None')
        self.pack_u_long(data.node)
        if data.parent is None:
            raise TypeError('data.parent == None')
        self.pack_u_long(data.parent)

    def pack_ndmp_fh_add_unix_dir_request(self, data):
        if hasattr(self, 'filter_ndmp_fh_add_unix_dir_request'):
            data = getattr(self, 'filter_ndmp_fh_add_unix_dir_request')(data)
        if data.dirs is None:
            raise TypeError('data.dirs == None')
        self.pack_array(data.dirs, self.pack_ndmp_fh_unix_dir)

    def pack_ndmp_fh_unix_node(self, data):
        if hasattr(self, 'filter_ndmp_fh_unix_node'):
            data = getattr(self, 'filter_ndmp_fh_unix_node')(data)
        if data.fstat is None:
            raise TypeError('data.fstat == None')
        self.pack_ndmp_unix_file_stat(data.fstat)
        if data.node is None:
            raise TypeError('data.node == None')
        self.pack_u_long(data.node)

    def pack_ndmp_fh_add_unix_node_request(self, data):
        if hasattr(self, 'filter_ndmp_fh_add_unix_node_request'):
            data = getattr(self, 'filter_ndmp_fh_add_unix_node_request')(data)
        if data.nodes is None:
            raise TypeError('data.nodes == None')
        self.pack_array(data.nodes, self.pack_ndmp_fh_unix_node)

    def pack_ndmp_fs_type(self, data):
        if hasattr(self, 'filter_ndmp_fs_type'):
            data = getattr(self, 'filter_ndmp_fs_type')(data)
        if self.check_enum and data not in [const.NDMP_FS_UNIX, const.NDMP_FS_NT, const.NDMP_FS_OTHER]:
            raise XDRError('value=%s not in enum ndmp_fs_type' % data)
        self.pack_int(data)

    def pack_ndmp_path_v3(self, data):
        if hasattr(self, 'filter_ndmp_path_v3'):
            data = getattr(self, 'filter_ndmp_path_v3')(data)
        self.pack_string(data)

    def pack_ndmp_nt_path_v3(self, data):
        if hasattr(self, 'filter_ndmp_nt_path_v3'):
            data = getattr(self, 'filter_ndmp_nt_path_v3')(data)
        if data.nt_path is None:
            raise TypeError('data.nt_path == None')
        self.pack_ndmp_path_v3(data.nt_path)
        if data.dos_path is None:
            raise TypeError('data.dos_path == None')
        self.pack_ndmp_path_v3(data.dos_path)

    def pack_ndmp_file_name_v3(self, data):
        if hasattr(self, 'filter_ndmp_file_name_v3'):
            data = getattr(self, 'filter_ndmp_file_name_v3')(data)
        if data.fs_type is None:
            raise TypeError('data.fs_type == None')
        self.pack_ndmp_fs_type(data.fs_type)
        if data.fs_type == const.NDMP_FS_UNIX:
            if data.unix_name is None:
                raise TypeError('data.unix_name == None')
            self.pack_ndmp_path_v3(data.unix_name)
        elif data.fs_type == const.NDMP_FS_NT:
            if data.nt_name is None:
                raise TypeError('data.nt_name == None')
            self.pack_ndmp_nt_path_v3(data.nt_name)
        else:
            if data.other_name is None:
                raise TypeError('data.other_name == None')
            self.pack_ndmp_path_v3(data.other_name)

    def pack_ndmp_file_stat_v3(self, data):
        if hasattr(self, 'filter_ndmp_file_stat_v3'):
            data = getattr(self, 'filter_ndmp_file_stat_v3')(data)
        if data.invalid is None:
            raise TypeError('data.invalid == None')
        self.pack_u_long(data.invalid)
        if data.fs_type is None:
            raise TypeError('data.fs_type == None')
        self.pack_ndmp_fs_type(data.fs_type)
        if data.ftype is None:
            raise TypeError('data.ftype == None')
        self.pack_ndmp_file_type(data.ftype)
        if data.mtime is None:
            raise TypeError('data.mtime == None')
        self.pack_u_long(data.mtime)
        if data.atime is None:
            raise TypeError('data.atime == None')
        self.pack_u_long(data.atime)
        if data.ctime is None:
            raise TypeError('data.ctime == None')
        self.pack_u_long(data.ctime)
        if data.owner is None:
            raise TypeError('data.owner == None')
        self.pack_u_long(data.owner)
        if data.group is None:
            raise TypeError('data.group == None')
        self.pack_u_long(data.group)
        if data.fattr is None:
            raise TypeError('data.fattr == None')
        self.pack_u_long(data.fattr)
        if data.size is None:
            raise TypeError('data.size == None')
        self.pack_ndmp_u_quad(data.size)
        if data.links is None:
            raise TypeError('data.links == None')
        self.pack_u_long(data.links)

    def pack_ndmp_file_v3(self, data):
        if hasattr(self, 'filter_ndmp_file_v3'):
            data = getattr(self, 'filter_ndmp_file_v3')(data)
        if data.names is None:
            raise TypeError('data.names == None')
        self.pack_array(data.names, self.pack_ndmp_file_name_v3)
        if data.stats is None:
            raise TypeError('data.stats == None')
        self.pack_array(data.stats, self.pack_ndmp_file_stat_v3)
        if data.node is None:
            raise TypeError('data.node == None')
        self.pack_ndmp_u_quad(data.node)
        if data.fh_info is None:
            raise TypeError('data.fh_info == None')
        self.pack_ndmp_u_quad(data.fh_info)

    def pack_ndmp_fh_add_file_request_v3(self, data):
        if hasattr(self, 'filter_ndmp_fh_add_file_request_v3'):
            data = getattr(self, 'filter_ndmp_fh_add_file_request_v3')(data)
        if data.files is None:
            raise TypeError('data.files == None')
        self.pack_array(data.files, self.pack_ndmp_file_v3)

    def pack_ndmp_dir_v3(self, data):
        if hasattr(self, 'filter_ndmp_dir_v3'):
            data = getattr(self, 'filter_ndmp_dir_v3')(data)
        if data.names is None:
            raise TypeError('data.names == None')
        self.pack_array(data.names, self.pack_ndmp_file_name_v3)
        if data.node is None:
            raise TypeError('data.node == None')
        self.pack_ndmp_u_quad(data.node)
        if data.parent is None:
            raise TypeError('data.parent == None')
        self.pack_ndmp_u_quad(data.parent)

    def pack_ndmp_fh_add_dir_request_v3(self, data):
        if hasattr(self, 'filter_ndmp_fh_add_dir_request_v3'):
            data = getattr(self, 'filter_ndmp_fh_add_dir_request_v3')(data)
        if data.dirs is None:
            raise TypeError('data.dirs == None')
        self.pack_array(data.dirs, self.pack_ndmp_dir_v3)

    def pack_ndmp_node_v3(self, data):
        if hasattr(self, 'filter_ndmp_node_v3'):
            data = getattr(self, 'filter_ndmp_node_v3')(data)
        if data.stats is None:
            raise TypeError('data.stats == None')
        self.pack_array(data.stats, self.pack_ndmp_file_stat_v3)
        if data.node is None:
            raise TypeError('data.node == None')
        self.pack_ndmp_u_quad(data.node)
        if data.fh_info is None:
            raise TypeError('data.fh_info == None')
        self.pack_ndmp_u_quad(data.fh_info)

    def pack_ndmp_fh_add_node_request_v3(self, data):
        if hasattr(self, 'filter_ndmp_fh_add_node_request_v3'):
            data = getattr(self, 'filter_ndmp_fh_add_node_request_v3')(data)
        if data.nodes is None:
            raise TypeError('data.nodes == None')
        self.pack_array(data.nodes, self.pack_ndmp_node_v3)

    pack_ndmp_auth_text_v2 = pack_ndmp_auth_text

    pack_ndmp_auth_text_v4 = pack_ndmp_auth_text_v3

    pack_ndmp_auth_md5_v2 = pack_ndmp_auth_md5

    pack_ndmp_auth_md5_v4 = pack_ndmp_auth_md5_v3

    pack_ndmp_auth_data_v2 = pack_ndmp_auth_data

    pack_ndmp_auth_data_v4 = pack_ndmp_auth_data_v3

    pack_ndmp_connect_open_request_v2 = pack_ndmp_connect_open_request

    pack_ndmp_connect_open_request_v3 = pack_ndmp_connect_open_request

    pack_ndmp_connect_open_request_v4 = pack_ndmp_connect_open_request

    pack_ndmp_connect_open_reply_v2 = pack_ndmp_connect_open_reply

    pack_ndmp_connect_open_reply_v3 = pack_ndmp_connect_open_reply

    pack_ndmp_connect_open_reply_v4 = pack_ndmp_connect_open_reply

    pack_ndmp_connect_client_auth_request_v2 = pack_ndmp_connect_client_auth_request

    pack_ndmp_connect_client_auth_request_v4 = pack_ndmp_connect_client_auth_request_v3

    pack_ndmp_connect_client_auth_reply_v2 = pack_ndmp_connect_client_auth_reply

    pack_ndmp_connect_client_auth_reply_v4 = pack_ndmp_connect_client_auth_reply_v3

    pack_ndmp_connect_server_auth_request_v2 = pack_ndmp_connect_server_auth_request

    pack_ndmp_connect_server_auth_request_v3 = pack_ndmp_connect_server_auth_request

    pack_ndmp_connect_server_auth_request_v4 = pack_ndmp_connect_server_auth_request

    pack_ndmp_connect_server_auth_reply_v2 = pack_ndmp_connect_server_auth_reply

    pack_ndmp_connect_server_auth_reply_v3 = pack_ndmp_connect_server_auth_reply

    pack_ndmp_connect_server_auth_reply_v4 = pack_ndmp_connect_server_auth_reply

    pack_ndmp_config_get_host_info_reply_v2 = pack_ndmp_config_get_host_info_reply

    pack_ndmp_config_get_host_info_reply_v4 = pack_ndmp_config_get_host_info_reply_v3

    pack_ndmp_config_get_butype_attr_request_v2 = pack_ndmp_config_get_butype_attr_request

    pack_ndmp_config_get_butype_attr_reply_v2 = pack_ndmp_config_get_butype_attr_reply

    pack_ndmp_config_get_mover_type_reply_v2 = pack_ndmp_config_get_mover_type_reply

    pack_ndmp_config_get_auth_attr_request_v2 = pack_ndmp_config_get_auth_attr_request

    pack_ndmp_config_get_auth_attr_request_v3 = pack_ndmp_config_get_auth_attr_request

    pack_ndmp_config_get_auth_attr_request_v4 = pack_ndmp_config_get_auth_attr_request

    pack_ndmp_config_get_auth_attr_reply_v2 = pack_ndmp_config_get_auth_attr_reply

    pack_ndmp_config_get_auth_attr_reply_v3 = pack_ndmp_config_get_auth_attr_reply

    pack_ndmp_config_get_auth_attr_reply_v4 = pack_ndmp_config_get_auth_attr_reply

    pack_ndmp_config_get_connection_type_reply_v4 = pack_ndmp_config_get_connection_type_reply_v3

    pack_ndmp_config_get_server_info_reply_v4 = pack_ndmp_config_get_server_info_reply_v3

    pack_ndmp_fs_info_v4 = pack_ndmp_fs_info_v3

    pack_ndmp_config_get_fs_info_reply_v4 = pack_ndmp_config_get_fs_info_reply_v3

    pack_ndmp_device_info_v4 = pack_ndmp_device_info_v3

    pack_ndmp_config_get_tape_info_reply_v4 = pack_ndmp_config_get_tape_info_reply_v3

    pack_ndmp_config_get_scsi_info_reply_v4 = pack_ndmp_config_get_scsi_info_reply_v3

    pack_ndmp_config_get_ext_list_reply_v4 = pack_ndmp_config_get_ext_list_reply

    pack_ndmp_config_set_ext_list_request_v4 = pack_ndmp_config_set_ext_list_request

    pack_ndmp_config_set_ext_list_reply_v4 = pack_ndmp_config_set_ext_list_reply

    pack_ndmp_scsi_open_request_v2 = pack_ndmp_scsi_open_request

    pack_ndmp_scsi_open_request_v4 = pack_ndmp_scsi_open_request_v3

    pack_ndmp_scsi_open_reply_v2 = pack_ndmp_scsi_open_reply

    pack_ndmp_scsi_open_reply_v3 = pack_ndmp_scsi_open_reply

    pack_ndmp_scsi_open_reply_v4 = pack_ndmp_scsi_open_reply

    pack_ndmp_scsi_close_reply_v2 = pack_ndmp_scsi_close_reply

    pack_ndmp_scsi_close_reply_v3 = pack_ndmp_scsi_close_reply

    pack_ndmp_scsi_close_reply_v4 = pack_ndmp_scsi_close_reply

    pack_ndmp_scsi_get_state_reply_v2 = pack_ndmp_scsi_get_state_reply

    pack_ndmp_scsi_get_state_reply_v3 = pack_ndmp_scsi_get_state_reply

    pack_ndmp_scsi_get_state_reply_v4 = pack_ndmp_scsi_get_state_reply

    pack_ndmp_scsi_set_target_request_v2 = pack_ndmp_scsi_set_target_request

    pack_ndmp_scsi_set_target_reply_v2 = pack_ndmp_scsi_set_target_reply

    pack_ndmp_scsi_set_target_reply_v3 = pack_ndmp_scsi_set_target_reply

    pack_ndmp_scsi_reset_device_reply_v2 = pack_ndmp_scsi_reset_device_reply

    pack_ndmp_scsi_reset_device_reply_v3 = pack_ndmp_scsi_reset_device_reply

    pack_ndmp_scsi_reset_device_reply_v4 = pack_ndmp_scsi_reset_device_reply

    pack_ndmp_scsi_reset_bus_reply_v2 = pack_ndmp_scsi_reset_bus_reply

    pack_ndmp_scsi_reset_bus_reply_v3 = pack_ndmp_scsi_reset_bus_reply

    pack_ndmp_scsi_execute_cdb_request_v2 = pack_ndmp_execute_cdb_request

    pack_ndmp_scsi_execute_cdb_request_v3 = pack_ndmp_execute_cdb_request

    pack_ndmp_scsi_execute_cdb_request_v4 = pack_ndmp_execute_cdb_request

    pack_ndmp_scsi_execute_cdb_reply_v2 = pack_ndmp_execute_cdb_reply

    pack_ndmp_scsi_execute_cdb_reply_v3 = pack_ndmp_execute_cdb_reply

    pack_ndmp_scsi_execute_cdb_reply_v4 = pack_ndmp_execute_cdb_reply

    pack_ndmp_tape_open_request_v2 = pack_ndmp_tape_open_request

    pack_ndmp_tape_open_request_v4 = pack_ndmp_tape_open_request_v3

    pack_ndmp_tape_open_reply_v2 = pack_ndmp_tape_open_reply

    pack_ndmp_tape_open_reply_v3 = pack_ndmp_tape_open_reply

    pack_ndmp_tape_open_reply_v4 = pack_ndmp_tape_open_reply

    pack_ndmp_tape_close_reply_v2 = pack_ndmp_tape_close_reply

    pack_ndmp_tape_close_reply_v3 = pack_ndmp_tape_close_reply

    pack_ndmp_tape_close_reply_v4 = pack_ndmp_tape_close_reply

    pack_ndmp_tape_get_state_reply_v2 = pack_ndmp_tape_get_state_reply

    pack_ndmp_tape_mtio_request_v2 = pack_ndmp_tape_mtio_request

    pack_ndmp_tape_mtio_request_v3 = pack_ndmp_tape_mtio_request

    pack_ndmp_tape_mtio_request_v4 = pack_ndmp_tape_mtio_request

    pack_ndmp_tape_mtio_reply_v2 = pack_ndmp_tape_mtio_reply

    pack_ndmp_tape_mtio_reply_v3 = pack_ndmp_tape_mtio_reply

    pack_ndmp_tape_mtio_reply_v4 = pack_ndmp_tape_mtio_reply

    pack_ndmp_tape_write_request_v2 = pack_ndmp_tape_write_request

    pack_ndmp_tape_write_request_v3 = pack_ndmp_tape_write_request

    pack_ndmp_tape_write_request_v4 = pack_ndmp_tape_write_request

    pack_ndmp_tape_write_reply_v2 = pack_ndmp_tape_write_reply

    pack_ndmp_tape_write_reply_v3 = pack_ndmp_tape_write_reply

    pack_ndmp_tape_write_reply_v4 = pack_ndmp_tape_write_reply

    pack_ndmp_tape_read_request_v2 = pack_ndmp_tape_read_request

    pack_ndmp_tape_read_request_v3 = pack_ndmp_tape_read_request

    pack_ndmp_tape_read_request_v4 = pack_ndmp_tape_read_request

    pack_ndmp_tape_read_reply_v2 = pack_ndmp_tape_read_reply

    pack_ndmp_tape_read_reply_v3 = pack_ndmp_tape_read_reply

    pack_ndmp_tape_read_reply_v4 = pack_ndmp_tape_read_reply

    pack_ndmp_tape_execute_cdb_request_v2 = pack_ndmp_tape_execute_cdb_request

    pack_ndmp_tape_execute_cdb_request_v3 = pack_ndmp_tape_execute_cdb_request

    pack_ndmp_tape_execute_cdb_request_v4 = pack_ndmp_tape_execute_cdb_request

    pack_ndmp_tape_execute_cdb_reply_v2 = pack_ndmp_tape_execute_cdb_reply

    pack_ndmp_tape_execute_cdb_reply_v3 = pack_ndmp_tape_execute_cdb_reply

    pack_ndmp_tape_execute_cdb_reply_v4 = pack_ndmp_tape_execute_cdb_reply

    pack_ndmp_fc_addr = pack_ndmp_fc_addr_v3

    pack_ndmp_ipc_addr = pack_ndmp_ipc_addr_v3

    pack_ndmp_mover_get_state_reply_v2 = pack_ndmp_mover_get_state_reply

    pack_ndmp_mover_listen_request_v2 = pack_ndmp_mover_listen_request

    pack_ndmp_mover_listen_request_v3 = pack_ndmp_mover_listen_request

    pack_ndmp_mover_listen_request_v4 = pack_ndmp_mover_listen_request

    pack_ndmp_mover_listen_reply_v2 = pack_ndmp_mover_listen_reply

    pack_ndmp_mover_set_record_size_request_v2 = pack_ndmp_mover_set_record_size_request

    pack_ndmp_mover_set_record_size_request_v3 = pack_ndmp_mover_set_record_size_request

    pack_ndmp_mover_set_record_size_request_v4 = pack_ndmp_mover_set_record_size_request

    pack_ndmp_mover_set_record_size_reply_v2 = pack_ndmp_mover_set_record_size_reply

    pack_ndmp_mover_set_record_size_reply_v3 = pack_ndmp_mover_set_record_size_reply

    pack_ndmp_mover_set_record_size_reply_v4 = pack_ndmp_mover_set_record_size_reply

    pack_ndmp_mover_set_window_request_v2 = pack_ndmp_mover_set_window_request

    pack_ndmp_mover_set_window_request_v3 = pack_ndmp_mover_set_window_request

    pack_ndmp_mover_set_window_request_v4 = pack_ndmp_mover_set_window_request

    pack_ndmp_mover_set_window_reply_v2 = pack_ndmp_mover_set_window_reply

    pack_ndmp_mover_set_window_reply_v3 = pack_ndmp_mover_set_window_reply

    pack_ndmp_mover_set_window_reply_v4 = pack_ndmp_mover_set_window_reply

    pack_ndmp_mover_continue_reply_v2 = pack_ndmp_mover_continue_reply

    pack_ndmp_mover_continue_reply_v3 = pack_ndmp_mover_continue_reply

    pack_ndmp_mover_continue_reply_v4 = pack_ndmp_mover_continue_reply

    pack_ndmp_mover_abort_reply_v2 = pack_ndmp_mover_abort_reply

    pack_ndmp_mover_abort_reply_v3 = pack_ndmp_mover_abort_reply

    pack_ndmp_mover_abort_reply_v4 = pack_ndmp_mover_abort_reply

    pack_ndmp_mover_stop_reply_v2 = pack_ndmp_mover_stop_reply

    pack_ndmp_mover_stop_reply_v3 = pack_ndmp_mover_stop_reply

    pack_ndmp_mover_stop_reply_v4 = pack_ndmp_mover_stop_reply

    pack_ndmp_mover_read_request_v2 = pack_ndmp_mover_read_request

    pack_ndmp_mover_read_request_v3 = pack_ndmp_mover_read_request

    pack_ndmp_mover_read_request_v4 = pack_ndmp_mover_read_request

    pack_ndmp_mover_read_reply_v2 = pack_ndmp_mover_read_reply

    pack_ndmp_mover_read_reply_v3 = pack_ndmp_mover_read_reply

    pack_ndmp_mover_read_reply_v4 = pack_ndmp_mover_read_reply

    pack_ndmp_mover_close_reply_v2 = pack_ndmp_mover_close_reply

    pack_ndmp_mover_close_reply_v3 = pack_ndmp_mover_close_reply

    pack_ndmp_mover_close_reply_v4 = pack_ndmp_mover_close_reply

    pack_ndmp_mover_connect_reply_v4 = pack_ndmp_mover_connect_reply_v3

    pack_ndmp_data_get_state_reply_v2 = pack_ndmp_data_get_state_reply

    pack_ndmp_data_start_backup_request_v2 = pack_ndmp_data_start_backup_request

    pack_ndmp_data_start_backup_request_v4 = pack_ndmp_data_start_backup_request_v3

    pack_ndmp_data_start_backup_reply_v2 = pack_ndmp_data_start_backup_reply

    pack_ndmp_data_start_backup_reply_v3 = pack_ndmp_data_start_backup_reply

    pack_ndmp_data_start_backup_reply_v4 = pack_ndmp_data_start_backup_reply

    pack_ndmp_name_v2 = pack_ndmp_name

    pack_ndmp_data_start_recover_request_v2 = pack_ndmp_data_start_recover_request

    pack_ndmp_data_start_recover_request_v4 = pack_ndmp_data_start_recover_request_v3

    pack_ndmp_data_start_recover_reply_v2 = pack_ndmp_data_start_recover_reply

    pack_ndmp_data_start_recover_reply_v3 = pack_ndmp_data_start_recover_reply

    pack_ndmp_data_start_recover_reply_v4 = pack_ndmp_data_start_recover_reply

    pack_ndmp_data_start_recover_filehist_reply_v4 = pack_ndmp_data_start_recover_reply

    pack_ndmp_data_abort_reply_v2 = pack_ndmp_data_abort_reply

    pack_ndmp_data_abort_reply_v3 = pack_ndmp_data_abort_reply

    pack_ndmp_data_abort_reply_v4 = pack_ndmp_data_abort_reply

    pack_ndmp_data_stop_reply_v2 = pack_ndmp_data_stop_reply

    pack_ndmp_data_stop_reply_v3 = pack_ndmp_data_stop_reply

    pack_ndmp_data_stop_reply_v4 = pack_ndmp_data_stop_reply

    pack_ndmp_data_get_env_reply_v2 = pack_ndmp_data_get_env_reply

    pack_ndmp_data_get_env_reply_v3 = pack_ndmp_data_get_env_reply

    pack_ndmp_data_get_env_reply_v4 = pack_ndmp_data_get_env_reply

    pack_ndmp_data_listen_request_v4 = pack_ndmp_data_listen_request_v3

    pack_ndmp_data_connect_reply_v4 = pack_ndmp_data_connect_reply_v3

    pack_ndmp_notify_data_halted_request_v2 = pack_ndmp_notify_data_halted_request

    pack_ndmp_notify_data_halted_request_v3 = pack_ndmp_notify_data_halted_request

    pack_ndmp_notify_connection_status_request_v2 = pack_ndmp_notify_connected_request

    pack_ndmp_notify_connection_status_request_v3 = pack_ndmp_notify_connected_request

    pack_ndmp_notify_connection_status_request_v4 = pack_ndmp_notify_connected_request

    pack_ndmp_notify_mover_paused_request_v2 = pack_ndmp_notify_mover_paused_request

    pack_ndmp_notify_mover_paused_request_v3 = pack_ndmp_notify_mover_paused_request

    pack_ndmp_notify_mover_paused_request_v4 = pack_ndmp_notify_mover_paused_request

    pack_ndmp_notify_mover_halted_request_v2 = pack_ndmp_notify_mover_halted_request

    pack_ndmp_notify_mover_halted_request_v3 = pack_ndmp_notify_mover_halted_request

    pack_ndmp_notify_data_read_request_v2 = pack_ndmp_notify_data_read_request

    pack_ndmp_notify_data_read_request_v3 = pack_ndmp_notify_data_read_request

    pack_ndmp_notify_data_read_request_v4 = pack_ndmp_notify_data_read_request

    pack_ndmp_log_log_request_v2 = pack_ndmp_log_log_request

    pack_ndmp_log_log_request_v3 = pack_ndmp_log_log_request

    pack_ndmp_log_log_request_v4 = pack_ndmp_log_log_request

    pack_ndmp_log_debug_request_v2 = pack_ndmp_log_debug_request

    pack_ndmp_log_debug_request_v3 = pack_ndmp_log_debug_request

    pack_ndmp_log_debug_request_v4 = pack_ndmp_log_debug_request

    pack_ndmp_log_file_request_v2 = pack_ndmp_log_file_request

    pack_ndmp_file = pack_ndmp_file_v3

    pack_ndmp_dir = pack_ndmp_dir_v3

    pack_ndmp_node = pack_ndmp_node_v3

    pack_ndmp_fh_add_unix_path_request_v2 = pack_ndmp_fh_add_unix_path_request

    pack_ndmp_fh_add_unix_path_request_v3 = pack_ndmp_fh_add_unix_path_request

    pack_ndmp_fh_add_file_request_v4 = pack_ndmp_fh_add_file_request_v3

    pack_ndmp_fh_add_unix_dir_request_v2 = pack_ndmp_fh_add_unix_dir_request

    pack_ndmp_fh_add_unix_dir_request_v3 = pack_ndmp_fh_add_unix_dir_request

    pack_ndmp_fh_add_dir_request_v4 = pack_ndmp_fh_add_dir_request_v3

    pack_ndmp_fh_add_unix_node_request_v2 = pack_ndmp_fh_add_unix_node_request

    pack_ndmp_fh_add_unix_node_request_v3 = pack_ndmp_fh_add_unix_node_request

    pack_ndmp_fh_add_node_request_v4 = pack_ndmp_fh_add_node_request_v3

class NDMPUnpacker(xdrlib.Unpacker):
    def __init__(self, data, check_enum=True, check_array=True):
        xdrlib.Unpacker.__init__(self, data)
        self.check_enum = check_enum
        self.check_array = check_array

    unpack_hyper = xdrlib.Unpacker.unpack_hyper
    unpack_string = xdrlib.Unpacker.unpack_string
    unpack_int = xdrlib.Unpacker.unpack_int
    unpack_float = xdrlib.Unpacker.unpack_float
    unpack_uint = xdrlib.Unpacker.unpack_uint
    unpack_opaque = xdrlib.Unpacker.unpack_opaque
    unpack_double = xdrlib.Unpacker.unpack_double
    unpack_unsigned = xdrlib.Unpacker.unpack_uint
    unpack_quadruple = xdrlib.Unpacker.unpack_double
    unpack_uhyper = xdrlib.Unpacker.unpack_uhyper
    unpack_bool = xdrlib.Unpacker.unpack_bool
    unpack_u_long = xdrlib.Unpacker.unpack_uint
    unpack_u_short = xdrlib.Unpacker.unpack_uint
    unpack_short = xdrlib.Unpacker.unpack_uint
    
    def unpack_ndmp_u_quad(self):
        data = types.ndmp_u_quad()
        data.high = self.unpack_u_long()
        data.low = self.unpack_u_long()
        if hasattr(self, 'filter_ndmp_u_quad'):
            data = getattr(self, 'filter_ndmp_u_quad')(data)
        return data

    def unpack_ndmp_pval(self):
        data = types.ndmp_pval()
        data.name = self.unpack_string()
        data.value = self.unpack_string()
        if hasattr(self, 'filter_ndmp_pval'):
            data = getattr(self, 'filter_ndmp_pval')(data)
        return data

    def unpack_ndmp_scsi_device(self):
        data = types.ndmp_scsi_device()
        data.name = self.unpack_string()
        if hasattr(self, 'filter_ndmp_scsi_device'):
            data = getattr(self, 'filter_ndmp_scsi_device')(data)
        return data

    def unpack_ndmp_tape_device(self):
        data = types.ndmp_tape_device()
        data.name = self.unpack_string()
        if hasattr(self, 'filter_ndmp_tape_device'):
            data = getattr(self, 'filter_ndmp_tape_device')(data)
        return data

    def unpack_ndmp_error(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_NO_ERR, const.NDMP_NOT_SUPPORTED_ERR, const.NDMP_DEVICE_BUSY_ERR, const.NDMP_DEVICE_OPENED_ERR, const.NDMP_NOT_AUTHORIZED_ERR, const.NDMP_PERMISSION_ERR, const.NDMP_DEV_NOT_OPEN_ERR, const.NDMP_IO_ERR, const.NDMP_TIMEOUT_ERR, const.NDMP_ILLEGAL_ARGS_ERR, const.NDMP_NO_TAPE_LOADED_ERR, const.NDMP_WRITE_PROTECT_ERR, const.NDMP_EOF_ERR, const.NDMP_EOM_ERR, const.NDMP_FILE_NOT_FOUND_ERR, const.NDMP_BAD_FILE_ERR, const.NDMP_NO_DEVICE_ERR, const.NDMP_NO_BUS_ERR, const.NDMP_XDR_DECODE_ERR, const.NDMP_ILLEGAL_STATE_ERR, const.NDMP_UNDEFINED_ERR, const.NDMP_XDR_ENCODE_ERR, const.NDMP_NO_MEM_ERR, const.NDMP_CONNECT_ERR, const.NDMP_SEQUENCE_NUM_ERR, const.NDMP_READ_IN_PROGRESS_ERR, const.NDMP_PRECONDITION_ERR, const.NDMP_CLASS_NOT_SUPPORTED_ERR, const.NDMP_VERSION_NOT_SUPPORTED_ERR, const.NDMP_EXT_DUPL_CLASSES_ERR, const.NDMP_EXT_DANDN_ILLEGAL_ERR]:
            raise XDRError('value=%s not in enum ndmp_error' % data)
        if hasattr(self, 'filter_ndmp_error'):
            data = getattr(self, 'filter_ndmp_error')(data)
        return data

    def unpack_ndmp_header_message_type(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_MESSAGE_REQUEST, const.NDMP_MESSAGE_REPLY]:
            raise XDRError('value=%s not in enum ndmp_header_message_type' % data)
        if hasattr(self, 'filter_ndmp_header_message_type'):
            data = getattr(self, 'filter_ndmp_header_message_type')(data)
        return data

    def unpack_ndmp_message(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_CONNECT_OPEN, const.NDMP_CONNECT_CLIENT_AUTH, const.NDMP_CONNECT_CLOSE, const.NDMP_CONNECT_SERVER_AUTH, const.NDMP_CONFIG_GET_HOST_INFO, const.NDMP_CONFIG_GET_BUTYPE_ATTR, const.NDMP_CONFIG_GET_CONNECTION_TYPE, const.NDMP_CONFIG_GET_AUTH_ATTR, const.NDMP_CONFIG_GET_BUTYPE_INFO, const.NDMP_CONFIG_GET_FS_INFO, const.NDMP_CONFIG_GET_TAPE_INFO, const.NDMP_CONFIG_GET_SCSI_INFO, const.NDMP_CONFIG_GET_SERVER_INFO, const.NDMP_CONFIG_SET_EXT_LIST, const.NDMP_CONFIG_GET_EXT_LIST, const.NDMP_SCSI_OPEN, const.NDMP_SCSI_CLOSE, const.NDMP_SCSI_GET_STATE, const.NDMP_SCSI_SET_TARGET, const.NDMP_SCSI_RESET_DEVICE, const.NDMP_SCSI_RESET_BUS, const.NDMP_SCSI_EXECUTE_CDB, const.NDMP_TAPE_OPEN, const.NDMP_TAPE_CLOSE, const.NDMP_TAPE_GET_STATE, const.NDMP_TAPE_MTIO, const.NDMP_TAPE_WRITE, const.NDMP_TAPE_READ, const.NDMP_TAPE_SET_RECORD_SIZE, const.NDMP_TAPE_EXECUTE_CDB, const.NDMP_DATA_GET_STATE, const.NDMP_DATA_START_BACKUP, const.NDMP_DATA_START_RECOVER, const.NDMP_DATA_ABORT, const.NDMP_DATA_GET_ENV, const.NDMP_DATA_RESVD1, const.NDMP_DATA_RESVD2, const.NDMP_DATA_STOP, const.NDMP_DATA_CONTINUE, const.NDMP_DATA_LISTEN, const.NDMP_DATA_CONNECT, const.NDMP_DATA_START_RECOVER_FILEHIST, const.NDMP_NOTIFY_RESERVED, const.NDMP_NOTIFY_DATA_HALTED, const.NDMP_NOTIFY_CONNECTION_STATUS, const.NDMP_NOTIFY_MOVER_HALTED, const.NDMP_NOTIFY_MOVER_PAUSED, const.NDMP_NOTIFY_DATA_READ, const.NDMP_LOG_FILE, const.NDMP_LOG_MESSAGE, const.NDMP_FH_ADD_UNIX_PATH, const.NDMP_FH_ADD_UNIX_DIR, const.NDMP_FH_ADD_UNIX_NODE, const.NDMP_FH_ADD_FILE, const.NDMP_FH_ADD_DIR, const.NDMP_FH_ADD_NODE, const.NDMP_MOVER_GET_STATE, const.NDMP_MOVER_LISTEN, const.NDMP_MOVER_CONTINUE, const.NDMP_MOVER_ABORT, const.NDMP_MOVER_STOP, const.NDMP_MOVER_SET_WINDOW, const.NDMP_MOVER_READ, const.NDMP_MOVER_CLOSE, const.NDMP_MOVER_SET_RECORD_SIZE, const.NDMP_MOVER_CONNECT, const.NDMP_EXT_STANDARD_BASE, const.NDMP_EXT_PROPRIETARY_BASE]:
            raise XDRError('value=%s not in enum ndmp_message' % data)
        if hasattr(self, 'filter_ndmp_message'):
            data = getattr(self, 'filter_ndmp_message')(data)
        return data

    def unpack_ndmp_header(self):
        data = types.ndmp_header()
        data.sequence = self.unpack_u_long()
        data.time_stamp = self.unpack_u_long()
        data.message_type = self.unpack_ndmp_header_message_type()
        data.message = self.unpack_ndmp_message()
        data.reply_sequence = self.unpack_u_long()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_header'):
            data = getattr(self, 'filter_ndmp_header')(data)
        return data

    def unpack_ndmp_connect_open_request(self):
        data = types.ndmp_connect_open_request()
        data.protocol_version = self.unpack_u_short()
        if hasattr(self, 'filter_ndmp_connect_open_request'):
            data = getattr(self, 'filter_ndmp_connect_open_request')(data)
        return data

    def unpack_ndmp_connect_open_reply(self):
        data = types.ndmp_connect_open_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_connect_open_reply'):
            data = getattr(self, 'filter_ndmp_connect_open_reply')(data)
        return data

    def unpack_ndmp_auth_type(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_AUTH_NONE, const.NDMP_AUTH_TEXT, const.NDMP_AUTH_MD5]:
            raise XDRError('value=%s not in enum ndmp_auth_type' % data)
        if hasattr(self, 'filter_ndmp_auth_type'):
            data = getattr(self, 'filter_ndmp_auth_type')(data)
        return data

    def unpack_ndmp_auth_text(self):
        data = types.ndmp_auth_text()
        data.user = self.unpack_string()
        data.password = self.unpack_string()
        if hasattr(self, 'filter_ndmp_auth_text'):
            data = getattr(self, 'filter_ndmp_auth_text')(data)
        return data

    def unpack_ndmp_auth_md5(self):
        data = types.ndmp_auth_md5()
        data.user = self.unpack_string()
        data.auth_digest = self.unpack_fopaque(16)
        if hasattr(self, 'filter_ndmp_auth_md5'):
            data = getattr(self, 'filter_ndmp_auth_md5')(data)
        return data

    def unpack_ndmp_auth_data(self):
        data = types.ndmp_auth_data()
        data.auth_type = self.unpack_ndmp_auth_type()
        if data.auth_type == const.NDMP_AUTH_NONE:
            pass
        elif data.auth_type == const.NDMP_AUTH_TEXT:
            data.auth_text = self.unpack_ndmp_auth_text()
        elif data.auth_type == const.NDMP_AUTH_MD5:
            data.auth_md5 = self.unpack_ndmp_auth_md5()
        else:
            raise XDRError('bad switch=%s' % data).auth_type
        if hasattr(self, 'filter_ndmp_auth_data'):
            data = getattr(self, 'filter_ndmp_auth_data')(data)
        return data

    def unpack_ndmp_connect_client_auth_request(self):
        data = types.ndmp_connect_client_auth_request()
        data.auth_data = self.unpack_ndmp_auth_data()
        if hasattr(self, 'filter_ndmp_connect_client_auth_request'):
            data = getattr(self, 'filter_ndmp_connect_client_auth_request')(data)
        return data

    def unpack_ndmp_connect_client_auth_reply(self):
        data = types.ndmp_connect_client_auth_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_connect_client_auth_reply'):
            data = getattr(self, 'filter_ndmp_connect_client_auth_reply')(data)
        return data

    def unpack_ndmp_auth_attr(self):
        data = types.ndmp_auth_attr()
        data.auth_type = self.unpack_ndmp_auth_type()
        if data.auth_type == const.NDMP_AUTH_NONE:
            pass
        elif data.auth_type == const.NDMP_AUTH_TEXT:
            pass
        elif data.auth_type == const.NDMP_AUTH_MD5:
            data.challenge = self.unpack_fopaque(64)
        else:
            raise XDRError('bad switch=%s' % data).auth_type
        if hasattr(self, 'filter_ndmp_auth_attr'):
            data = getattr(self, 'filter_ndmp_auth_attr')(data)
        return data

    def unpack_ndmp_connect_server_auth_request(self):
        data = types.ndmp_connect_server_auth_request()
        data.client_attr = self.unpack_ndmp_auth_attr()
        if hasattr(self, 'filter_ndmp_connect_server_auth_request'):
            data = getattr(self, 'filter_ndmp_connect_server_auth_request')(data)
        return data

    def unpack_ndmp_connect_server_auth_reply(self):
        data = types.ndmp_connect_server_auth_reply()
        data.error = self.unpack_ndmp_error()
        data.auth_result = self.unpack_ndmp_auth_data()
        if hasattr(self, 'filter_ndmp_connect_server_auth_reply'):
            data = getattr(self, 'filter_ndmp_connect_server_auth_reply')(data)
        return data

    def unpack_ndmp_auth_text_v3(self):
        data = types.ndmp_auth_text_v3()
        data.auth_id = self.unpack_string()
        data.auth_password = self.unpack_string()
        if hasattr(self, 'filter_ndmp_auth_text_v3'):
            data = getattr(self, 'filter_ndmp_auth_text_v3')(data)
        return data

    def unpack_ndmp_auth_md5_v3(self):
        data = types.ndmp_auth_md5_v3()
        data.auth_id = self.unpack_string()
        data.auth_digest = self.unpack_fopaque(16)
        if hasattr(self, 'filter_ndmp_auth_md5_v3'):
            data = getattr(self, 'filter_ndmp_auth_md5_v3')(data)
        return data

    def unpack_ndmp_auth_data_v3(self):
        data = types.ndmp_auth_data_v3()
        data.auth_type = self.unpack_ndmp_auth_type()
        if data.auth_type == const.NDMP_AUTH_NONE:
            pass
        elif data.auth_type == const.NDMP_AUTH_TEXT:
            data.auth_text = self.unpack_ndmp_auth_text_v3()
        elif data.auth_type == const.NDMP_AUTH_MD5:
            data.auth_md5 = self.unpack_ndmp_auth_md5_v3()
        else:
            raise XDRError('bad switch=%s' % data).auth_type
        if hasattr(self, 'filter_ndmp_auth_data_v3'):
            data = getattr(self, 'filter_ndmp_auth_data_v3')(data)
        return data

    def unpack_ndmp_connect_client_auth_request_v3(self):
        data = types.ndmp_connect_client_auth_request_v3()
        data.auth_data = self.unpack_ndmp_auth_data_v3()
        if hasattr(self, 'filter_ndmp_connect_client_auth_request_v3'):
            data = getattr(self, 'filter_ndmp_connect_client_auth_request_v3')(data)
        return data

    def unpack_ndmp_connect_client_auth_reply_v3(self):
        data = types.ndmp_connect_client_auth_reply_v3()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_connect_client_auth_reply_v3'):
            data = getattr(self, 'filter_ndmp_connect_client_auth_reply_v3')(data)
        return data

    def unpack_ndmp_config_get_host_info_reply(self):
        data = types.ndmp_config_get_host_info_reply()
        data.error = self.unpack_ndmp_error()
        data.hostname = self.unpack_string()
        data.os_type = self.unpack_string()
        data.os_vers = self.unpack_string()
        data.hostid = self.unpack_string()
        data.auth_type = self.unpack_array(self.unpack_ndmp_auth_type)
        if hasattr(self, 'filter_ndmp_config_get_host_info_reply'):
            data = getattr(self, 'filter_ndmp_config_get_host_info_reply')(data)
        return data

    def unpack_ndmp_config_get_butype_attr_request(self):
        data = types.ndmp_config_get_butype_attr_request()
        data.name = self.unpack_string()
        if hasattr(self, 'filter_ndmp_config_get_butype_attr_request'):
            data = getattr(self, 'filter_ndmp_config_get_butype_attr_request')(data)
        return data

    def unpack_ndmp_config_get_butype_attr_reply(self):
        data = types.ndmp_config_get_butype_attr_reply()
        data.error = self.unpack_ndmp_error()
        data.attrs = self.unpack_u_long()
        if hasattr(self, 'filter_ndmp_config_get_butype_attr_reply'):
            data = getattr(self, 'filter_ndmp_config_get_butype_attr_reply')(data)
        return data

    def unpack_ndmp_addr_type(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_ADDR_LOCAL, const.NDMP_ADDR_TCP, const.NDMP_ADDR_FC, const.NDMP_ADDR_IPC]:
            raise XDRError('value=%s not in enum ndmp_addr_type' % data)
        if hasattr(self, 'filter_ndmp_addr_type'):
            data = getattr(self, 'filter_ndmp_addr_type')(data)
        return data

    def unpack_ndmp_config_get_mover_type_reply(self):
        data = types.ndmp_config_get_mover_type_reply()
        data.error = self.unpack_ndmp_error()
        data.methods = self.unpack_array(self.unpack_ndmp_addr_type)
        if hasattr(self, 'filter_ndmp_config_get_mover_type_reply'):
            data = getattr(self, 'filter_ndmp_config_get_mover_type_reply')(data)
        return data

    def unpack_ndmp_config_get_auth_attr_request(self):
        data = types.ndmp_config_get_auth_attr_request()
        data.auth_type = self.unpack_ndmp_auth_type()
        if hasattr(self, 'filter_ndmp_config_get_auth_attr_request'):
            data = getattr(self, 'filter_ndmp_config_get_auth_attr_request')(data)
        return data

    def unpack_ndmp_config_get_auth_attr_reply(self):
        data = types.ndmp_config_get_auth_attr_reply()
        data.error = self.unpack_ndmp_error()
        data.server_attr = self.unpack_ndmp_auth_attr()
        if hasattr(self, 'filter_ndmp_config_get_auth_attr_reply'):
            data = getattr(self, 'filter_ndmp_config_get_auth_attr_reply')(data)
        return data

    def unpack_ndmp_config_get_host_info_reply_v3(self):
        data = types.ndmp_config_get_host_info_reply_v3()
        data.error = self.unpack_ndmp_error()
        data.hostname = self.unpack_string()
        data.os_type = self.unpack_string()
        data.os_vers = self.unpack_string()
        data.hostid = self.unpack_string()
        if hasattr(self, 'filter_ndmp_config_get_host_info_reply_v3'):
            data = getattr(self, 'filter_ndmp_config_get_host_info_reply_v3')(data)
        return data

    def unpack_ndmp_config_get_connection_type_reply_v3(self):
        data = types.ndmp_config_get_connection_type_reply_v3()
        data.error = self.unpack_ndmp_error()
        data.addr_types = self.unpack_array(self.unpack_ndmp_addr_type)
        if hasattr(self, 'filter_ndmp_config_get_connection_type_reply_v3'):
            data = getattr(self, 'filter_ndmp_config_get_connection_type_reply_v3')(data)
        return data

    def unpack_ndmp_config_get_server_info_reply_v3(self):
        data = types.ndmp_config_get_server_info_reply_v3()
        data.error = self.unpack_ndmp_error()
        data.vendor_name = self.unpack_string()
        data.product_name = self.unpack_string()
        data.revision_number = self.unpack_string()
        data.auth_type = self.unpack_array(self.unpack_ndmp_auth_type)
        if hasattr(self, 'filter_ndmp_config_get_server_info_reply_v3'):
            data = getattr(self, 'filter_ndmp_config_get_server_info_reply_v3')(data)
        return data

    def unpack_ndmp_butype_info(self):
        data = types.ndmp_butype_info()
        data.butype_name = self.unpack_string()
        data.default_env = self.unpack_array(self.unpack_ndmp_pval)
        data.attrs = self.unpack_u_long()
        if hasattr(self, 'filter_ndmp_butype_info'):
            data = getattr(self, 'filter_ndmp_butype_info')(data)
        return data

    def unpack_ndmp_config_get_butype_info_reply_v3(self):
        data = types.ndmp_config_get_butype_info_reply_v3()
        data.error = self.unpack_ndmp_error()
        data.butype_info = self.unpack_array(self.unpack_ndmp_butype_info)
        if hasattr(self, 'filter_ndmp_config_get_butype_info_reply_v3'):
            data = getattr(self, 'filter_ndmp_config_get_butype_info_reply_v3')(data)
        return data

    def unpack_ndmp_fs_info_v3(self):
        data = types.ndmp_fs_info_v3()
        data.invalid = self.unpack_u_long()
        data.fs_type = self.unpack_string()
        data.fs_logical_device = self.unpack_string()
        data.fs_physical_device = self.unpack_string()
        data.total_size = self.unpack_ndmp_u_quad()
        data.used_size = self.unpack_ndmp_u_quad()
        data.avail_size = self.unpack_ndmp_u_quad()
        data.total_inodes = self.unpack_ndmp_u_quad()
        data.used_inodes = self.unpack_ndmp_u_quad()
        data.fs_env = self.unpack_array(self.unpack_ndmp_pval)
        data.fs_status = self.unpack_string()
        if hasattr(self, 'filter_ndmp_fs_info_v3'):
            data = getattr(self, 'filter_ndmp_fs_info_v3')(data)
        return data

    def unpack_ndmp_config_get_fs_info_reply_v3(self):
        data = types.ndmp_config_get_fs_info_reply_v3()
        data.error = self.unpack_ndmp_error()
        data.fs_info = self.unpack_array(self.unpack_ndmp_fs_info_v3)
        if hasattr(self, 'filter_ndmp_config_get_fs_info_reply_v3'):
            data = getattr(self, 'filter_ndmp_config_get_fs_info_reply_v3')(data)
        return data

    def unpack_ndmp_device_capability_v3(self):
        data = types.ndmp_device_capability_v3()
        data.device = self.unpack_string()
        data.attr = self.unpack_u_long()
        data.capability = self.unpack_array(self.unpack_ndmp_pval)
        if hasattr(self, 'filter_ndmp_device_capability_v3'):
            data = getattr(self, 'filter_ndmp_device_capability_v3')(data)
        return data

    def unpack_ndmp_device_info_v3(self):
        data = types.ndmp_device_info_v3()
        data.model = self.unpack_string()
        data.caplist = self.unpack_array(self.unpack_ndmp_device_capability_v3)
        if hasattr(self, 'filter_ndmp_device_info_v3'):
            data = getattr(self, 'filter_ndmp_device_info_v3')(data)
        return data

    def unpack_ndmp_config_get_tape_info_reply_v3(self):
        data = types.ndmp_config_get_tape_info_reply_v3()
        data.error = self.unpack_ndmp_error()
        data.tape_info = self.unpack_array(self.unpack_ndmp_device_info_v3)
        if hasattr(self, 'filter_ndmp_config_get_tape_info_reply_v3'):
            data = getattr(self, 'filter_ndmp_config_get_tape_info_reply_v3')(data)
        return data

    def unpack_ndmp_config_get_scsi_info_reply_v3(self):
        data = types.ndmp_config_get_scsi_info_reply_v3()
        data.error = self.unpack_ndmp_error()
        data.scsi_info = self.unpack_array(self.unpack_ndmp_device_info_v3)
        if hasattr(self, 'filter_ndmp_config_get_scsi_info_reply_v3'):
            data = getattr(self, 'filter_ndmp_config_get_scsi_info_reply_v3')(data)
        return data

    def unpack_ndmp_config_get_butype_info_reply_v4(self):
        data = types.ndmp_config_get_butype_info_reply_v4()
        data.error = self.unpack_ndmp_error()
        data.butype_info = self.unpack_array(self.unpack_ndmp_butype_info)
        if hasattr(self, 'filter_ndmp_config_get_butype_info_reply_v4'):
            data = getattr(self, 'filter_ndmp_config_get_butype_info_reply_v4')(data)
        return data

    def unpack_ndmp_class_list(self):
        data = types.ndmp_class_list()
        data.ext_class_id = self.unpack_u_short()
        data.ext_version = self.unpack_array(self.unpack_u_short)
        if hasattr(self, 'filter_ndmp_class_list'):
            data = getattr(self, 'filter_ndmp_class_list')(data)
        return data

    def unpack_ndmp_class_version(self):
        data = types.ndmp_class_version()
        data.ext_class_id = self.unpack_u_short()
        data.ext_version = self.unpack_u_short()
        if hasattr(self, 'filter_ndmp_class_version'):
            data = getattr(self, 'filter_ndmp_class_version')(data)
        return data

    def unpack_ndmp_config_get_ext_list_reply(self):
        data = types.ndmp_config_get_ext_list_reply()
        data.error = self.unpack_ndmp_error()
        data.class_list = self.unpack_array(self.unpack_ndmp_class_list)
        if hasattr(self, 'filter_ndmp_config_get_ext_list_reply'):
            data = getattr(self, 'filter_ndmp_config_get_ext_list_reply')(data)
        return data

    def unpack_ndmp_config_set_ext_list_request(self):
        data = types.ndmp_config_set_ext_list_request()
        data.ndmp_selected_ext = self.unpack_array(self.unpack_ndmp_class_version)
        if hasattr(self, 'filter_ndmp_config_set_ext_list_request'):
            data = getattr(self, 'filter_ndmp_config_set_ext_list_request')(data)
        return data

    def unpack_ndmp_config_set_ext_list_reply(self):
        data = types.ndmp_config_set_ext_list_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_config_set_ext_list_reply'):
            data = getattr(self, 'filter_ndmp_config_set_ext_list_reply')(data)
        return data

    def unpack_ndmp_scsi_open_request(self):
        data = types.ndmp_scsi_open_request()
        data.device = self.unpack_ndmp_scsi_device()
        if hasattr(self, 'filter_ndmp_scsi_open_request'):
            data = getattr(self, 'filter_ndmp_scsi_open_request')(data)
        return data

    def unpack_ndmp_scsi_open_reply(self):
        data = types.ndmp_scsi_open_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_scsi_open_reply'):
            data = getattr(self, 'filter_ndmp_scsi_open_reply')(data)
        return data

    def unpack_ndmp_scsi_close_reply(self):
        data = types.ndmp_scsi_close_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_scsi_close_reply'):
            data = getattr(self, 'filter_ndmp_scsi_close_reply')(data)
        return data

    def unpack_ndmp_scsi_get_state_reply(self):
        data = types.ndmp_scsi_get_state_reply()
        data.error = self.unpack_ndmp_error()
        data.target_controller = self.unpack_short()
        data.target_id = self.unpack_short()
        data.target_lun = self.unpack_short()
        if hasattr(self, 'filter_ndmp_scsi_get_state_reply'):
            data = getattr(self, 'filter_ndmp_scsi_get_state_reply')(data)
        return data

    def unpack_ndmp_scsi_set_target_request(self):
        data = types.ndmp_scsi_set_target_request()
        data.device = self.unpack_ndmp_scsi_device()
        data.target_controller = self.unpack_u_short()
        data.target_id = self.unpack_u_short()
        data.target_lun = self.unpack_u_short()
        if hasattr(self, 'filter_ndmp_scsi_set_target_request'):
            data = getattr(self, 'filter_ndmp_scsi_set_target_request')(data)
        return data

    def unpack_ndmp_scsi_set_target_reply(self):
        data = types.ndmp_scsi_set_target_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_scsi_set_target_reply'):
            data = getattr(self, 'filter_ndmp_scsi_set_target_reply')(data)
        return data

    def unpack_ndmp_scsi_reset_device_reply(self):
        data = types.ndmp_scsi_reset_device_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_scsi_reset_device_reply'):
            data = getattr(self, 'filter_ndmp_scsi_reset_device_reply')(data)
        return data

    def unpack_ndmp_scsi_reset_bus_reply(self):
        data = types.ndmp_scsi_reset_bus_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_scsi_reset_bus_reply'):
            data = getattr(self, 'filter_ndmp_scsi_reset_bus_reply')(data)
        return data

    def unpack_ndmp_execute_cdb_request(self):
        data = types.ndmp_execute_cdb_request()
        data.flags = self.unpack_u_long()
        data.timeout = self.unpack_u_long()
        data.datain_len = self.unpack_u_long()
        data.cdb = self.unpack_opaque()
        data.dataout = self.unpack_opaque()
        if hasattr(self, 'filter_ndmp_execute_cdb_request'):
            data = getattr(self, 'filter_ndmp_execute_cdb_request')(data)
        return data

    def unpack_ndmp_execute_cdb_reply(self):
        data = types.ndmp_execute_cdb_reply()
        data.error = self.unpack_ndmp_error()
        data.status = self.unpack_int()
        data.dataout_len = self.unpack_u_long()
        data.datain = self.unpack_opaque()
        data.ext_sense = self.unpack_opaque()
        if hasattr(self, 'filter_ndmp_execute_cdb_reply'):
            data = getattr(self, 'filter_ndmp_execute_cdb_reply')(data)
        return data

    def unpack_ndmp_scsi_open_request_v3(self):
        data = types.ndmp_scsi_open_request_v3()
        data.device = self.unpack_string()
        if hasattr(self, 'filter_ndmp_scsi_open_request_v3'):
            data = getattr(self, 'filter_ndmp_scsi_open_request_v3')(data)
        return data

    def unpack_ndmp_scsi_set_target_request_v3(self):
        data = types.ndmp_scsi_set_target_request_v3()
        data.device = self.unpack_string()
        data.target_controller = self.unpack_u_short()
        data.target_id = self.unpack_u_short()
        data.target_lun = self.unpack_u_short()
        if hasattr(self, 'filter_ndmp_scsi_set_target_request_v3'):
            data = getattr(self, 'filter_ndmp_scsi_set_target_request_v3')(data)
        return data

    def unpack_ndmp_tape_open_mode(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_TAPE_READ_MODE, const.NDMP_TAPE_WRITE_MODE, const.NDMP_TAPE_RAW_MODE, const.NDMP_TAPE_RAW1_MODE, const.NDMP_TAPE_RAW2_MODE]:
            raise XDRError('value=%s not in enum ndmp_tape_open_mode' % data)
        if hasattr(self, 'filter_ndmp_tape_open_mode'):
            data = getattr(self, 'filter_ndmp_tape_open_mode')(data)
        return data

    def unpack_ndmp_tape_open_request(self):
        data = types.ndmp_tape_open_request()
        data.device = self.unpack_ndmp_tape_device()
        data.mode = self.unpack_ndmp_tape_open_mode()
        if hasattr(self, 'filter_ndmp_tape_open_request'):
            data = getattr(self, 'filter_ndmp_tape_open_request')(data)
        return data

    def unpack_ndmp_tape_open_reply(self):
        data = types.ndmp_tape_open_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_tape_open_reply'):
            data = getattr(self, 'filter_ndmp_tape_open_reply')(data)
        return data

    def unpack_ndmp_tape_close_reply(self):
        data = types.ndmp_tape_close_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_tape_close_reply'):
            data = getattr(self, 'filter_ndmp_tape_close_reply')(data)
        return data

    def unpack_ndmp_tape_get_state_reply(self):
        data = types.ndmp_tape_get_state_reply()
        data.error = self.unpack_ndmp_error()
        data.flags = self.unpack_u_long()
        data.file_num = self.unpack_u_long()
        data.soft_errors = self.unpack_u_long()
        data.block_size = self.unpack_u_long()
        data.blockno = self.unpack_u_long()
        data.total_space = self.unpack_ndmp_u_quad()
        data.space_remain = self.unpack_ndmp_u_quad()
        if hasattr(self, 'filter_ndmp_tape_get_state_reply'):
            data = getattr(self, 'filter_ndmp_tape_get_state_reply')(data)
        return data

    def unpack_ndmp_tape_mtio_op(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_MTIO_FSF, const.NDMP_MTIO_BSF, const.NDMP_MTIO_FSR, const.NDMP_MTIO_BSR, const.NDMP_MTIO_REW, const.NDMP_MTIO_EOF, const.NDMP_MTIO_OFF, const.NDMP_MTIO_TUR]:
            raise XDRError('value=%s not in enum ndmp_tape_mtio_op' % data)
        if hasattr(self, 'filter_ndmp_tape_mtio_op'):
            data = getattr(self, 'filter_ndmp_tape_mtio_op')(data)
        return data

    def unpack_ndmp_tape_mtio_request(self):
        data = types.ndmp_tape_mtio_request()
        data.tape_op = self.unpack_ndmp_tape_mtio_op()
        data.count = self.unpack_u_long()
        if hasattr(self, 'filter_ndmp_tape_mtio_request'):
            data = getattr(self, 'filter_ndmp_tape_mtio_request')(data)
        return data

    def unpack_ndmp_tape_mtio_reply(self):
        data = types.ndmp_tape_mtio_reply()
        data.error = self.unpack_ndmp_error()
        data.resid_count = self.unpack_u_long()
        if hasattr(self, 'filter_ndmp_tape_mtio_reply'):
            data = getattr(self, 'filter_ndmp_tape_mtio_reply')(data)
        return data

    def unpack_ndmp_tape_write_request(self):
        data = types.ndmp_tape_write_request()
        data.data_out = self.unpack_opaque()
        if hasattr(self, 'filter_ndmp_tape_write_request'):
            data = getattr(self, 'filter_ndmp_tape_write_request')(data)
        return data

    def unpack_ndmp_tape_write_reply(self):
        data = types.ndmp_tape_write_reply()
        data.error = self.unpack_ndmp_error()
        data.count = self.unpack_u_long()
        if hasattr(self, 'filter_ndmp_tape_write_reply'):
            data = getattr(self, 'filter_ndmp_tape_write_reply')(data)
        return data

    def unpack_ndmp_tape_read_request(self):
        data = types.ndmp_tape_read_request()
        data.count = self.unpack_u_long()
        if hasattr(self, 'filter_ndmp_tape_read_request'):
            data = getattr(self, 'filter_ndmp_tape_read_request')(data)
        return data

    def unpack_ndmp_tape_read_reply(self):
        data = types.ndmp_tape_read_reply()
        data.error = self.unpack_ndmp_error()
        data.data_in = self.unpack_opaque()
        if hasattr(self, 'filter_ndmp_tape_read_reply'):
            data = getattr(self, 'filter_ndmp_tape_read_reply')(data)
        return data

    unpack_ndmp_tape_execute_cdb_request = unpack_ndmp_execute_cdb_request

    unpack_ndmp_tape_execute_cdb_reply = unpack_ndmp_execute_cdb_reply

    def unpack_ndmp_tape_open_request_v3(self):
        data = types.ndmp_tape_open_request_v3()
        data.device = self.unpack_string()
        data.mode = self.unpack_ndmp_tape_open_mode()
        if hasattr(self, 'filter_ndmp_tape_open_request_v3'):
            data = getattr(self, 'filter_ndmp_tape_open_request_v3')(data)
        return data

    def unpack_ndmp_tape_get_state_reply_v3(self):
        data = types.ndmp_tape_get_state_reply_v3()
        data.invalid = self.unpack_u_long()
        data.error = self.unpack_ndmp_error()
        data.flags = self.unpack_u_long()
        data.file_num = self.unpack_u_long()
        data.soft_errors = self.unpack_u_long()
        data.block_size = self.unpack_u_long()
        data.blockno = self.unpack_u_long()
        data.total_space = self.unpack_ndmp_u_quad()
        data.space_remain = self.unpack_ndmp_u_quad()
        data.partition = self.unpack_u_long()
        if hasattr(self, 'filter_ndmp_tape_get_state_reply_v3'):
            data = getattr(self, 'filter_ndmp_tape_get_state_reply_v3')(data)
        return data

    def unpack_ndmp_tape_get_state_reply_v4(self):
        data = types.ndmp_tape_get_state_reply_v4()
        data.unsupported = self.unpack_u_long()
        data.error = self.unpack_ndmp_error()
        data.flags = self.unpack_u_long()
        data.file_num = self.unpack_u_long()
        data.soft_errors = self.unpack_u_long()
        data.block_size = self.unpack_u_long()
        data.blockno = self.unpack_u_long()
        data.total_space = self.unpack_ndmp_u_quad()
        data.space_remain = self.unpack_ndmp_u_quad()
        if hasattr(self, 'filter_ndmp_tape_get_state_reply_v4'):
            data = getattr(self, 'filter_ndmp_tape_get_state_reply_v4')(data)
        return data

    def unpack_ndmp_mover_mode(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_MOVER_MODE_READ, const.NDMP_MOVER_MODE_WRITE, const.NDMP_MOVER_MODE_NOACTION]:
            raise XDRError('value=%s not in enum ndmp_mover_mode' % data)
        if hasattr(self, 'filter_ndmp_mover_mode'):
            data = getattr(self, 'filter_ndmp_mover_mode')(data)
        return data

    def unpack_ndmp_mover_state(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_MOVER_STATE_IDLE, const.NDMP_MOVER_STATE_LISTEN, const.NDMP_MOVER_STATE_ACTIVE, const.NDMP_MOVER_STATE_PAUSED, const.NDMP_MOVER_STATE_HALTED]:
            raise XDRError('value=%s not in enum ndmp_mover_state' % data)
        if hasattr(self, 'filter_ndmp_mover_state'):
            data = getattr(self, 'filter_ndmp_mover_state')(data)
        return data

    def unpack_ndmp_mover_pause_reason(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_MOVER_PAUSE_NA, const.NDMP_MOVER_PAUSE_EOM, const.NDMP_MOVER_PAUSE_EOF, const.NDMP_MOVER_PAUSE_SEEK, const.NDMP_MOVER_PAUSE_MEDIA_ERROR, const.NDMP_MOVER_PAUSE_EOW]:
            raise XDRError('value=%s not in enum ndmp_mover_pause_reason' % data)
        if hasattr(self, 'filter_ndmp_mover_pause_reason'):
            data = getattr(self, 'filter_ndmp_mover_pause_reason')(data)
        return data

    def unpack_ndmp_mover_halt_reason(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_MOVER_HALT_NA, const.NDMP_MOVER_HALT_CONNECT_CLOSED, const.NDMP_MOVER_HALT_ABORTED, const.NDMP_MOVER_HALT_INTERNAL_ERROR, const.NDMP_MOVER_HALT_CONNECT_ERROR, const.NDMP_MOVER_HALT_MEDIA_ERROR]:
            raise XDRError('value=%s not in enum ndmp_mover_halt_reason' % data)
        if hasattr(self, 'filter_ndmp_mover_halt_reason'):
            data = getattr(self, 'filter_ndmp_mover_halt_reason')(data)
        return data

    def unpack_ndmp_mover_get_state_reply(self):
        data = types.ndmp_mover_get_state_reply()
        data.error = self.unpack_ndmp_error()
        data.state = self.unpack_ndmp_mover_state()
        data.pause_reason = self.unpack_ndmp_mover_pause_reason()
        data.halt_reason = self.unpack_ndmp_mover_halt_reason()
        data.record_size = self.unpack_u_long()
        data.record_num = self.unpack_u_long()
        data.data_written = self.unpack_ndmp_u_quad()
        data.seek_position = self.unpack_ndmp_u_quad()
        data.bytes_left_to_read = self.unpack_ndmp_u_quad()
        data.window_offset = self.unpack_ndmp_u_quad()
        data.window_length = self.unpack_ndmp_u_quad()
        if hasattr(self, 'filter_ndmp_mover_get_state_reply'):
            data = getattr(self, 'filter_ndmp_mover_get_state_reply')(data)
        return data

    def unpack_ndmp_tcp_addr(self):
        data = types.ndmp_tcp_addr()
        data.ip_addr = self.unpack_u_long()
        data.port = self.unpack_u_short()
        if hasattr(self, 'filter_ndmp_tcp_addr'):
            data = getattr(self, 'filter_ndmp_tcp_addr')(data)
        return data

    def unpack_ndmp_mover_addr(self):
        data = types.ndmp_mover_addr()
        data.addr_type = self.unpack_ndmp_addr_type()
        if data.addr_type == const.NDMP_ADDR_LOCAL:
            pass
        elif data.addr_type == const.NDMP_ADDR_TCP:
            data.addr = self.unpack_ndmp_tcp_addr()
        else:
            raise XDRError('bad switch=%s' % data).addr_type
        if hasattr(self, 'filter_ndmp_mover_addr'):
            data = getattr(self, 'filter_ndmp_mover_addr')(data)
        return data

    def unpack_ndmp_mover_listen_request(self):
        data = types.ndmp_mover_listen_request()
        data.mode = self.unpack_ndmp_mover_mode()
        data.addr_type = self.unpack_ndmp_addr_type()
        if hasattr(self, 'filter_ndmp_mover_listen_request'):
            data = getattr(self, 'filter_ndmp_mover_listen_request')(data)
        return data

    def unpack_ndmp_mover_listen_reply(self):
        data = types.ndmp_mover_listen_reply()
        data.error = self.unpack_ndmp_error()
        data.mover = self.unpack_ndmp_mover_addr()
        if hasattr(self, 'filter_ndmp_mover_listen_reply'):
            data = getattr(self, 'filter_ndmp_mover_listen_reply')(data)
        return data

    def unpack_ndmp_mover_set_record_size_request(self):
        data = types.ndmp_mover_set_record_size_request()
        data.len = self.unpack_u_long()
        if hasattr(self, 'filter_ndmp_mover_set_record_size_request'):
            data = getattr(self, 'filter_ndmp_mover_set_record_size_request')(data)
        return data

    def unpack_ndmp_mover_set_record_size_reply(self):
        data = types.ndmp_mover_set_record_size_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_mover_set_record_size_reply'):
            data = getattr(self, 'filter_ndmp_mover_set_record_size_reply')(data)
        return data

    def unpack_ndmp_mover_set_window_request(self):
        data = types.ndmp_mover_set_window_request()
        data.offset = self.unpack_ndmp_u_quad()
        data.length = self.unpack_ndmp_u_quad()
        if hasattr(self, 'filter_ndmp_mover_set_window_request'):
            data = getattr(self, 'filter_ndmp_mover_set_window_request')(data)
        return data

    def unpack_ndmp_mover_set_window_reply(self):
        data = types.ndmp_mover_set_window_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_mover_set_window_reply'):
            data = getattr(self, 'filter_ndmp_mover_set_window_reply')(data)
        return data

    def unpack_ndmp_mover_continue_reply(self):
        data = types.ndmp_mover_continue_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_mover_continue_reply'):
            data = getattr(self, 'filter_ndmp_mover_continue_reply')(data)
        return data

    def unpack_ndmp_mover_abort_reply(self):
        data = types.ndmp_mover_abort_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_mover_abort_reply'):
            data = getattr(self, 'filter_ndmp_mover_abort_reply')(data)
        return data

    def unpack_ndmp_mover_stop_reply(self):
        data = types.ndmp_mover_stop_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_mover_stop_reply'):
            data = getattr(self, 'filter_ndmp_mover_stop_reply')(data)
        return data

    def unpack_ndmp_mover_read_request(self):
        data = types.ndmp_mover_read_request()
        data.offset = self.unpack_ndmp_u_quad()
        data.length = self.unpack_ndmp_u_quad()
        if hasattr(self, 'filter_ndmp_mover_read_request'):
            data = getattr(self, 'filter_ndmp_mover_read_request')(data)
        return data

    def unpack_ndmp_mover_read_reply(self):
        data = types.ndmp_mover_read_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_mover_read_reply'):
            data = getattr(self, 'filter_ndmp_mover_read_reply')(data)
        return data

    def unpack_ndmp_mover_close_reply(self):
        data = types.ndmp_mover_close_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_mover_close_reply'):
            data = getattr(self, 'filter_ndmp_mover_close_reply')(data)
        return data

    def unpack_ndmp_fc_addr_v3(self):
        data = types.ndmp_fc_addr_v3()
        data.loop_id = self.unpack_u_long()
        if hasattr(self, 'filter_ndmp_fc_addr_v3'):
            data = getattr(self, 'filter_ndmp_fc_addr_v3')(data)
        return data

    def unpack_ndmp_ipc_addr_v3(self):
        data = types.ndmp_ipc_addr_v3()
        data.comm_data = self.unpack_opaque()
        if hasattr(self, 'filter_ndmp_ipc_addr_v3'):
            data = getattr(self, 'filter_ndmp_ipc_addr_v3')(data)
        return data

    def unpack_ndmp_addr_v3(self):
        data = types.ndmp_addr_v3()
        data.addr_type = self.unpack_ndmp_addr_type()
        if data.addr_type == const.NDMP_ADDR_LOCAL:
            pass
        elif data.addr_type == const.NDMP_ADDR_TCP:
            data.tcp_addr = self.unpack_ndmp_tcp_addr()
        elif data.addr_type == const.NDMP_ADDR_FC:
            data.fc_addr = self.unpack_ndmp_fc_addr_v3()
        elif data.addr_type == const.NDMP_ADDR_IPC:
            data.ipc_addr = self.unpack_ndmp_ipc_addr_v3()
        else:
            raise XDRError('bad switch=%s' % data).addr_type
        if hasattr(self, 'filter_ndmp_addr_v3'):
            data = getattr(self, 'filter_ndmp_addr_v3')(data)
        return data

    def unpack_ndmp_mover_get_state_reply_v3(self):
        data = types.ndmp_mover_get_state_reply_v3()
        data.error = self.unpack_ndmp_error()
        data.state = self.unpack_ndmp_mover_state()
        data.pause_reason = self.unpack_ndmp_mover_pause_reason()
        data.halt_reason = self.unpack_ndmp_mover_halt_reason()
        data.record_size = self.unpack_u_long()
        data.record_num = self.unpack_u_long()
        data.data_written = self.unpack_ndmp_u_quad()
        data.seek_position = self.unpack_ndmp_u_quad()
        data.bytes_left_to_read = self.unpack_ndmp_u_quad()
        data.window_offset = self.unpack_ndmp_u_quad()
        data.window_length = self.unpack_ndmp_u_quad()
        data.data_connection_addr = self.unpack_ndmp_addr_v3()
        if hasattr(self, 'filter_ndmp_mover_get_state_reply_v3'):
            data = getattr(self, 'filter_ndmp_mover_get_state_reply_v3')(data)
        return data

    def unpack_ndmp_mover_listen_reply_v3(self):
        data = types.ndmp_mover_listen_reply_v3()
        data.error = self.unpack_ndmp_error()
        data.data_connection_addr = self.unpack_ndmp_addr_v3()
        if hasattr(self, 'filter_ndmp_mover_listen_reply_v3'):
            data = getattr(self, 'filter_ndmp_mover_listen_reply_v3')(data)
        return data

    def unpack_ndmp_mover_connect_request_v3(self):
        data = types.ndmp_mover_connect_request_v3()
        data.mode = self.unpack_ndmp_mover_mode()
        data.addr = self.unpack_ndmp_addr_v3()
        if hasattr(self, 'filter_ndmp_mover_connect_request_v3'):
            data = getattr(self, 'filter_ndmp_mover_connect_request_v3')(data)
        return data

    def unpack_ndmp_mover_connect_reply_v3(self):
        data = types.ndmp_mover_connect_reply_v3()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_mover_connect_reply_v3'):
            data = getattr(self, 'filter_ndmp_mover_connect_reply_v3')(data)
        return data

    def unpack_ndmp_tcp_addr_v4(self):
        data = types.ndmp_tcp_addr_v4()
        data.ip_addr = self.unpack_u_long()
        data.port = self.unpack_u_short()
        data.addr_env = self.unpack_array(self.unpack_ndmp_pval)
        if hasattr(self, 'filter_ndmp_tcp_addr_v4'):
            data = getattr(self, 'filter_ndmp_tcp_addr_v4')(data)
        return data

    def unpack_ndmp_addr_v4(self):
        data = types.ndmp_addr_v4()
        data.addr_type = self.unpack_ndmp_addr_type()
        if data.addr_type == const.NDMP_ADDR_LOCAL:
            pass
        elif data.addr_type == const.NDMP_ADDR_TCP:
            data.tcp_addr = self.unpack_array(self.unpack_ndmp_tcp_addr_v4)
        elif data.addr_type == const.NDMP_ADDR_IPC:
            data.ipc_addr = self.unpack_ndmp_ipc_addr_v3()
        else:
            raise XDRError('bad switch=%s' % data).addr_type
        if hasattr(self, 'filter_ndmp_addr_v4'):
            data = getattr(self, 'filter_ndmp_addr_v4')(data)
        return data

    def unpack_ndmp_mover_connect_request_v4(self):
        data = types.ndmp_mover_connect_request_v4()
        data.mode = self.unpack_ndmp_mover_mode()
        data.addr = self.unpack_ndmp_addr_v4()
        if hasattr(self, 'filter_ndmp_mover_connect_request_v4'):
            data = getattr(self, 'filter_ndmp_mover_connect_request_v4')(data)
        return data

    def unpack_ndmp_mover_listen_reply_v4(self):
        data = types.ndmp_mover_listen_reply_v4()
        data.error = self.unpack_ndmp_error()
        data.connect_addr = self.unpack_ndmp_addr_v4()
        if hasattr(self, 'filter_ndmp_mover_listen_reply_v4'):
            data = getattr(self, 'filter_ndmp_mover_listen_reply_v4')(data)
        return data

    def unpack_ndmp_mover_get_state_reply_v4(self):
        data = types.ndmp_mover_get_state_reply_v4()
        data.error = self.unpack_ndmp_error()
        data.mode = self.unpack_ndmp_mover_mode()
        data.state = self.unpack_ndmp_mover_state()
        data.pause_reason = self.unpack_ndmp_mover_pause_reason()
        data.halt_reason = self.unpack_ndmp_mover_halt_reason()
        data.record_size = self.unpack_u_long()
        data.record_num = self.unpack_u_long()
        data.bytes_moved = self.unpack_ndmp_u_quad()
        data.seek_position = self.unpack_ndmp_u_quad()
        data.bytes_left_to_read = self.unpack_ndmp_u_quad()
        data.window_offset = self.unpack_ndmp_u_quad()
        data.window_length = self.unpack_ndmp_u_quad()
        data.data_connection_addr = self.unpack_ndmp_addr_v4()
        if hasattr(self, 'filter_ndmp_mover_get_state_reply_v4'):
            data = getattr(self, 'filter_ndmp_mover_get_state_reply_v4')(data)
        return data

    def unpack_ndmp_data_operation(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_DATA_OP_NOACTION, const.NDMP_DATA_OP_BACKUP, const.NDMP_DATA_OP_RECOVER, const.NDMP_DATA_OP_RECOVER_FILEHIST]:
            raise XDRError('value=%s not in enum ndmp_data_operation' % data)
        if hasattr(self, 'filter_ndmp_data_operation'):
            data = getattr(self, 'filter_ndmp_data_operation')(data)
        return data

    def unpack_ndmp_data_state(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_DATA_STATE_IDLE, const.NDMP_DATA_STATE_ACTIVE, const.NDMP_DATA_STATE_HALTED, const.NDMP_DATA_STATE_LISTEN, const.NDMP_DATA_STATE_CONNECTED]:
            raise XDRError('value=%s not in enum ndmp_data_state' % data)
        if hasattr(self, 'filter_ndmp_data_state'):
            data = getattr(self, 'filter_ndmp_data_state')(data)
        return data

    def unpack_ndmp_data_halt_reason(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_DATA_HALT_NA, const.NDMP_DATA_HALT_SUCCESSFUL, const.NDMP_DATA_HALT_ABORTED, const.NDMP_DATA_HALT_INTERNAL_ERROR, const.NDMP_DATA_HALT_CONNECT_ERROR]:
            raise XDRError('value=%s not in enum ndmp_data_halt_reason' % data)
        if hasattr(self, 'filter_ndmp_data_halt_reason'):
            data = getattr(self, 'filter_ndmp_data_halt_reason')(data)
        return data

    def unpack_ndmp_data_get_state_reply(self):
        data = types.ndmp_data_get_state_reply()
        data.error = self.unpack_ndmp_error()
        data.operation = self.unpack_ndmp_data_operation()
        data.state = self.unpack_ndmp_data_state()
        data.halt_reason = self.unpack_ndmp_data_halt_reason()
        data.bytes_processed = self.unpack_ndmp_u_quad()
        data.est_bytes_remain = self.unpack_ndmp_u_quad()
        data.est_time_remain = self.unpack_u_long()
        data.mover = self.unpack_ndmp_mover_addr()
        data.read_offset = self.unpack_ndmp_u_quad()
        data.read_length = self.unpack_ndmp_u_quad()
        if hasattr(self, 'filter_ndmp_data_get_state_reply'):
            data = getattr(self, 'filter_ndmp_data_get_state_reply')(data)
        return data

    def unpack_ndmp_data_start_backup_request(self):
        data = types.ndmp_data_start_backup_request()
        data.mover = self.unpack_ndmp_mover_addr()
        data.bu_type = self.unpack_string()
        data.env = self.unpack_array(self.unpack_ndmp_pval)
        if hasattr(self, 'filter_ndmp_data_start_backup_request'):
            data = getattr(self, 'filter_ndmp_data_start_backup_request')(data)
        return data

    def unpack_ndmp_data_start_backup_reply(self):
        data = types.ndmp_data_start_backup_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_data_start_backup_reply'):
            data = getattr(self, 'filter_ndmp_data_start_backup_reply')(data)
        return data

    def unpack_ndmp_name(self):
        data = types.ndmp_name()
        data.name = self.unpack_string()
        data.dest = self.unpack_string()
        data.ssid = self.unpack_u_short()
        data.fh_info = self.unpack_ndmp_u_quad()
        if hasattr(self, 'filter_ndmp_name'):
            data = getattr(self, 'filter_ndmp_name')(data)
        return data

    def unpack_ndmp_data_start_recover_request(self):
        data = types.ndmp_data_start_recover_request()
        data.mover = self.unpack_ndmp_mover_addr()
        data.env = self.unpack_array(self.unpack_ndmp_pval)
        data.nlist = self.unpack_array(self.unpack_ndmp_name)
        data.bu_type = self.unpack_string()
        if hasattr(self, 'filter_ndmp_data_start_recover_request'):
            data = getattr(self, 'filter_ndmp_data_start_recover_request')(data)
        return data

    def unpack_ndmp_data_start_recover_reply(self):
        data = types.ndmp_data_start_recover_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_data_start_recover_reply'):
            data = getattr(self, 'filter_ndmp_data_start_recover_reply')(data)
        return data

    def unpack_ndmp_data_abort_reply(self):
        data = types.ndmp_data_abort_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_data_abort_reply'):
            data = getattr(self, 'filter_ndmp_data_abort_reply')(data)
        return data

    def unpack_ndmp_data_stop_reply(self):
        data = types.ndmp_data_stop_reply()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_data_stop_reply'):
            data = getattr(self, 'filter_ndmp_data_stop_reply')(data)
        return data

    def unpack_ndmp_data_get_env_reply(self):
        data = types.ndmp_data_get_env_reply()
        data.error = self.unpack_ndmp_error()
        data.env = self.unpack_array(self.unpack_ndmp_pval)
        if hasattr(self, 'filter_ndmp_data_get_env_reply'):
            data = getattr(self, 'filter_ndmp_data_get_env_reply')(data)
        return data

    def unpack_ndmp_notify_data_halted_request(self):
        data = types.ndmp_notify_data_halted_request()
        data.reason = self.unpack_ndmp_data_halt_reason()
        data.text_reason = self.unpack_string()
        if hasattr(self, 'filter_ndmp_notify_data_halted_request'):
            data = getattr(self, 'filter_ndmp_notify_data_halted_request')(data)
        return data

    def unpack_ndmp_data_get_state_reply_v3(self):
        data = types.ndmp_data_get_state_reply_v3()
        data.invalid = self.unpack_u_long()
        data.error = self.unpack_ndmp_error()
        data.operation = self.unpack_ndmp_data_operation()
        data.state = self.unpack_ndmp_data_state()
        data.halt_reason = self.unpack_ndmp_data_halt_reason()
        data.bytes_processed = self.unpack_ndmp_u_quad()
        data.est_bytes_remain = self.unpack_ndmp_u_quad()
        data.est_time_remain = self.unpack_u_long()
        data.data_connection_addr = self.unpack_ndmp_addr_v3()
        data.read_offset = self.unpack_ndmp_u_quad()
        data.read_length = self.unpack_ndmp_u_quad()
        if hasattr(self, 'filter_ndmp_data_get_state_reply_v3'):
            data = getattr(self, 'filter_ndmp_data_get_state_reply_v3')(data)
        return data

    def unpack_ndmp_data_start_backup_request_v3(self):
        data = types.ndmp_data_start_backup_request_v3()
        data.bu_type = self.unpack_string()
        data.env = self.unpack_array(self.unpack_ndmp_pval)
        if hasattr(self, 'filter_ndmp_data_start_backup_request_v3'):
            data = getattr(self, 'filter_ndmp_data_start_backup_request_v3')(data)
        return data

    def unpack_ndmp_name_v3(self):
        data = types.ndmp_name_v3()
        data.original_path = self.unpack_string()
        data.destination_dir = self.unpack_string()
        data.new_name = self.unpack_string()
        data.other_name = self.unpack_string()
        data.node = self.unpack_ndmp_u_quad()
        data.fh_info = self.unpack_ndmp_u_quad()
        if hasattr(self, 'filter_ndmp_name_v3'):
            data = getattr(self, 'filter_ndmp_name_v3')(data)
        return data

    def unpack_ndmp_data_start_recover_request_v3(self):
        data = types.ndmp_data_start_recover_request_v3()
        data.env = self.unpack_array(self.unpack_ndmp_pval)
        data.nlist = self.unpack_array(self.unpack_ndmp_name_v3)
        data.bu_type = self.unpack_string()
        if hasattr(self, 'filter_ndmp_data_start_recover_request_v3'):
            data = getattr(self, 'filter_ndmp_data_start_recover_request_v3')(data)
        return data

    def unpack_ndmp_data_listen_request_v3(self):
        data = types.ndmp_data_listen_request_v3()
        data.addr_type = self.unpack_ndmp_addr_type()
        if hasattr(self, 'filter_ndmp_data_listen_request_v3'):
            data = getattr(self, 'filter_ndmp_data_listen_request_v3')(data)
        return data

    def unpack_ndmp_data_listen_reply_v3(self):
        data = types.ndmp_data_listen_reply_v3()
        data.error = self.unpack_ndmp_error()
        data.data_connection_addr = self.unpack_ndmp_addr_v3()
        if hasattr(self, 'filter_ndmp_data_listen_reply_v3'):
            data = getattr(self, 'filter_ndmp_data_listen_reply_v3')(data)
        return data

    def unpack_ndmp_data_connect_request_v3(self):
        data = types.ndmp_data_connect_request_v3()
        data.addr = self.unpack_ndmp_addr_v3()
        if hasattr(self, 'filter_ndmp_data_connect_request_v3'):
            data = getattr(self, 'filter_ndmp_data_connect_request_v3')(data)
        return data

    def unpack_ndmp_data_connect_reply_v3(self):
        data = types.ndmp_data_connect_reply_v3()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_data_connect_reply_v3'):
            data = getattr(self, 'filter_ndmp_data_connect_reply_v3')(data)
        return data

    def unpack_ndmp_data_get_state_reply_v4(self):
        data = types.ndmp_data_get_state_reply_v4()
        data.unsupported = self.unpack_u_long()
        data.error = self.unpack_ndmp_error()
        data.operation = self.unpack_ndmp_data_operation()
        data.state = self.unpack_ndmp_data_state()
        data.halt_reason = self.unpack_ndmp_data_halt_reason()
        data.bytes_processed = self.unpack_ndmp_u_quad()
        data.est_bytes_remain = self.unpack_ndmp_u_quad()
        data.est_time_remain = self.unpack_u_long()
        data.data_connection_addr = self.unpack_ndmp_addr_v4()
        data.read_offset = self.unpack_ndmp_u_quad()
        data.read_length = self.unpack_ndmp_u_quad()
        if hasattr(self, 'filter_ndmp_data_get_state_reply_v4'):
            data = getattr(self, 'filter_ndmp_data_get_state_reply_v4')(data)
        return data

    def unpack_ndmp_data_listen_reply_v4(self):
        data = types.ndmp_data_listen_reply_v4()
        data.error = self.unpack_ndmp_error()
        data.connect_addr = self.unpack_ndmp_addr_v4()
        if hasattr(self, 'filter_ndmp_data_listen_reply_v4'):
            data = getattr(self, 'filter_ndmp_data_listen_reply_v4')(data)
        return data

    def unpack_ndmp_data_connect_request_v4(self):
        data = types.ndmp_data_connect_request_v4()
        data.addr = self.unpack_ndmp_addr_v4()
        if hasattr(self, 'filter_ndmp_data_connect_request_v4'):
            data = getattr(self, 'filter_ndmp_data_connect_request_v4')(data)
        return data

    def unpack_ndmp_connect_reason(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_CONNECTED, const.NDMP_SHUTDOWN, const.NDMP_REFUSED]:
            raise XDRError('value=%s not in enum ndmp_connect_reason' % data)
        if hasattr(self, 'filter_ndmp_connect_reason'):
            data = getattr(self, 'filter_ndmp_connect_reason')(data)
        return data

    def unpack_ndmp_notify_connected_request(self):
        data = types.ndmp_notify_connected_request()
        data.reason = self.unpack_ndmp_connect_reason()
        data.protocol_version = self.unpack_u_short()
        data.text_reason = self.unpack_string()
        if hasattr(self, 'filter_ndmp_notify_connected_request'):
            data = getattr(self, 'filter_ndmp_notify_connected_request')(data)
        return data

    def unpack_ndmp_notify_mover_paused_request(self):
        data = types.ndmp_notify_mover_paused_request()
        data.reason = self.unpack_ndmp_mover_pause_reason()
        data.seek_position = self.unpack_ndmp_u_quad()
        if hasattr(self, 'filter_ndmp_notify_mover_paused_request'):
            data = getattr(self, 'filter_ndmp_notify_mover_paused_request')(data)
        return data

    def unpack_ndmp_notify_mover_halted_request(self):
        data = types.ndmp_notify_mover_halted_request()
        data.reason = self.unpack_ndmp_mover_halt_reason()
        data.text_reason = self.unpack_string()
        if hasattr(self, 'filter_ndmp_notify_mover_halted_request'):
            data = getattr(self, 'filter_ndmp_notify_mover_halted_request')(data)
        return data

    def unpack_ndmp_notify_data_read_request(self):
        data = types.ndmp_notify_data_read_request()
        data.offset = self.unpack_ndmp_u_quad()
        data.length = self.unpack_ndmp_u_quad()
        if hasattr(self, 'filter_ndmp_notify_data_read_request'):
            data = getattr(self, 'filter_ndmp_notify_data_read_request')(data)
        return data

    def unpack_ndmp_notify_data_halted_request_v4(self):
        data = types.ndmp_notify_data_halted_request_v4()
        data.reason = self.unpack_ndmp_data_halt_reason()
        if hasattr(self, 'filter_ndmp_notify_data_halted_request_v4'):
            data = getattr(self, 'filter_ndmp_notify_data_halted_request_v4')(data)
        return data

    def unpack_ndmp_notify_mover_halted_request_v4(self):
        data = types.ndmp_notify_mover_halted_request_v4()
        data.reason = self.unpack_ndmp_mover_halt_reason()
        if hasattr(self, 'filter_ndmp_notify_mover_halted_request_v4'):
            data = getattr(self, 'filter_ndmp_notify_mover_halted_request_v4')(data)
        return data

    def unpack_ndmp_log_log_request(self):
        data = types.ndmp_log_log_request()
        data.entry = self.unpack_string()
        if hasattr(self, 'filter_ndmp_log_log_request'):
            data = getattr(self, 'filter_ndmp_log_log_request')(data)
        return data

    def unpack_ndmp_debug_level(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_DBG_USER_INFO, const.NDMP_DBG_USER_SUMMARY, const.NDMP_DBG_USER_DETAIL, const.NDMP_DBG_DIAG_INFO, const.NDMP_DBG_DIAG_SUMMARY, const.NDMP_DBG_DIAG_DETAIL, const.NDMP_DBG_PROG_INFO, const.NDMP_DBG_PROG_SUMMARY, const.NDMP_DBG_PROG_DETAIL]:
            raise XDRError('value=%s not in enum ndmp_debug_level' % data)
        if hasattr(self, 'filter_ndmp_debug_level'):
            data = getattr(self, 'filter_ndmp_debug_level')(data)
        return data

    def unpack_ndmp_log_debug_request(self):
        data = types.ndmp_log_debug_request()
        data.level = self.unpack_ndmp_debug_level()
        data.message = self.unpack_string()
        if hasattr(self, 'filter_ndmp_log_debug_request'):
            data = getattr(self, 'filter_ndmp_log_debug_request')(data)
        return data

    def unpack_ndmp_log_file_request(self):
        data = types.ndmp_log_file_request()
        data.name = self.unpack_string()
        data.ssid = self.unpack_u_short()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_log_file_request'):
            data = getattr(self, 'filter_ndmp_log_file_request')(data)
        return data

    def unpack_ndmp_log_type(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_LOG_NORMAL, const.NDMP_LOG_DEBUG, const.NDMP_LOG_ERROR, const.NDMP_LOG_WARNING]:
            raise XDRError('value=%s not in enum ndmp_log_type' % data)
        if hasattr(self, 'filter_ndmp_log_type'):
            data = getattr(self, 'filter_ndmp_log_type')(data)
        return data

    def unpack_ndmp_log_message_request_v3(self):
        data = types.ndmp_log_message_request_v3()
        data.log_type = self.unpack_ndmp_log_type()
        data.message_id = self.unpack_u_long()
        data.entry = self.unpack_string()
        if hasattr(self, 'filter_ndmp_log_message_request_v3'):
            data = getattr(self, 'filter_ndmp_log_message_request_v3')(data)
        return data

    def unpack_ndmp_log_file_request_v3(self):
        data = types.ndmp_log_file_request_v3()
        data.name = self.unpack_string()
        data.error = self.unpack_ndmp_error()
        if hasattr(self, 'filter_ndmp_log_file_request_v3'):
            data = getattr(self, 'filter_ndmp_log_file_request_v3')(data)
        return data

    def unpack_ndmp_has_associated_message(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_NO_ASSOCIATED_MESSAGE, const.NDMP_HAS_ASSOCIATED_MESSAGE]:
            raise XDRError('value=%s not in enum ndmp_has_associated_message' % data)
        if hasattr(self, 'filter_ndmp_has_associated_message'):
            data = getattr(self, 'filter_ndmp_has_associated_message')(data)
        return data

    def unpack_ndmp_recovery_status(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_RECOVERY_SUCCESSFUL, const.NDMP_RECOVERY_FAILED_PERMISSION, const.NDMP_RECOVERY_FAILED_NOT_FOUND, const.NDMP_RECOVERY_FAILED_NO_DIRECTORY, const.NDMP_RECOVERY_FAILED_OUT_OF_MEMORY, const.NDMP_RECOVERY_FAILED_IO_ERROR, const.NDMP_RECOVERY_FAILED_UNDEFINED_ERROR, const.NDMP_RECOVERY_FAILED_FILE_PATH_EXISTS]:
            raise XDRError('value=%s not in enum ndmp_recovery_status' % data)
        if hasattr(self, 'filter_ndmp_recovery_status'):
            data = getattr(self, 'filter_ndmp_recovery_status')(data)
        return data

    def unpack_ndmp_log_message_request_v4(self):
        data = types.ndmp_log_message_request_v4()
        data.log_type = self.unpack_ndmp_log_type()
        data.message_id = self.unpack_u_long()
        data.entry = self.unpack_string()
        data.associated_message_valid = self.unpack_ndmp_has_associated_message()
        data.associated_message_sequence = self.unpack_u_long()
        if hasattr(self, 'filter_ndmp_log_message_request_v4'):
            data = getattr(self, 'filter_ndmp_log_message_request_v4')(data)
        return data

    def unpack_ndmp_log_file_request_v4(self):
        data = types.ndmp_log_file_request_v4()
        data.name = self.unpack_string()
        data.recovery_status = self.unpack_ndmp_recovery_status()
        if hasattr(self, 'filter_ndmp_log_file_request_v4'):
            data = getattr(self, 'filter_ndmp_log_file_request_v4')(data)
        return data

    def unpack_ndmp_unix_path(self):
        data = self.unpack_string()
        if hasattr(self, 'filter_ndmp_unix_path'):
            data = getattr(self, 'filter_ndmp_unix_path')(data)
        return data

    def unpack_ndmp_file_type(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_FILE_DIR, const.NDMP_FILE_FIFO, const.NDMP_FILE_CSPEC, const.NDMP_FILE_BSPEC, const.NDMP_FILE_REG, const.NDMP_FILE_SLINK, const.NDMP_FILE_SOCK, const.NDMP_FILE_REGISTRY, const.NDMP_FILE_OTHER]:
            raise XDRError('value=%s not in enum ndmp_file_type' % data)
        if hasattr(self, 'filter_ndmp_file_type'):
            data = getattr(self, 'filter_ndmp_file_type')(data)
        return data

    def unpack_ndmp_unix_file_stat(self):
        data = types.ndmp_unix_file_stat()
        data.ftype = self.unpack_ndmp_file_type()
        data.mtime = self.unpack_u_long()
        data.atime = self.unpack_u_long()
        data.ctime = self.unpack_u_long()
        data.uid = self.unpack_u_long()
        data.gid = self.unpack_u_long()
        data.mode = self.unpack_u_long()
        data.size = self.unpack_ndmp_u_quad()
        data.fh_info = self.unpack_ndmp_u_quad()
        if hasattr(self, 'filter_ndmp_unix_file_stat'):
            data = getattr(self, 'filter_ndmp_unix_file_stat')(data)
        return data

    def unpack_ndmp_fh_unix_path(self):
        data = types.ndmp_fh_unix_path()
        data.name = self.unpack_ndmp_unix_path()
        data.fstat = self.unpack_ndmp_unix_file_stat()
        if hasattr(self, 'filter_ndmp_fh_unix_path'):
            data = getattr(self, 'filter_ndmp_fh_unix_path')(data)
        return data

    def unpack_ndmp_fh_add_unix_path_request(self):
        data = types.ndmp_fh_add_unix_path_request()
        data.paths = self.unpack_array(self.unpack_ndmp_fh_unix_path)
        if hasattr(self, 'filter_ndmp_fh_add_unix_path_request'):
            data = getattr(self, 'filter_ndmp_fh_add_unix_path_request')(data)
        return data

    def unpack_ndmp_fh_unix_dir(self):
        data = types.ndmp_fh_unix_dir()
        data.name = self.unpack_ndmp_unix_path()
        data.node = self.unpack_u_long()
        data.parent = self.unpack_u_long()
        if hasattr(self, 'filter_ndmp_fh_unix_dir'):
            data = getattr(self, 'filter_ndmp_fh_unix_dir')(data)
        return data

    def unpack_ndmp_fh_add_unix_dir_request(self):
        data = types.ndmp_fh_add_unix_dir_request()
        data.dirs = self.unpack_array(self.unpack_ndmp_fh_unix_dir)
        if hasattr(self, 'filter_ndmp_fh_add_unix_dir_request'):
            data = getattr(self, 'filter_ndmp_fh_add_unix_dir_request')(data)
        return data

    def unpack_ndmp_fh_unix_node(self):
        data = types.ndmp_fh_unix_node()
        data.fstat = self.unpack_ndmp_unix_file_stat()
        data.node = self.unpack_u_long()
        if hasattr(self, 'filter_ndmp_fh_unix_node'):
            data = getattr(self, 'filter_ndmp_fh_unix_node')(data)
        return data

    def unpack_ndmp_fh_add_unix_node_request(self):
        data = types.ndmp_fh_add_unix_node_request()
        data.nodes = self.unpack_array(self.unpack_ndmp_fh_unix_node)
        if hasattr(self, 'filter_ndmp_fh_add_unix_node_request'):
            data = getattr(self, 'filter_ndmp_fh_add_unix_node_request')(data)
        return data

    def unpack_ndmp_fs_type(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.NDMP_FS_UNIX, const.NDMP_FS_NT, const.NDMP_FS_OTHER]:
            raise XDRError('value=%s not in enum ndmp_fs_type' % data)
        if hasattr(self, 'filter_ndmp_fs_type'):
            data = getattr(self, 'filter_ndmp_fs_type')(data)
        return data

    def unpack_ndmp_path_v3(self):
        data = self.unpack_string()
        if hasattr(self, 'filter_ndmp_path_v3'):
            data = getattr(self, 'filter_ndmp_path_v3')(data)
        return data

    def unpack_ndmp_nt_path_v3(self):
        data = types.ndmp_nt_path_v3()
        data.nt_path = self.unpack_ndmp_path_v3()
        data.dos_path = self.unpack_ndmp_path_v3()
        if hasattr(self, 'filter_ndmp_nt_path_v3'):
            data = getattr(self, 'filter_ndmp_nt_path_v3')(data)
        return data

    def unpack_ndmp_file_name_v3(self):
        data = types.ndmp_file_name_v3()
        data.fs_type = self.unpack_ndmp_fs_type()
        if data.fs_type == const.NDMP_FS_UNIX:
            data.unix_name = self.unpack_ndmp_path_v3()
        elif data.fs_type == const.NDMP_FS_NT:
            data.nt_name = self.unpack_ndmp_nt_path_v3()
        else:
            data.other_name = self.unpack_ndmp_path_v3()
        if hasattr(self, 'filter_ndmp_file_name_v3'):
            data = getattr(self, 'filter_ndmp_file_name_v3')(data)
        return data

    def unpack_ndmp_file_stat_v3(self):
        data = types.ndmp_file_stat_v3()
        data.invalid = self.unpack_u_long()
        data.fs_type = self.unpack_ndmp_fs_type()
        data.ftype = self.unpack_ndmp_file_type()
        data.mtime = self.unpack_u_long()
        data.atime = self.unpack_u_long()
        data.ctime = self.unpack_u_long()
        data.owner = self.unpack_u_long()
        data.group = self.unpack_u_long()
        data.fattr = self.unpack_u_long()
        data.size = self.unpack_ndmp_u_quad()
        data.links = self.unpack_u_long()
        if hasattr(self, 'filter_ndmp_file_stat_v3'):
            data = getattr(self, 'filter_ndmp_file_stat_v3')(data)
        return data

    def unpack_ndmp_file_v3(self):
        data = types.ndmp_file_v3()
        data.names = self.unpack_array(self.unpack_ndmp_file_name_v3)
        data.stats = self.unpack_array(self.unpack_ndmp_file_stat_v3)
        data.node = self.unpack_ndmp_u_quad()
        data.fh_info = self.unpack_ndmp_u_quad()
        if hasattr(self, 'filter_ndmp_file_v3'):
            data = getattr(self, 'filter_ndmp_file_v3')(data)
        return data

    def unpack_ndmp_fh_add_file_request_v3(self):
        data = types.ndmp_fh_add_file_request_v3()
        data.files = self.unpack_array(self.unpack_ndmp_file_v3)
        if hasattr(self, 'filter_ndmp_fh_add_file_request_v3'):
            data = getattr(self, 'filter_ndmp_fh_add_file_request_v3')(data)
        return data

    def unpack_ndmp_dir_v3(self):
        data = types.ndmp_dir_v3()
        data.names = self.unpack_array(self.unpack_ndmp_file_name_v3)
        data.node = self.unpack_ndmp_u_quad()
        data.parent = self.unpack_ndmp_u_quad()
        if hasattr(self, 'filter_ndmp_dir_v3'):
            data = getattr(self, 'filter_ndmp_dir_v3')(data)
        return data

    def unpack_ndmp_fh_add_dir_request_v3(self):
        data = types.ndmp_fh_add_dir_request_v3()
        data.dirs = self.unpack_array(self.unpack_ndmp_dir_v3)
        if hasattr(self, 'filter_ndmp_fh_add_dir_request_v3'):
            data = getattr(self, 'filter_ndmp_fh_add_dir_request_v3')(data)
        return data

    def unpack_ndmp_node_v3(self):
        data = types.ndmp_node_v3()
        data.stats = self.unpack_array(self.unpack_ndmp_file_stat_v3)
        data.node = self.unpack_ndmp_u_quad()
        data.fh_info = self.unpack_ndmp_u_quad()
        if hasattr(self, 'filter_ndmp_node_v3'):
            data = getattr(self, 'filter_ndmp_node_v3')(data)
        return data

    def unpack_ndmp_fh_add_node_request_v3(self):
        data = types.ndmp_fh_add_node_request_v3()
        data.nodes = self.unpack_array(self.unpack_ndmp_node_v3)
        if hasattr(self, 'filter_ndmp_fh_add_node_request_v3'):
            data = getattr(self, 'filter_ndmp_fh_add_node_request_v3')(data)
        return data

    unpack_ndmp_auth_text_v2 = unpack_ndmp_auth_text

    unpack_ndmp_auth_text_v4 = unpack_ndmp_auth_text_v3

    unpack_ndmp_auth_md5_v2 = unpack_ndmp_auth_md5

    unpack_ndmp_auth_md5_v4 = unpack_ndmp_auth_md5_v3

    unpack_ndmp_auth_data_v2 = unpack_ndmp_auth_data

    unpack_ndmp_auth_data_v4 = unpack_ndmp_auth_data_v3

    unpack_ndmp_connect_open_request_v2 = unpack_ndmp_connect_open_request

    unpack_ndmp_connect_open_request_v3 = unpack_ndmp_connect_open_request

    unpack_ndmp_connect_open_request_v4 = unpack_ndmp_connect_open_request

    unpack_ndmp_connect_open_reply_v2 = unpack_ndmp_connect_open_reply

    unpack_ndmp_connect_open_reply_v3 = unpack_ndmp_connect_open_reply

    unpack_ndmp_connect_open_reply_v4 = unpack_ndmp_connect_open_reply

    unpack_ndmp_connect_client_auth_request_v2 = unpack_ndmp_connect_client_auth_request

    unpack_ndmp_connect_client_auth_request_v4 = unpack_ndmp_connect_client_auth_request_v3

    unpack_ndmp_connect_client_auth_reply_v2 = unpack_ndmp_connect_client_auth_reply

    unpack_ndmp_connect_client_auth_reply_v4 = unpack_ndmp_connect_client_auth_reply_v3

    unpack_ndmp_connect_server_auth_request_v2 = unpack_ndmp_connect_server_auth_request

    unpack_ndmp_connect_server_auth_request_v3 = unpack_ndmp_connect_server_auth_request

    unpack_ndmp_connect_server_auth_request_v4 = unpack_ndmp_connect_server_auth_request

    unpack_ndmp_connect_server_auth_reply_v2 = unpack_ndmp_connect_server_auth_reply

    unpack_ndmp_connect_server_auth_reply_v3 = unpack_ndmp_connect_server_auth_reply

    unpack_ndmp_connect_server_auth_reply_v4 = unpack_ndmp_connect_server_auth_reply

    unpack_ndmp_config_get_host_info_reply_v2 = unpack_ndmp_config_get_host_info_reply

    unpack_ndmp_config_get_host_info_reply_v4 = unpack_ndmp_config_get_host_info_reply_v3

    unpack_ndmp_config_get_butype_attr_request_v2 = unpack_ndmp_config_get_butype_attr_request

    unpack_ndmp_config_get_butype_attr_reply_v2 = unpack_ndmp_config_get_butype_attr_reply

    unpack_ndmp_config_get_mover_type_reply_v2 = unpack_ndmp_config_get_mover_type_reply

    unpack_ndmp_config_get_auth_attr_request_v2 = unpack_ndmp_config_get_auth_attr_request

    unpack_ndmp_config_get_auth_attr_request_v3 = unpack_ndmp_config_get_auth_attr_request

    unpack_ndmp_config_get_auth_attr_request_v4 = unpack_ndmp_config_get_auth_attr_request

    unpack_ndmp_config_get_auth_attr_reply_v2 = unpack_ndmp_config_get_auth_attr_reply

    unpack_ndmp_config_get_auth_attr_reply_v3 = unpack_ndmp_config_get_auth_attr_reply

    unpack_ndmp_config_get_auth_attr_reply_v4 = unpack_ndmp_config_get_auth_attr_reply

    unpack_ndmp_config_get_connection_type_reply_v4 = unpack_ndmp_config_get_connection_type_reply_v3

    unpack_ndmp_config_get_server_info_reply_v4 = unpack_ndmp_config_get_server_info_reply_v3

    unpack_ndmp_fs_info_v4 = unpack_ndmp_fs_info_v3

    unpack_ndmp_config_get_fs_info_reply_v4 = unpack_ndmp_config_get_fs_info_reply_v3

    unpack_ndmp_device_info_v4 = unpack_ndmp_device_info_v3

    unpack_ndmp_config_get_tape_info_reply_v4 = unpack_ndmp_config_get_tape_info_reply_v3

    unpack_ndmp_config_get_scsi_info_reply_v4 = unpack_ndmp_config_get_scsi_info_reply_v3

    unpack_ndmp_config_get_ext_list_reply_v4 = unpack_ndmp_config_get_ext_list_reply

    unpack_ndmp_config_set_ext_list_request_v4 = unpack_ndmp_config_set_ext_list_request

    unpack_ndmp_config_set_ext_list_reply_v4 = unpack_ndmp_config_set_ext_list_reply

    unpack_ndmp_scsi_open_request_v2 = unpack_ndmp_scsi_open_request

    unpack_ndmp_scsi_open_request_v4 = unpack_ndmp_scsi_open_request_v3

    unpack_ndmp_scsi_open_reply_v2 = unpack_ndmp_scsi_open_reply

    unpack_ndmp_scsi_open_reply_v3 = unpack_ndmp_scsi_open_reply

    unpack_ndmp_scsi_open_reply_v4 = unpack_ndmp_scsi_open_reply

    unpack_ndmp_scsi_close_reply_v2 = unpack_ndmp_scsi_close_reply

    unpack_ndmp_scsi_close_reply_v3 = unpack_ndmp_scsi_close_reply

    unpack_ndmp_scsi_close_reply_v4 = unpack_ndmp_scsi_close_reply

    unpack_ndmp_scsi_get_state_reply_v2 = unpack_ndmp_scsi_get_state_reply

    unpack_ndmp_scsi_get_state_reply_v3 = unpack_ndmp_scsi_get_state_reply

    unpack_ndmp_scsi_get_state_reply_v4 = unpack_ndmp_scsi_get_state_reply

    unpack_ndmp_scsi_set_target_request_v2 = unpack_ndmp_scsi_set_target_request

    unpack_ndmp_scsi_set_target_reply_v2 = unpack_ndmp_scsi_set_target_reply

    unpack_ndmp_scsi_set_target_reply_v3 = unpack_ndmp_scsi_set_target_reply

    unpack_ndmp_scsi_reset_device_reply_v2 = unpack_ndmp_scsi_reset_device_reply

    unpack_ndmp_scsi_reset_device_reply_v3 = unpack_ndmp_scsi_reset_device_reply

    unpack_ndmp_scsi_reset_device_reply_v4 = unpack_ndmp_scsi_reset_device_reply

    unpack_ndmp_scsi_reset_bus_reply_v2 = unpack_ndmp_scsi_reset_bus_reply

    unpack_ndmp_scsi_reset_bus_reply_v3 = unpack_ndmp_scsi_reset_bus_reply

    unpack_ndmp_scsi_execute_cdb_request_v2 = unpack_ndmp_execute_cdb_request

    unpack_ndmp_scsi_execute_cdb_request_v3 = unpack_ndmp_execute_cdb_request

    unpack_ndmp_scsi_execute_cdb_request_v4 = unpack_ndmp_execute_cdb_request

    unpack_ndmp_scsi_execute_cdb_reply_v2 = unpack_ndmp_execute_cdb_reply

    unpack_ndmp_scsi_execute_cdb_reply_v3 = unpack_ndmp_execute_cdb_reply

    unpack_ndmp_scsi_execute_cdb_reply_v4 = unpack_ndmp_execute_cdb_reply

    unpack_ndmp_tape_open_request_v2 = unpack_ndmp_tape_open_request

    unpack_ndmp_tape_open_request_v4 = unpack_ndmp_tape_open_request_v3

    unpack_ndmp_tape_open_reply_v2 = unpack_ndmp_tape_open_reply

    unpack_ndmp_tape_open_reply_v3 = unpack_ndmp_tape_open_reply

    unpack_ndmp_tape_open_reply_v4 = unpack_ndmp_tape_open_reply

    unpack_ndmp_tape_close_reply_v2 = unpack_ndmp_tape_close_reply

    unpack_ndmp_tape_close_reply_v3 = unpack_ndmp_tape_close_reply

    unpack_ndmp_tape_close_reply_v4 = unpack_ndmp_tape_close_reply

    unpack_ndmp_tape_get_state_reply_v2 = unpack_ndmp_tape_get_state_reply

    unpack_ndmp_tape_mtio_request_v2 = unpack_ndmp_tape_mtio_request

    unpack_ndmp_tape_mtio_request_v3 = unpack_ndmp_tape_mtio_request

    unpack_ndmp_tape_mtio_request_v4 = unpack_ndmp_tape_mtio_request

    unpack_ndmp_tape_mtio_reply_v2 = unpack_ndmp_tape_mtio_reply

    unpack_ndmp_tape_mtio_reply_v3 = unpack_ndmp_tape_mtio_reply

    unpack_ndmp_tape_mtio_reply_v4 = unpack_ndmp_tape_mtio_reply

    unpack_ndmp_tape_write_request_v2 = unpack_ndmp_tape_write_request

    unpack_ndmp_tape_write_request_v3 = unpack_ndmp_tape_write_request

    unpack_ndmp_tape_write_request_v4 = unpack_ndmp_tape_write_request

    unpack_ndmp_tape_write_reply_v2 = unpack_ndmp_tape_write_reply

    unpack_ndmp_tape_write_reply_v3 = unpack_ndmp_tape_write_reply

    unpack_ndmp_tape_write_reply_v4 = unpack_ndmp_tape_write_reply

    unpack_ndmp_tape_read_request_v2 = unpack_ndmp_tape_read_request

    unpack_ndmp_tape_read_request_v3 = unpack_ndmp_tape_read_request

    unpack_ndmp_tape_read_request_v4 = unpack_ndmp_tape_read_request

    unpack_ndmp_tape_read_reply_v2 = unpack_ndmp_tape_read_reply

    unpack_ndmp_tape_read_reply_v3 = unpack_ndmp_tape_read_reply

    unpack_ndmp_tape_read_reply_v4 = unpack_ndmp_tape_read_reply

    unpack_ndmp_tape_execute_cdb_request_v2 = unpack_ndmp_tape_execute_cdb_request

    unpack_ndmp_tape_execute_cdb_request_v3 = unpack_ndmp_tape_execute_cdb_request

    unpack_ndmp_tape_execute_cdb_request_v4 = unpack_ndmp_tape_execute_cdb_request

    unpack_ndmp_tape_execute_cdb_reply_v2 = unpack_ndmp_tape_execute_cdb_reply

    unpack_ndmp_tape_execute_cdb_reply_v3 = unpack_ndmp_tape_execute_cdb_reply

    unpack_ndmp_tape_execute_cdb_reply_v4 = unpack_ndmp_tape_execute_cdb_reply

    unpack_ndmp_fc_addr = unpack_ndmp_fc_addr_v3

    unpack_ndmp_ipc_addr = unpack_ndmp_ipc_addr_v3

    unpack_ndmp_mover_get_state_reply_v2 = unpack_ndmp_mover_get_state_reply

    unpack_ndmp_mover_listen_request_v2 = unpack_ndmp_mover_listen_request

    unpack_ndmp_mover_listen_request_v3 = unpack_ndmp_mover_listen_request

    unpack_ndmp_mover_listen_request_v4 = unpack_ndmp_mover_listen_request

    unpack_ndmp_mover_listen_reply_v2 = unpack_ndmp_mover_listen_reply

    unpack_ndmp_mover_set_record_size_request_v2 = unpack_ndmp_mover_set_record_size_request

    unpack_ndmp_mover_set_record_size_request_v3 = unpack_ndmp_mover_set_record_size_request

    unpack_ndmp_mover_set_record_size_request_v4 = unpack_ndmp_mover_set_record_size_request

    unpack_ndmp_mover_set_record_size_reply_v2 = unpack_ndmp_mover_set_record_size_reply

    unpack_ndmp_mover_set_record_size_reply_v3 = unpack_ndmp_mover_set_record_size_reply

    unpack_ndmp_mover_set_record_size_reply_v4 = unpack_ndmp_mover_set_record_size_reply

    unpack_ndmp_mover_set_window_request_v2 = unpack_ndmp_mover_set_window_request

    unpack_ndmp_mover_set_window_request_v3 = unpack_ndmp_mover_set_window_request

    unpack_ndmp_mover_set_window_request_v4 = unpack_ndmp_mover_set_window_request

    unpack_ndmp_mover_set_window_reply_v2 = unpack_ndmp_mover_set_window_reply

    unpack_ndmp_mover_set_window_reply_v3 = unpack_ndmp_mover_set_window_reply

    unpack_ndmp_mover_set_window_reply_v4 = unpack_ndmp_mover_set_window_reply

    unpack_ndmp_mover_continue_reply_v2 = unpack_ndmp_mover_continue_reply

    unpack_ndmp_mover_continue_reply_v3 = unpack_ndmp_mover_continue_reply

    unpack_ndmp_mover_continue_reply_v4 = unpack_ndmp_mover_continue_reply

    unpack_ndmp_mover_abort_reply_v2 = unpack_ndmp_mover_abort_reply

    unpack_ndmp_mover_abort_reply_v3 = unpack_ndmp_mover_abort_reply

    unpack_ndmp_mover_abort_reply_v4 = unpack_ndmp_mover_abort_reply

    unpack_ndmp_mover_stop_reply_v2 = unpack_ndmp_mover_stop_reply

    unpack_ndmp_mover_stop_reply_v3 = unpack_ndmp_mover_stop_reply

    unpack_ndmp_mover_stop_reply_v4 = unpack_ndmp_mover_stop_reply

    unpack_ndmp_mover_read_request_v2 = unpack_ndmp_mover_read_request

    unpack_ndmp_mover_read_request_v3 = unpack_ndmp_mover_read_request

    unpack_ndmp_mover_read_request_v4 = unpack_ndmp_mover_read_request

    unpack_ndmp_mover_read_reply_v2 = unpack_ndmp_mover_read_reply

    unpack_ndmp_mover_read_reply_v3 = unpack_ndmp_mover_read_reply

    unpack_ndmp_mover_read_reply_v4 = unpack_ndmp_mover_read_reply

    unpack_ndmp_mover_close_reply_v2 = unpack_ndmp_mover_close_reply

    unpack_ndmp_mover_close_reply_v3 = unpack_ndmp_mover_close_reply

    unpack_ndmp_mover_close_reply_v4 = unpack_ndmp_mover_close_reply

    unpack_ndmp_mover_connect_reply_v4 = unpack_ndmp_mover_connect_reply_v3

    unpack_ndmp_data_get_state_reply_v2 = unpack_ndmp_data_get_state_reply

    unpack_ndmp_data_start_backup_request_v2 = unpack_ndmp_data_start_backup_request

    unpack_ndmp_data_start_backup_request_v4 = unpack_ndmp_data_start_backup_request_v3

    unpack_ndmp_data_start_backup_reply_v2 = unpack_ndmp_data_start_backup_reply

    unpack_ndmp_data_start_backup_reply_v3 = unpack_ndmp_data_start_backup_reply

    unpack_ndmp_data_start_backup_reply_v4 = unpack_ndmp_data_start_backup_reply

    unpack_ndmp_name_v2 = unpack_ndmp_name

    unpack_ndmp_data_start_recover_request_v2 = unpack_ndmp_data_start_recover_request

    unpack_ndmp_data_start_recover_request_v4 = unpack_ndmp_data_start_recover_request_v3

    unpack_ndmp_data_start_recover_reply_v2 = unpack_ndmp_data_start_recover_reply

    unpack_ndmp_data_start_recover_reply_v3 = unpack_ndmp_data_start_recover_reply

    unpack_ndmp_data_start_recover_reply_v4 = unpack_ndmp_data_start_recover_reply

    unpack_ndmp_data_start_recover_filehist_reply_v4 = unpack_ndmp_data_start_recover_reply

    unpack_ndmp_data_abort_reply_v2 = unpack_ndmp_data_abort_reply

    unpack_ndmp_data_abort_reply_v3 = unpack_ndmp_data_abort_reply

    unpack_ndmp_data_abort_reply_v4 = unpack_ndmp_data_abort_reply

    unpack_ndmp_data_stop_reply_v2 = unpack_ndmp_data_stop_reply

    unpack_ndmp_data_stop_reply_v3 = unpack_ndmp_data_stop_reply

    unpack_ndmp_data_stop_reply_v4 = unpack_ndmp_data_stop_reply

    unpack_ndmp_data_get_env_reply_v2 = unpack_ndmp_data_get_env_reply

    unpack_ndmp_data_get_env_reply_v3 = unpack_ndmp_data_get_env_reply

    unpack_ndmp_data_get_env_reply_v4 = unpack_ndmp_data_get_env_reply

    unpack_ndmp_data_listen_request_v4 = unpack_ndmp_data_listen_request_v3

    unpack_ndmp_data_connect_reply_v4 = unpack_ndmp_data_connect_reply_v3

    unpack_ndmp_notify_data_halted_request_v2 = unpack_ndmp_notify_data_halted_request

    unpack_ndmp_notify_data_halted_request_v3 = unpack_ndmp_notify_data_halted_request

    unpack_ndmp_notify_connection_status_request_v2 = unpack_ndmp_notify_connected_request

    unpack_ndmp_notify_connection_status_request_v3 = unpack_ndmp_notify_connected_request

    unpack_ndmp_notify_connection_status_request_v4 = unpack_ndmp_notify_connected_request

    unpack_ndmp_notify_mover_paused_request_v2 = unpack_ndmp_notify_mover_paused_request

    unpack_ndmp_notify_mover_paused_request_v3 = unpack_ndmp_notify_mover_paused_request

    unpack_ndmp_notify_mover_paused_request_v4 = unpack_ndmp_notify_mover_paused_request

    unpack_ndmp_notify_mover_halted_request_v2 = unpack_ndmp_notify_mover_halted_request

    unpack_ndmp_notify_mover_halted_request_v3 = unpack_ndmp_notify_mover_halted_request

    unpack_ndmp_notify_data_read_request_v2 = unpack_ndmp_notify_data_read_request

    unpack_ndmp_notify_data_read_request_v3 = unpack_ndmp_notify_data_read_request

    unpack_ndmp_notify_data_read_request_v4 = unpack_ndmp_notify_data_read_request

    unpack_ndmp_log_log_request_v2 = unpack_ndmp_log_log_request

    unpack_ndmp_log_log_request_v3 = unpack_ndmp_log_log_request

    unpack_ndmp_log_log_request_v4 = unpack_ndmp_log_log_request

    unpack_ndmp_log_debug_request_v2 = unpack_ndmp_log_debug_request

    unpack_ndmp_log_debug_request_v3 = unpack_ndmp_log_debug_request

    unpack_ndmp_log_debug_request_v4 = unpack_ndmp_log_debug_request

    unpack_ndmp_log_file_request_v2 = unpack_ndmp_log_file_request

    unpack_ndmp_file = unpack_ndmp_file_v3

    unpack_ndmp_dir = unpack_ndmp_dir_v3

    unpack_ndmp_node = unpack_ndmp_node_v3

    unpack_ndmp_fh_add_unix_path_request_v2 = unpack_ndmp_fh_add_unix_path_request

    unpack_ndmp_fh_add_unix_path_request_v3 = unpack_ndmp_fh_add_unix_path_request

    unpack_ndmp_fh_add_file_request_v4 = unpack_ndmp_fh_add_file_request_v3

    unpack_ndmp_fh_add_unix_dir_request_v2 = unpack_ndmp_fh_add_unix_dir_request

    unpack_ndmp_fh_add_unix_dir_request_v3 = unpack_ndmp_fh_add_unix_dir_request

    unpack_ndmp_fh_add_dir_request_v4 = unpack_ndmp_fh_add_dir_request_v3

    unpack_ndmp_fh_add_unix_node_request_v2 = unpack_ndmp_fh_add_unix_node_request

    unpack_ndmp_fh_add_unix_node_request_v3 = unpack_ndmp_fh_add_unix_node_request

    unpack_ndmp_fh_add_node_request_v4 = unpack_ndmp_fh_add_node_request_v3

