# Generated by rpcgen.py from ndmp.x on Sun Dec 16 22:08:51 2012
import xdr.ndmp_const as const
class ndmp_u_quad:
    # XDR definition:
    # struct ndmp_u_quad {
    #     u_long high;
    #     u_long low;
    # };
    def __init__(self, high=None, low=None):
        self.high = high
        self.low = low

    def __repr__(self):
        out = []
        if self.high is not None:
            out += ['high=%s' % repr(self.high)]
        if self.low is not None:
            out += ['low=%s' % repr(self.low)]
        return 'ndmp_u_quad(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_pval:
    # XDR definition:
    # struct ndmp_pval {
    #     string name<>;
    #     string value<>;
    # };
    def __init__(self, name=None, value=None):
        self.name = name
        self.value = value

    def __repr__(self):
        out = []
        if self.name is not None:
            out += ['name=%s' % repr(self.name)]
        if self.value is not None:
            out += ['value=%s' % repr(self.value)]
        return 'ndmp_pval(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_scsi_device:
    # XDR definition:
    # struct ndmp_scsi_device {
    #     string name<>;
    # };
    def __init__(self, name=None):
        self.name = name

    def __repr__(self):
        out = []
        if self.name is not None:
            out += ['name=%s' % repr(self.name)]
        return 'ndmp_scsi_device(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_tape_device:
    # XDR definition:
    # struct ndmp_tape_device {
    #     string name<>;
    # };
    def __init__(self, name=None):
        self.name = name

    def __repr__(self):
        out = []
        if self.name is not None:
            out += ['name=%s' % repr(self.name)]
        return 'ndmp_tape_device(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_header:
    # XDR definition:
    # struct ndmp_header {
    #     u_long sequence;
    #     u_long time_stamp;
    #     ndmp_header_message_type message_type;
    #     ndmp_message message;
    #     u_long reply_sequence;
    #     ndmp_error error;
    # };
    def __init__(self, sequence=None, time_stamp=None, message_type=None, message=None, reply_sequence=None, error=None):
        self.sequence = sequence
        self.time_stamp = time_stamp
        self.message_type = message_type
        self.message = message
        self.reply_sequence = reply_sequence
        self.error = error

    def __repr__(self):
        out = []
        if self.sequence is not None:
            out += ['sequence=%s' % repr(self.sequence)]
        if self.time_stamp is not None:
            out += ['time_stamp=%s' % repr(self.time_stamp)]
        if self.message_type is not None:
            out += ['message_type=%s' % const.ndmp_header_message_type.get(self.message_type, self.message_type)]
        if self.message is not None:
            out += ['message=%s' % const.ndmp_message.get(self.message, self.message)]
        if self.reply_sequence is not None:
            out += ['reply_sequence=%s' % repr(self.reply_sequence)]
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_header(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_connect_open_request:
    # XDR definition:
    # struct ndmp_connect_open_request {
    #     u_short protocol_version;
    # };
    def __init__(self, protocol_version=None):
        self.protocol_version = protocol_version

    def __repr__(self):
        out = []
        if self.protocol_version is not None:
            out += ['protocol_version=%s' % repr(self.protocol_version)]
        return 'ndmp_connect_open_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_connect_open_reply:
    # XDR definition:
    # struct ndmp_connect_open_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_connect_open_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_auth_text:
    # XDR definition:
    # struct ndmp_auth_text {
    #     string user<>;
    #     string password<>;
    # };
    def __init__(self, user=None, password=None):
        self.user = user
        self.password = password

    def __repr__(self):
        out = []
        if self.user is not None:
            out += ['user=%s' % repr(self.user)]
        if self.password is not None:
            out += ['password=%s' % repr(self.password)]
        return 'ndmp_auth_text(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_auth_md5:
    # XDR definition:
    # struct ndmp_auth_md5 {
    #     string user<>;
    #     opaque auth_digest[16];
    # };
    def __init__(self, user=None, auth_digest=None):
        self.user = user
        self.auth_digest = auth_digest

    def __repr__(self):
        out = []
        if self.user is not None:
            out += ['user=%s' % repr(self.user)]
        if self.auth_digest is not None:
            out += ['auth_digest=<auth_digest>']
        return 'ndmp_auth_md5(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_auth_data:
    # XDR definition:
    # union ndmp_auth_data switch(ndmp_auth_type auth_type) {
    #     case NDMP_AUTH_NONE:
    #         void;
    #     case NDMP_AUTH_TEXT:
    #         ndmp_auth_text auth_text;
    #     case NDMP_AUTH_MD5:
    #         ndmp_auth_md5 auth_md5;
    # };
    def __init__(self, auth_type=None, auth_text=None, auth_md5=None):
        self.auth_type = auth_type
        self.auth_text = auth_text
        self.auth_md5 = auth_md5

    switch = property(lambda s: {const.NDMP_AUTH_NONE:None,const.NDMP_AUTH_TEXT:s.auth_text,const.NDMP_AUTH_MD5:s.auth_md5,}[s.auth_type])

    def __getattr__(self, attr):
        return getattr(self.switch, attr)

    def __repr__(self):
        out = []
        if self.auth_type is not None:
            out += ['auth_type=%s' % const.ndmp_auth_type.get(self.auth_type, self.auth_type)]
        if self.auth_text is not None:
            out += ['auth_text=%s' % repr(self.auth_text)]
        if self.auth_md5 is not None:
            out += ['auth_md5=%s' % repr(self.auth_md5)]
        return 'ndmp_auth_data(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_connect_client_auth_request:
    # XDR definition:
    # struct ndmp_connect_client_auth_request {
    #     ndmp_auth_data auth_data;
    # };
    def __init__(self, auth_data=None):
        self.auth_data = auth_data

    def __getattr__(self, attr):
        return getattr(self.auth_data, attr)

    def __repr__(self):
        out = []
        if self.auth_data is not None:
            out += ['auth_data=%s' % repr(self.auth_data)]
        return 'ndmp_connect_client_auth_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_connect_client_auth_reply:
    # XDR definition:
    # struct ndmp_connect_client_auth_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_connect_client_auth_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_auth_attr:
    # XDR definition:
    # union ndmp_auth_attr switch(ndmp_auth_type auth_type) {
    #     case NDMP_AUTH_NONE:
    #         void;
    #     case NDMP_AUTH_TEXT:
    #         void;
    #     case NDMP_AUTH_MD5:
    #         opaque challenge[64];
    # };
    def __init__(self, auth_type=None, challenge=None):
        self.auth_type = auth_type
        self.challenge = challenge

    switch = property(lambda s: {const.NDMP_AUTH_NONE:None,const.NDMP_AUTH_TEXT:None,const.NDMP_AUTH_MD5:s.challenge,}[s.auth_type])

    def __getattr__(self, attr):
        return getattr(self.switch, attr)

    def __repr__(self):
        out = []
        if self.auth_type is not None:
            out += ['auth_type=%s' % const.ndmp_auth_type.get(self.auth_type, self.auth_type)]
        if self.challenge is not None:
            out += ['challenge=<challenge>']
        return 'ndmp_auth_attr(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_connect_server_auth_request:
    # XDR definition:
    # struct ndmp_connect_server_auth_request {
    #     ndmp_auth_attr client_attr;
    # };
    def __init__(self, client_attr=None):
        self.client_attr = client_attr

    def __getattr__(self, attr):
        return getattr(self.client_attr, attr)

    def __repr__(self):
        out = []
        if self.client_attr is not None:
            out += ['client_attr=%s' % repr(self.client_attr)]
        return 'ndmp_connect_server_auth_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_connect_server_auth_reply:
    # XDR definition:
    # struct ndmp_connect_server_auth_reply {
    #     ndmp_error error;
    #     ndmp_auth_data auth_result;
    # };
    def __init__(self, error=None, auth_result=None):
        self.error = error
        self.auth_result = auth_result

    def __getattr__(self, attr):
        return getattr(self.auth_result, attr)

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.auth_result is not None:
            out += ['auth_result=%s' % repr(self.auth_result)]
        return 'ndmp_connect_server_auth_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_auth_text_v3:
    # XDR definition:
    # struct ndmp_auth_text_v3 {
    #     string auth_id<>;
    #     string auth_password<>;
    # };
    def __init__(self, auth_id=None, auth_password=None):
        self.auth_id = auth_id
        self.auth_password = auth_password

    def __repr__(self):
        out = []
        if self.auth_id is not None:
            out += ['auth_id=%s' % repr(self.auth_id)]
        if self.auth_password is not None:
            out += ['auth_password=%s' % repr(self.auth_password)]
        return 'ndmp_auth_text_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_auth_md5_v3:
    # XDR definition:
    # struct ndmp_auth_md5_v3 {
    #     string auth_id<>;
    #     opaque auth_digest[16];
    # };
    def __init__(self, auth_id=None, auth_digest=None):
        self.auth_id = auth_id
        self.auth_digest = auth_digest

    def __repr__(self):
        out = []
        if self.auth_id is not None:
            out += ['auth_id=%s' % repr(self.auth_id)]
        if self.auth_digest is not None:
            out += ['auth_digest=<auth_digest>']
        return 'ndmp_auth_md5_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_auth_data_v3:
    # XDR definition:
    # union ndmp_auth_data_v3 switch(ndmp_auth_type auth_type) {
    #     case NDMP_AUTH_NONE:
    #         void;
    #     case NDMP_AUTH_TEXT:
    #         ndmp_auth_text_v3 auth_text;
    #     case NDMP_AUTH_MD5:
    #         ndmp_auth_md5_v3 auth_md5;
    # };
    def __init__(self, auth_type=None, auth_text=None, auth_md5=None):
        self.auth_type = auth_type
        self.auth_text = auth_text
        self.auth_md5 = auth_md5

    switch = property(lambda s: {const.NDMP_AUTH_NONE:None,const.NDMP_AUTH_TEXT:s.auth_text,const.NDMP_AUTH_MD5:s.auth_md5,}[s.auth_type])

    def __getattr__(self, attr):
        return getattr(self.switch, attr)

    def __repr__(self):
        out = []
        if self.auth_type is not None:
            out += ['auth_type=%s' % const.ndmp_auth_type.get(self.auth_type, self.auth_type)]
        if self.auth_text is not None:
            out += ['auth_text=%s' % repr(self.auth_text)]
        if self.auth_md5 is not None:
            out += ['auth_md5=%s' % repr(self.auth_md5)]
        return 'ndmp_auth_data_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_connect_client_auth_request_v3:
    # XDR definition:
    # struct ndmp_connect_client_auth_request_v3 {
    #     ndmp_auth_data_v3 auth_data;
    # };
    def __init__(self, auth_data=None):
        self.auth_data = auth_data

    def __getattr__(self, attr):
        return getattr(self.auth_data, attr)

    def __repr__(self):
        out = []
        if self.auth_data is not None:
            out += ['auth_data=%s' % repr(self.auth_data)]
        return 'ndmp_connect_client_auth_request_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_connect_client_auth_reply_v3:
    # XDR definition:
    # struct ndmp_connect_client_auth_reply_v3 {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_connect_client_auth_reply_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_config_get_host_info_reply:
    # XDR definition:
    # struct ndmp_config_get_host_info_reply {
    #     ndmp_error error;
    #     string hostname<>;
    #     string os_type<>;
    #     string os_vers<>;
    #     string hostid<>;
    #     ndmp_auth_type auth_type<>;
    # };
    def __init__(self, error=None, hostname=None, os_type=None, os_vers=None, hostid=None, auth_type=None):
        self.error = error
        self.hostname = hostname
        self.os_type = os_type
        self.os_vers = os_vers
        self.hostid = hostid
        self.auth_type = auth_type

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.hostname is not None:
            out += ['hostname=%s' % repr(self.hostname)]
        if self.os_type is not None:
            out += ['os_type=%s' % repr(self.os_type)]
        if self.os_vers is not None:
            out += ['os_vers=%s' % repr(self.os_vers)]
        if self.hostid is not None:
            out += ['hostid=%s' % repr(self.hostid)]
        if self.auth_type is not None:
            for auth in self.auth_type:
                out += ['auth_type=%s' % const.ndmp_auth_type.get(auth)]
        return 'ndmp_config_get_host_info_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_config_get_butype_attr_request:
    # XDR definition:
    # struct ndmp_config_get_butype_attr_request {
    #     string name<>;
    # };
    def __init__(self, name=None):
        self.name = name

    def __repr__(self):
        out = []
        if self.name is not None:
            out += ['name=%s' % repr(self.name)]
        return 'ndmp_config_get_butype_attr_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_config_get_butype_attr_reply:
    # XDR definition:
    # struct ndmp_config_get_butype_attr_reply {
    #     ndmp_error error;
    #     u_long attrs;
    # };
    def __init__(self, error=None, attrs=None):
        self.error = error
        self.attrs = attrs

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.attrs is not None:
            out += ['attrs=%s' % repr(self.attrs)]
        return 'ndmp_config_get_butype_attr_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_config_get_mover_type_reply:
    # XDR definition:
    # struct ndmp_config_get_mover_type_reply {
    #     ndmp_error error;
    #     ndmp_addr_type methods<>;
    # };
    def __init__(self, error=None, methods=None):
        self.error = error
        self.methods = methods

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.methods is not None:
            out += ['methods=%s' % const.ndmp_addr_type.get(self.methods, self.methods)]
        return 'ndmp_config_get_mover_type_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_config_get_auth_attr_request:
    # XDR definition:
    # struct ndmp_config_get_auth_attr_request {
    #     ndmp_auth_type auth_type;
    # };
    def __init__(self, auth_type=None):
        self.auth_type = auth_type

    def __repr__(self):
        out = []
        if self.auth_type is not None:
            out += ['auth_type=%s' % const.ndmp_auth_type.get(self.auth_type, self.auth_type)]
        return 'ndmp_config_get_auth_attr_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_config_get_auth_attr_reply:
    # XDR definition:
    # struct ndmp_config_get_auth_attr_reply {
    #     ndmp_error error;
    #     ndmp_auth_attr server_attr;
    # };
    def __init__(self, error=None, server_attr=None):
        self.error = error
        self.server_attr = server_attr

    def __getattr__(self, attr):
        return getattr(self.server_attr, attr)

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.server_attr is not None:
            out += ['server_attr=%s' % repr(self.server_attr)]
        return 'ndmp_config_get_auth_attr_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_config_get_host_info_reply_v3:
    # XDR definition:
    # struct ndmp_config_get_host_info_reply_v3 {
    #     ndmp_error error;
    #     string hostname<>;
    #     string os_type<>;
    #     string os_vers<>;
    #     string hostid<>;
    # };
    def __init__(self, error=None, hostname=None, os_type=None, os_vers=None, hostid=None):
        self.error = error
        self.hostname = hostname
        self.os_type = os_type
        self.os_vers = os_vers
        self.hostid = hostid

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.hostname is not None:
            out += ['hostname=%s' % repr(self.hostname)]
        if self.os_type is not None:
            out += ['os_type=%s' % repr(self.os_type)]
        if self.os_vers is not None:
            out += ['os_vers=%s' % repr(self.os_vers)]
        if self.hostid is not None:
            out += ['hostid=%s' % repr(self.hostid)]
        return 'ndmp_config_get_host_info_reply_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_config_get_connection_type_reply_v3:
    # XDR definition:
    # struct ndmp_config_get_connection_type_reply_v3 {
    #     ndmp_error error;
    #     ndmp_addr_type addr_types<>;
    # };
    def __init__(self, error=None, addr_types=None):
        self.error = error
        self.addr_types = addr_types

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.addr_types is not None:
            for addr in self.addr_types:
                out += ['addr_types=%s' % const.ndmp_addr_type.get(addr)]
        return 'ndmp_config_get_connection_type_reply_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_config_get_server_info_reply_v3:
    # XDR definition:
    # struct ndmp_config_get_server_info_reply_v3 {
    #     ndmp_error error;
    #     string vendor_name<>;
    #     string product_name<>;
    #     string revision_number<>;
    #     ndmp_auth_type auth_type<>;
    # };
    def __init__(self, error=None, vendor_name=None, product_name=None, revision_number=None, auth_type=None):
        self.error = error
        self.vendor_name = vendor_name
        self.product_name = product_name
        self.revision_number = revision_number
        self.auth_type = auth_type

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.vendor_name is not None:
            out += ['vendor_name=%s' % repr(self.vendor_name)]
        if self.product_name is not None:
            out += ['product_name=%s' % repr(self.product_name)]
        if self.revision_number is not None:
            out += ['revision_number=%s' % repr(self.revision_number)]
        if self.auth_type is not None:
            for auth in self.auth_type:
                out += ['auth_type=%s' % const.ndmp_auth_type.get(auth)]
        return 'ndmp_config_get_server_info_reply_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_butype_info:
    # XDR definition:
    # struct ndmp_butype_info {
    #     string butype_name<>;
    #     ndmp_pval default_env<>;
    #     u_long attrs;
    # };
    def __init__(self, butype_name=None, default_env=None, attrs=None):
        self.butype_name = butype_name
        self.default_env = default_env
        self.attrs = attrs

    def __repr__(self):
        out = []
        if self.butype_name is not None:
            out += ['butype_name=%s' % repr(self.butype_name)]
        if self.default_env is not None:
            out += ['default_env=%s' % repr(self.default_env)]
        if self.attrs is not None:
            out += ['attrs=%s' % repr(self.attrs)]
        return 'ndmp_butype_info(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_config_get_butype_info_reply_v3:
    # XDR definition:
    # struct ndmp_config_get_butype_info_reply_v3 {
    #     ndmp_error error;
    #     ndmp_butype_info butype_info<>;
    # };
    def __init__(self, error=None, butype_info=None):
        self.error = error
        self.butype_info = butype_info

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.butype_info is not None:
            out += ['butype_info=%s' % repr(self.butype_info)]
        return 'ndmp_config_get_butype_info_reply_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_fs_info_v3:
    # XDR definition:
    # struct ndmp_fs_info_v3 {
    #     u_long invalid;
    #     string fs_type<>;
    #     string fs_logical_device<>;
    #     string fs_physical_device<>;
    #     ndmp_u_quad total_size;
    #     ndmp_u_quad used_size;
    #     ndmp_u_quad avail_size;
    #     ndmp_u_quad total_inodes;
    #     ndmp_u_quad used_inodes;
    #     ndmp_pval fs_env<>;
    #     string fs_status<>;
    # };
    def __init__(self, invalid=None, fs_type=None, fs_logical_device=None, fs_physical_device=None, total_size=None, used_size=None, avail_size=None, total_inodes=None, used_inodes=None, fs_env=None, fs_status=None):
        self.invalid = invalid
        self.fs_type = fs_type
        self.fs_logical_device = fs_logical_device
        self.fs_physical_device = fs_physical_device
        self.total_size = total_size
        self.used_size = used_size
        self.avail_size = avail_size
        self.total_inodes = total_inodes
        self.used_inodes = used_inodes
        self.fs_env = fs_env
        self.fs_status = fs_status

    def __repr__(self):
        out = []
        if self.invalid is not None:
            out += ['invalid=%s' % repr(self.invalid)]
        if self.fs_type is not None:
            out += ['fs_type=%s' % repr(self.fs_type)]
        if self.fs_logical_device is not None:
            out += ['fs_logical_device=%s' % repr(self.fs_logical_device)]
        if self.fs_physical_device is not None:
            out += ['fs_physical_device=%s' % repr(self.fs_physical_device)]
        if self.total_size is not None:
            out += ['total_size=%s' % repr(self.total_size)]
        if self.used_size is not None:
            out += ['used_size=%s' % repr(self.used_size)]
        if self.avail_size is not None:
            out += ['avail_size=%s' % repr(self.avail_size)]
        if self.total_inodes is not None:
            out += ['total_inodes=%s' % repr(self.total_inodes)]
        if self.used_inodes is not None:
            out += ['used_inodes=%s' % repr(self.used_inodes)]
        if self.fs_env is not None:
            out += ['fs_env=%s' % repr(self.fs_env)]
        if self.fs_status is not None:
            out += ['fs_status=%s' % repr(self.fs_status)]
        return 'ndmp_fs_info_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_config_get_fs_info_reply_v3:
    # XDR definition:
    # struct ndmp_config_get_fs_info_reply_v3 {
    #     ndmp_error error;
    #     ndmp_fs_info_v3 fs_info<>;
    # };
    def __init__(self, error=None, fs_info=None):
        self.error = error
        self.fs_info = fs_info

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.fs_info is not None:
            out += ['fs_info=%s' % repr(self.fs_info)]
        return 'ndmp_config_get_fs_info_reply_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_device_capability_v3:
    # XDR definition:
    # struct ndmp_device_capability_v3 {
    #     string device<>;
    #     u_long attr;
    #     ndmp_pval capability<>;
    # };
    def __init__(self, device=None, attr=None, capability=None):
        self.device = device
        self.attr = attr
        self.capability = capability

    def __repr__(self):
        out = []
        if self.device is not None:
            out += ['device=%s' % repr(self.device)]
        if self.attr is not None:
            out += ['attr=%s' % repr(self.attr)]
        if self.capability is not None:
            out += ['capability=%s' % repr(self.capability)]
        return 'ndmp_device_capability_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_device_info_v3:
    # XDR definition:
    # struct ndmp_device_info_v3 {
    #     string model<>;
    #     ndmp_device_capability_v3 caplist<>;
    # };
    def __init__(self, model=None, caplist=None):
        self.model = model
        self.caplist = caplist

    def __repr__(self):
        out = []
        if self.model is not None:
            out += ['model=%s' % repr(self.model)]
        if self.caplist is not None:
            out += ['caplist=%s' % repr(self.caplist)]
        return 'ndmp_device_info_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_config_get_tape_info_reply_v3:
    # XDR definition:
    # struct ndmp_config_get_tape_info_reply_v3 {
    #     ndmp_error error;
    #     ndmp_device_info_v3 tape_info<>;
    # };
    def __init__(self, error=None, tape_info=None):
        self.error = error
        self.tape_info = tape_info

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.tape_info is not None:
            out += ['tape_info=%s' % repr(self.tape_info)]
        return 'ndmp_config_get_tape_info_reply_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_config_get_scsi_info_reply_v3:
    # XDR definition:
    # struct ndmp_config_get_scsi_info_reply_v3 {
    #     ndmp_error error;
    #     ndmp_device_info_v3 scsi_info<>;
    # };
    def __init__(self, error=None, scsi_info=None):
        self.error = error
        self.scsi_info = scsi_info

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.scsi_info is not None:
            out += ['scsi_info=%s' % repr(self.scsi_info)]
        return 'ndmp_config_get_scsi_info_reply_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_config_get_butype_info_reply_v4:
    # XDR definition:
    # struct ndmp_config_get_butype_info_reply_v4 {
    #     ndmp_error error;
    #     ndmp_butype_info butype_info<>;
    # };
    def __init__(self, error=None, butype_info=None):
        self.error = error
        self.butype_info = butype_info

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.butype_info is not None:
            out += ['butype_info=%s' % repr(self.butype_info)]
        return 'ndmp_config_get_butype_info_reply_v4(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_class_list:
    # XDR definition:
    # struct ndmp_class_list {
    #     u_short ext_class_id;
    #     u_short ext_version<>;
    # };
    def __init__(self, ext_class_id=None, ext_version=None):
        self.ext_class_id = ext_class_id
        self.ext_version = ext_version

    def __repr__(self):
        out = []
        if self.ext_class_id is not None:
            out += ['ext_class_id=%s' % repr(self.ext_class_id)]
        if self.ext_version is not None:
            out += ['ext_version=%s' % repr(self.ext_version)]
        return 'ndmp_class_list(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_class_version:
    # XDR definition:
    # struct ndmp_class_version {
    #     u_short ext_class_id;
    #     u_short ext_version;
    # };
    def __init__(self, ext_class_id=None, ext_version=None):
        self.ext_class_id = ext_class_id
        self.ext_version = ext_version

    def __repr__(self):
        out = []
        if self.ext_class_id is not None:
            out += ['ext_class_id=%s' % repr(self.ext_class_id)]
        if self.ext_version is not None:
            out += ['ext_version=%s' % repr(self.ext_version)]
        return 'ndmp_class_version(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_config_get_ext_list_reply:
    # XDR definition:
    # struct ndmp_config_get_ext_list_reply {
    #     ndmp_error error;
    #     ndmp_class_list class_list<>;
    # };
    def __init__(self, error=None, class_list=None):
        self.error = error
        self.class_list = class_list

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.class_list is not None:
            out += ['class_list=%s' % repr(self.class_list)]
        return 'ndmp_config_get_ext_list_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_config_set_ext_list_request:
    # XDR definition:
    # struct ndmp_config_set_ext_list_request {
    #     ndmp_class_version ndmp_selected_ext<>;
    # };
    def __init__(self, ndmp_selected_ext=None):
        self.ndmp_selected_ext = ndmp_selected_ext

    def __repr__(self):
        out = []
        if self.ndmp_selected_ext is not None:
            out += ['ndmp_selected_ext=%s' % repr(self.ndmp_selected_ext)]
        return 'ndmp_config_set_ext_list_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_config_set_ext_list_reply:
    # XDR definition:
    # struct ndmp_config_set_ext_list_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_config_set_ext_list_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_scsi_open_request:
    # XDR definition:
    # struct ndmp_scsi_open_request {
    #     ndmp_scsi_device device;
    # };
    def __init__(self, device=None):
        self.device = device

    def __getattr__(self, attr):
        return getattr(self.device, attr)

    def __repr__(self):
        out = []
        if self.device is not None:
            out += ['device=%s' % repr(self.device)]
        return 'ndmp_scsi_open_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_scsi_open_reply:
    # XDR definition:
    # struct ndmp_scsi_open_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_scsi_open_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_scsi_close_reply:
    # XDR definition:
    # struct ndmp_scsi_close_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_scsi_close_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_scsi_get_state_reply:
    # XDR definition:
    # struct ndmp_scsi_get_state_reply {
    #     ndmp_error error;
    #     short target_controller;
    #     short target_id;
    #     short target_lun;
    # };
    def __init__(self, error=None, target_controller=None, target_id=None, target_lun=None):
        self.error = error
        self.target_controller = target_controller
        self.target_id = target_id
        self.target_lun = target_lun

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.target_controller is not None:
            out += ['target_controller=%s' % repr(self.target_controller)]
        if self.target_id is not None:
            out += ['target_id=%s' % repr(self.target_id)]
        if self.target_lun is not None:
            out += ['target_lun=%s' % repr(self.target_lun)]
        return 'ndmp_scsi_get_state_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_scsi_set_target_request:
    # XDR definition:
    # struct ndmp_scsi_set_target_request {
    #     ndmp_scsi_device device;
    #     u_short target_controller;
    #     u_short target_id;
    #     u_short target_lun;
    # };
    def __init__(self, device=None, target_controller=None, target_id=None, target_lun=None):
        self.device = device
        self.target_controller = target_controller
        self.target_id = target_id
        self.target_lun = target_lun

    def __getattr__(self, attr):
        return getattr(self.device, attr)

    def __repr__(self):
        out = []
        if self.device is not None:
            out += ['device=%s' % repr(self.device)]
        if self.target_controller is not None:
            out += ['target_controller=%s' % repr(self.target_controller)]
        if self.target_id is not None:
            out += ['target_id=%s' % repr(self.target_id)]
        if self.target_lun is not None:
            out += ['target_lun=%s' % repr(self.target_lun)]
        return 'ndmp_scsi_set_target_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_scsi_set_target_reply:
    # XDR definition:
    # struct ndmp_scsi_set_target_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_scsi_set_target_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_scsi_reset_device_reply:
    # XDR definition:
    # struct ndmp_scsi_reset_device_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_scsi_reset_device_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_scsi_reset_bus_reply:
    # XDR definition:
    # struct ndmp_scsi_reset_bus_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_scsi_reset_bus_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_execute_cdb_request:
    # XDR definition:
    # struct ndmp_execute_cdb_request {
    #     u_long flags;
    #     u_long timeout;
    #     u_long datain_len;
    #     opaque cdb<>;
    #     opaque dataout<>;
    # };
    def __init__(self, flags=None, timeout=None, datain_len=None, cdb=None, dataout=None):
        self.flags = flags
        self.timeout = timeout
        self.datain_len = datain_len
        self.cdb = cdb
        self.dataout = dataout

    def __repr__(self):
        out = []
        if self.flags is not None:
            out += ['flags=%s' % repr(self.flags)]
        if self.timeout is not None:
            out += ['timeout=%s' % repr(self.timeout)]
        if self.datain_len is not None:
            out += ['datain_len=%s' % repr(self.datain_len)]
        if self.cdb is not None:
            out += ['cdb=%s' % repr(self.cdb)]
        if self.dataout is not None:
            out += ['dataout=<dataout>']
        return 'ndmp_execute_cdb_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_execute_cdb_reply:
    # XDR definition:
    # struct ndmp_execute_cdb_reply {
    #     ndmp_error error;
    #     u_char status;
    #     u_long dataout_len;
    #     opaque datain<>;
    #     opaque ext_sense<>;
    # };
    def __init__(self, error=None, status=None, dataout_len=None, datain=None, ext_sense=None):
        self.error = error
        self.status = status
        self.dataout_len = dataout_len
        self.datain = datain
        self.ext_sense = ext_sense

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.status is not None:
            out += ['status=%s' % repr(self.status)]
        if self.dataout_len is not None:
            out += ['dataout_len=%s' % repr(self.dataout_len)]
        if self.datain is not None:
            out += ['datain=<datain>']
            #out += ['datain=%s' % repr(self.datain)]
        if self.ext_sense is not None:
            out += ['ext_sense=<sense>']
            #out += ['ext_sense=%s' % repr(self.ext_sense)]
        return 'ndmp_execute_cdb_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_scsi_open_request_v3:
    # XDR definition:
    # struct ndmp_scsi_open_request_v3 {
    #     string device<>;
    # };
    def __init__(self, device=None):
        self.device = device

    def __repr__(self):
        out = []
        if self.device is not None:
            out += ['device=%s' % repr(self.device)]
        return 'ndmp_scsi_open_request_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_scsi_set_target_request_v3:
    # XDR definition:
    # struct ndmp_scsi_set_target_request_v3 {
    #     string device<>;
    #     u_short target_controller;
    #     u_short target_id;
    #     u_short target_lun;
    # };
    def __init__(self, device=None, target_controller=None, target_id=None, target_lun=None):
        self.device = device
        self.target_controller = target_controller
        self.target_id = target_id
        self.target_lun = target_lun

    def __repr__(self):
        out = []
        if self.device is not None:
            out += ['device=%s' % repr(self.device)]
        if self.target_controller is not None:
            out += ['target_controller=%s' % repr(self.target_controller)]
        if self.target_id is not None:
            out += ['target_id=%s' % repr(self.target_id)]
        if self.target_lun is not None:
            out += ['target_lun=%s' % repr(self.target_lun)]
        return 'ndmp_scsi_set_target_request_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_tape_open_request:
    # XDR definition:
    # struct ndmp_tape_open_request {
    #     ndmp_tape_device device;
    #     ndmp_tape_open_mode mode;
    # };
    def __init__(self, device=None, mode=None):
        self.device = device
        self.mode = mode

    def __getattr__(self, attr):
        return getattr(self.device, attr)

    def __repr__(self):
        out = []
        if self.device is not None:
            out += ['device=%s' % repr(self.device)]
        if self.mode is not None:
            out += ['mode=%s' % const.ndmp_tape_open_mode.get(self.mode, self.mode)]
        return 'ndmp_tape_open_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_tape_open_reply:
    # XDR definition:
    # struct ndmp_tape_open_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_tape_open_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_tape_close_reply:
    # XDR definition:
    # struct ndmp_tape_close_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_tape_close_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_tape_get_state_reply:
    # XDR definition:
    # struct ndmp_tape_get_state_reply {
    #     ndmp_error error;
    #     u_long flags;
    #     u_long file_num;
    #     u_long soft_errors;
    #     u_long block_size;
    #     u_long blockno;
    #     ndmp_u_quad total_space;
    #     ndmp_u_quad space_remain;
    # };
    def __init__(self, error=None, flags=None, file_num=None, soft_errors=None, block_size=None, blockno=None, total_space=None, space_remain=None):
        self.error = error
        self.flags = flags
        self.file_num = file_num
        self.soft_errors = soft_errors
        self.block_size = block_size
        self.blockno = blockno
        self.total_space = total_space
        self.space_remain = space_remain

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.flags is not None:
            out += ['flags=%s' % repr(self.flags)]
        if self.file_num is not None:
            out += ['file_num=%s' % repr(self.file_num)]
        if self.soft_errors is not None:
            out += ['soft_errors=%s' % repr(self.soft_errors)]
        if self.block_size is not None:
            out += ['block_size=%s' % repr(self.block_size)]
        if self.blockno is not None:
            out += ['blockno=%s' % repr(self.blockno)]
        if self.total_space is not None:
            out += ['total_space=%s' % repr(self.total_space)]
        if self.space_remain is not None:
            out += ['space_remain=%s' % repr(self.space_remain)]
        return 'ndmp_tape_get_state_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_tape_mtio_request:
    # XDR definition:
    # struct ndmp_tape_mtio_request {
    #     ndmp_tape_mtio_op tape_op;
    #     u_long count;
    # };
    def __init__(self, tape_op=None, count=None):
        self.tape_op = tape_op
        self.count = count

    def __repr__(self):
        out = []
        if self.tape_op is not None:
            out += ['tape_op=%s' % const.ndmp_tape_mtio_op.get(self.tape_op, self.tape_op)]
        if self.count is not None:
            out += ['count=%s' % repr(self.count)]
        return 'ndmp_tape_mtio_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_tape_mtio_reply:
    # XDR definition:
    # struct ndmp_tape_mtio_reply {
    #     ndmp_error error;
    #     u_long resid_count;
    # };
    def __init__(self, error=None, resid_count=None):
        self.error = error
        self.resid_count = resid_count

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.resid_count is not None:
            out += ['resid_count=%s' % repr(self.resid_count)]
        return 'ndmp_tape_mtio_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_tape_write_request:
    # XDR definition:
    # struct ndmp_tape_write_request {
    #     opaque data_out<>;
    # };
    def __init__(self, data_out=None):
        self.data_out = data_out

    def __repr__(self):
        out = []
        if self.data_out is not None:
            #out += ['data_out=%s' % repr(self.data_out)]
            out += ['data_out=<data_out>']
        return 'ndmp_tape_write_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_tape_write_reply:
    # XDR definition:
    # struct ndmp_tape_write_reply {
    #     ndmp_error error;
    #     u_long count;
    # };
    def __init__(self, error=None, count=None):
        self.error = error
        self.count = count

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.count is not None:
            out += ['count=%s' % repr(self.count)]
        return 'ndmp_tape_write_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_tape_read_request:
    # XDR definition:
    # struct ndmp_tape_read_request {
    #     u_long count;
    # };
    def __init__(self, count=None):
        self.count = count

    def __repr__(self):
        out = []
        if self.count is not None:
            out += ['count=%s' % repr(self.count)]
        return 'ndmp_tape_read_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_tape_read_reply:
    # XDR definition:
    # struct ndmp_tape_read_reply {
    #     ndmp_error error;
    #     opaque data_in<>;
    # };
    def __init__(self, error=None, data_in=None):
        self.error = error
        self.data_in = data_in

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.data_in is not None:
            out += ['data_in=<data_in>']
        return 'ndmp_tape_read_reply(%s)' % ', '.join(out)
    __str__ = __repr__

ndmp_tape_execute_cdb_request = ndmp_execute_cdb_request
ndmp_tape_execute_cdb_reply = ndmp_execute_cdb_reply
class ndmp_tape_open_request_v3:
    # XDR definition:
    # struct ndmp_tape_open_request_v3 {
    #     string device<>;
    #     ndmp_tape_open_mode mode;
    # };
    def __init__(self, device=None, mode=None):
        self.device = device
        self.mode = mode

    def __repr__(self):
        out = []
        if self.device is not None:
            out += ['device=%s' % repr(self.device)]
        if self.mode is not None:
            out += ['mode=%s' % const.ndmp_tape_open_mode.get(self.mode, self.mode)]
        return 'ndmp_tape_open_request_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_tape_get_state_reply_v3:
    # XDR definition:
    # struct ndmp_tape_get_state_reply_v3 {
    #     u_long invalid;
    #     ndmp_error error;
    #     u_long flags;
    #     u_long file_num;
    #     u_long soft_errors;
    #     u_long block_size;
    #     u_long blockno;
    #     ndmp_u_quad total_space;
    #     ndmp_u_quad space_remain;
    #     u_long partition;
    # };
    def __init__(self, invalid=None, error=None, flags=None, file_num=None, soft_errors=None, block_size=None, blockno=None, total_space=None, space_remain=None, partition=None):
        self.invalid = invalid
        self.error = error
        self.flags = flags
        self.file_num = file_num
        self.soft_errors = soft_errors
        self.block_size = block_size
        self.blockno = blockno
        self.total_space = total_space
        self.space_remain = space_remain
        self.partition = partition

    def __repr__(self):
        out = []
        if self.invalid is not None:
            out += ['invalid=%s' % repr(self.invalid)]
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.flags is not None:
            out += ['flags=%s' % repr(self.flags)]
        if self.file_num is not None:
            out += ['file_num=%s' % repr(self.file_num)]
        if self.soft_errors is not None:
            out += ['soft_errors=%s' % repr(self.soft_errors)]
        if self.block_size is not None:
            out += ['block_size=%s' % repr(self.block_size)]
        if self.blockno is not None:
            out += ['blockno=%s' % repr(self.blockno)]
        if self.total_space is not None:
            out += ['total_space=%s' % repr(self.total_space)]
        if self.space_remain is not None:
            out += ['space_remain=%s' % repr(self.space_remain)]
        if self.partition is not None:
            out += ['partition=%s' % repr(self.partition)]
        return 'ndmp_tape_get_state_reply_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_tape_get_state_reply_v4:
    # XDR definition:
    # struct ndmp_tape_get_state_reply_v4 {
    #     u_long unsupported;
    #     ndmp_error error;
    #     u_long flags;
    #     u_long file_num;
    #     u_long soft_errors;
    #     u_long block_size;
    #     u_long blockno;
    #     ndmp_u_quad total_space;
    #     ndmp_u_quad space_remain;
    # };
    def __init__(self, unsupported=None, error=None, flags=None, file_num=None, soft_errors=None, block_size=None, blockno=None, total_space=None, space_remain=None):
        self.unsupported = unsupported
        self.error = error
        self.flags = flags
        self.file_num = file_num
        self.soft_errors = soft_errors
        self.block_size = block_size
        self.blockno = blockno
        self.total_space = total_space
        self.space_remain = space_remain

    def __repr__(self):
        out = []
        if self.unsupported is not None:
            out += ['unsupported=%s' % repr(self.unsupported)]
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.flags is not None:
            out += ['flags=%s' % repr(self.flags)]
        if self.file_num is not None:
            out += ['file_num=%s' % repr(self.file_num)]
        if self.soft_errors is not None:
            out += ['soft_errors=%s' % repr(self.soft_errors)]
        if self.block_size is not None:
            out += ['block_size=%s' % repr(self.block_size)]
        if self.blockno is not None:
            out += ['blockno=%s' % repr(self.blockno)]
        if self.total_space is not None:
            out += ['total_space=%s' % repr(self.total_space)]
        if self.space_remain is not None:
            out += ['space_remain=%s' % repr(self.space_remain)]
        return 'ndmp_tape_get_state_reply_v4(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_get_state_reply:
    # XDR definition:
    # struct ndmp_mover_get_state_reply {
    #     ndmp_error error;
    #     ndmp_mover_state state;
    #     ndmp_mover_pause_reason pause_reason;
    #     ndmp_mover_halt_reason halt_reason;
    #     u_long record_size;
    #     u_long record_num;
    #     ndmp_u_quad data_written;
    #     ndmp_u_quad seek_position;
    #     ndmp_u_quad bytes_left_to_read;
    #     ndmp_u_quad window_offset;
    #     ndmp_u_quad window_length;
    # };
    def __init__(self, error=None, state=None, pause_reason=None, halt_reason=None, record_size=None, record_num=None, data_written=None, seek_position=None, bytes_left_to_read=None, window_offset=None, window_length=None):
        self.error = error
        self.state = state
        self.pause_reason = pause_reason
        self.halt_reason = halt_reason
        self.record_size = record_size
        self.record_num = record_num
        self.data_written = data_written
        self.seek_position = seek_position
        self.bytes_left_to_read = bytes_left_to_read
        self.window_offset = window_offset
        self.window_length = window_length

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.state is not None:
            out += ['state=%s' % const.ndmp_mover_state.get(self.state, self.state)]
        if self.pause_reason is not None:
            out += ['pause_reason=%s' % const.ndmp_mover_pause_reason.get(self.pause_reason, self.pause_reason)]
        if self.halt_reason is not None:
            out += ['halt_reason=%s' % const.ndmp_mover_halt_reason.get(self.halt_reason, self.halt_reason)]
        if self.record_size is not None:
            out += ['record_size=%s' % repr(self.record_size)]
        if self.record_num is not None:
            out += ['record_num=%s' % repr(self.record_num)]
        if self.data_written is not None:
            out += ['data_written=%s' % repr(self.data_written)]
        if self.seek_position is not None:
            out += ['seek_position=%s' % repr(self.seek_position)]
        if self.bytes_left_to_read is not None:
            out += ['bytes_left_to_read=%s' % repr(self.bytes_left_to_read)]
        if self.window_offset is not None:
            out += ['window_offset=%s' % repr(self.window_offset)]
        if self.window_length is not None:
            out += ['window_length=%s' % repr(self.window_length)]
        return 'ndmp_mover_get_state_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_tcp_addr:
    # XDR definition:
    # struct ndmp_tcp_addr {
    #     u_long ip_addr;
    #     u_short port;
    # };
    def __init__(self, ip_addr=None, port=None):
        self.ip_addr = ip_addr
        self.port = port

    def __repr__(self):
        out = []
        if self.ip_addr is not None:
            out += ['ip_addr=%s' % repr(self.ip_addr)]
        if self.port is not None:
            out += ['port=%s' % repr(self.port)]
        return 'ndmp_tcp_addr(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_addr:
    # XDR definition:
    # union ndmp_mover_addr switch(ndmp_addr_type addr_type) {
    #     case NDMP_ADDR_LOCAL:
    #         void;
    #     case NDMP_ADDR_TCP:
    #         ndmp_tcp_addr addr;
    # };
    def __init__(self, addr_type=None, addr=None):
        self.addr_type = addr_type
        self.addr = addr

    switch = property(lambda s: {const.NDMP_ADDR_LOCAL:None,const.NDMP_ADDR_TCP:s.addr,}[s.addr_type])

    def __getattr__(self, attr):
        return getattr(self.switch, attr)

    def __repr__(self):
        out = []
        if self.addr_type is not None:
            out += ['addr_type=%s' % const.ndmp_addr_type.get(self.addr_type, self.addr_type)]
        if self.addr is not None:
            out += ['addr=%s' % repr(self.addr)]
        return 'ndmp_mover_addr(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_listen_request:
    # XDR definition:
    # struct ndmp_mover_listen_request {
    #     ndmp_mover_mode mode;
    #     ndmp_addr_type addr_type;
    # };
    def __init__(self, mode=None, addr_type=None):
        self.mode = mode
        self.addr_type = addr_type

    def __repr__(self):
        out = []
        if self.mode is not None:
            out += ['mode=%s' % const.ndmp_mover_mode.get(self.mode, self.mode)]
        if self.addr_type is not None:
            out += ['addr_type=%s' % const.ndmp_addr_type.get(self.addr_type, self.addr_type)]
        return 'ndmp_mover_listen_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_listen_reply:
    # XDR definition:
    # struct ndmp_mover_listen_reply {
    #     ndmp_error error;
    #     ndmp_mover_addr mover;
    # };
    def __init__(self, error=None, mover=None):
        self.error = error
        self.mover = mover

    def __getattr__(self, attr):
        return getattr(self.mover, attr)

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.mover is not None:
            out += ['mover=%s' % repr(self.mover)]
        return 'ndmp_mover_listen_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_set_record_size_request:
    # XDR definition:
    # struct ndmp_mover_set_record_size_request {
    #     u_long len;
    # };
    def __init__(self, len=None):
        self.len = len

    def __repr__(self):
        out = []
        if self.len is not None:
            out += ['len=%s' % repr(self.len)]
        return 'ndmp_mover_set_record_size_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_set_record_size_reply:
    # XDR definition:
    # struct ndmp_mover_set_record_size_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_mover_set_record_size_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_set_window_request:
    # XDR definition:
    # struct ndmp_mover_set_window_request {
    #     ndmp_u_quad offset;
    #     ndmp_u_quad length;
    # };
    def __init__(self, offset=None, length=None):
        self.offset = offset
        self.length = length

    def __repr__(self):
        out = []
        if self.offset is not None:
            out += ['offset=%s' % repr(self.offset)]
        if self.length is not None:
            out += ['length=%s' % repr(self.length)]
        return 'ndmp_mover_set_window_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_set_window_reply:
    # XDR definition:
    # struct ndmp_mover_set_window_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_mover_set_window_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_continue_reply:
    # XDR definition:
    # struct ndmp_mover_continue_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_mover_continue_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_abort_reply:
    # XDR definition:
    # struct ndmp_mover_abort_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_mover_abort_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_stop_reply:
    # XDR definition:
    # struct ndmp_mover_stop_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_mover_stop_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_read_request:
    # XDR definition:
    # struct ndmp_mover_read_request {
    #     ndmp_u_quad offset;
    #     ndmp_u_quad length;
    # };
    def __init__(self, offset=None, length=None):
        self.offset = offset
        self.length = length

    def __repr__(self):
        out = []
        if self.offset is not None:
            out += ['offset=%s' % repr(self.offset)]
        if self.length is not None:
            out += ['length=%s' % repr(self.length)]
        return 'ndmp_mover_read_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_read_reply:
    # XDR definition:
    # struct ndmp_mover_read_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_mover_read_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_close_reply:
    # XDR definition:
    # struct ndmp_mover_close_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_mover_close_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_fc_addr_v3:
    # XDR definition:
    # struct ndmp_fc_addr_v3 {
    #     u_long loop_id;
    # };
    def __init__(self, loop_id=None):
        self.loop_id = loop_id

    def __repr__(self):
        out = []
        if self.loop_id is not None:
            out += ['loop_id=%s' % repr(self.loop_id)]
        return 'ndmp_fc_addr_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_ipc_addr_v3:
    # XDR definition:
    # struct ndmp_ipc_addr_v3 {
    #     opaque comm_data<>;
    # };
    def __init__(self, comm_data=None):
        self.comm_data = comm_data

    def __repr__(self):
        out = []
        if self.comm_data is not None:
            out += ['comm_data=%s' % repr(self.comm_data)]
        return 'ndmp_ipc_addr_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_addr_v3:
    # XDR definition:
    # union ndmp_addr_v3 switch(ndmp_addr_type addr_type) {
    #     case NDMP_ADDR_LOCAL:
    #         void;
    #     case NDMP_ADDR_TCP:
    #         ndmp_tcp_addr tcp_addr;
    #     case NDMP_ADDR_FC:
    #         ndmp_fc_addr_v3 fc_addr;
    #     case NDMP_ADDR_IPC:
    #         ndmp_ipc_addr_v3 ipc_addr;
    # };
    def __init__(self, addr_type=None, tcp_addr=None, fc_addr=None, ipc_addr=None):
        self.addr_type = addr_type
        self.tcp_addr = tcp_addr
        self.fc_addr = fc_addr
        self.ipc_addr = ipc_addr

    switch = property(lambda s: {const.NDMP_ADDR_LOCAL:None,const.NDMP_ADDR_TCP:s.tcp_addr,const.NDMP_ADDR_FC:s.fc_addr,const.NDMP_ADDR_IPC:s.ipc_addr,}[s.addr_type])

    def __getattr__(self, attr):
        return getattr(self.switch, attr)

    def __repr__(self):
        out = []
        if self.addr_type is not None:
            out += ['addr_type=%s' % const.ndmp_addr_type.get(self.addr_type, self.addr_type)]
        if self.tcp_addr is not None:
            out += ['tcp_addr=%s' % repr(self.tcp_addr)]
        if self.fc_addr is not None:
            out += ['fc_addr=%s' % repr(self.fc_addr)]
        if self.ipc_addr is not None:
            out += ['ipc_addr=%s' % repr(self.ipc_addr)]
        return 'ndmp_addr_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_get_state_reply_v3:
    # XDR definition:
    # struct ndmp_mover_get_state_reply_v3 {
    #     ndmp_error error;
    #     ndmp_mover_state state;
    #     ndmp_mover_pause_reason pause_reason;
    #     ndmp_mover_halt_reason halt_reason;
    #     u_long record_size;
    #     u_long record_num;
    #     ndmp_u_quad data_written;
    #     ndmp_u_quad seek_position;
    #     ndmp_u_quad bytes_left_to_read;
    #     ndmp_u_quad window_offset;
    #     ndmp_u_quad window_length;
    #     ndmp_addr_v3 data_connection_addr;
    # };
    def __init__(self, error=None, state=None, pause_reason=None, halt_reason=None, record_size=None, record_num=None, data_written=None, seek_position=None, bytes_left_to_read=None, window_offset=None, window_length=None, data_connection_addr=None):
        self.error = error
        self.state = state
        self.pause_reason = pause_reason
        self.halt_reason = halt_reason
        self.record_size = record_size
        self.record_num = record_num
        self.data_written = data_written
        self.seek_position = seek_position
        self.bytes_left_to_read = bytes_left_to_read
        self.window_offset = window_offset
        self.window_length = window_length
        self.data_connection_addr = data_connection_addr

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.state is not None:
            out += ['state=%s' % const.ndmp_mover_state.get(self.state, self.state)]
        if self.pause_reason is not None:
            out += ['pause_reason=%s' % const.ndmp_mover_pause_reason.get(self.pause_reason, self.pause_reason)]
        if self.halt_reason is not None:
            out += ['halt_reason=%s' % const.ndmp_mover_halt_reason.get(self.halt_reason, self.halt_reason)]
        if self.record_size is not None:
            out += ['record_size=%s' % repr(self.record_size)]
        if self.record_num is not None:
            out += ['record_num=%s' % repr(self.record_num)]
        if self.data_written is not None:
            out += ['data_written=%s' % repr(self.data_written)]
        if self.seek_position is not None:
            out += ['seek_position=%s' % repr(self.seek_position)]
        if self.bytes_left_to_read is not None:
            out += ['bytes_left_to_read=%s' % repr(self.bytes_left_to_read)]
        if self.window_offset is not None:
            out += ['window_offset=%s' % repr(self.window_offset)]
        if self.window_length is not None:
            out += ['window_length=%s' % repr(self.window_length)]
        if self.data_connection_addr is not None:
            out += ['data_connection_addr=%s' % repr(self.data_connection_addr)]
        return 'ndmp_mover_get_state_reply_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_listen_reply_v3:
    # XDR definition:
    # struct ndmp_mover_listen_reply_v3 {
    #     ndmp_error error;
    #     ndmp_addr_v3 data_connection_addr;
    # };
    def __init__(self, error=None, data_connection_addr=None):
        self.error = error
        self.data_connection_addr = data_connection_addr

    def __getattr__(self, attr):
        return getattr(self.data_connection_addr, attr)

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.data_connection_addr is not None:
            out += ['data_connection_addr=%s' % repr(self.data_connection_addr)]
        return 'ndmp_mover_listen_reply_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_connect_request_v3:
    # XDR definition:
    # struct ndmp_mover_connect_request_v3 {
    #     ndmp_mover_mode mode;
    #     ndmp_addr_v3 addr;
    # };
    def __init__(self, mode=None, addr=None):
        self.mode = mode
        self.addr = addr

    def __getattr__(self, attr):
        return getattr(self.addr, attr)

    def __repr__(self):
        out = []
        if self.mode is not None:
            out += ['mode=%s' % const.ndmp_mover_mode.get(self.mode, self.mode)]
        if self.addr is not None:
            out += ['addr=%s' % repr(self.addr)]
        return 'ndmp_mover_connect_request_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_connect_reply_v3:
    # XDR definition:
    # struct ndmp_mover_connect_reply_v3 {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_mover_connect_reply_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_tcp_addr_v4:
    # XDR definition:
    # struct ndmp_tcp_addr_v4 {
    #     u_long ip_addr;
    #     u_short port;
    #     ndmp_pval addr_env<>;
    # };
    def __init__(self, ip_addr=None, port=None, addr_env=None):
        self.ip_addr = ip_addr
        self.port = port
        self.addr_env = addr_env

    def __repr__(self):
        out = []
        if self.ip_addr is not None:
            out += ['ip_addr=%s' % repr(self.ip_addr)]
        if self.port is not None:
            out += ['port=%s' % repr(self.port)]
        if self.addr_env is not None:
            out += ['addr_env=%s' % repr(self.addr_env)]
        return 'ndmp_tcp_addr_v4(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_addr_v4:
    # XDR definition:
    # union ndmp_addr_v4 switch(ndmp_addr_type addr_type) {
    #     case NDMP_ADDR_LOCAL:
    #         void;
    #     case NDMP_ADDR_TCP:
    #         ndmp_tcp_addr_v4 tcp_addr<>;
    #     case NDMP_ADDR_IPC:
    #         ndmp_ipc_addr_v3 ipc_addr;
    # };
    def __init__(self, addr_type=None, tcp_addr=None, ipc_addr=None):
        self.addr_type = addr_type
        self.tcp_addr = tcp_addr
        self.ipc_addr = ipc_addr

    switch = property(lambda s: {const.NDMP_ADDR_LOCAL:None,const.NDMP_ADDR_TCP:s.tcp_addr,const.NDMP_ADDR_IPC:s.ipc_addr,}[s.addr_type])

    def __getattr__(self, attr):
        return getattr(self.switch, attr)

    def __repr__(self):
        out = []
        if self.addr_type is not None:
            out += ['addr_type=%s' % const.ndmp_addr_type.get(self.addr_type, self.addr_type)]
        if self.tcp_addr is not None:
            out += ['tcp_addr=%s' % repr(self.tcp_addr)]
        if self.ipc_addr is not None:
            out += ['ipc_addr=%s' % repr(self.ipc_addr)]
        return 'ndmp_addr_v4(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_connect_request_v4:
    # XDR definition:
    # struct ndmp_mover_connect_request_v4 {
    #     ndmp_mover_mode mode;
    #     ndmp_addr_v4 addr;
    # };
    def __init__(self, mode=None, addr=None):
        self.mode = mode
        self.addr = addr

    def __getattr__(self, attr):
        return getattr(self.addr, attr)

    def __repr__(self):
        out = []
        if self.mode is not None:
            out += ['mode=%s' % const.ndmp_mover_mode.get(self.mode, self.mode)]
        if self.addr is not None:
            out += ['addr=%s' % repr(self.addr)]
        return 'ndmp_mover_connect_request_v4(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_listen_reply_v4:
    # XDR definition:
    # struct ndmp_mover_listen_reply_v4 {
    #     ndmp_error error;
    #     ndmp_addr_v4 connect_addr;
    # };
    def __init__(self, error=None, connect_addr=None):
        self.error = error
        self.connect_addr = connect_addr

    def __getattr__(self, attr):
        return getattr(self.connect_addr, attr)

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.connect_addr is not None:
            out += ['connect_addr=%s' % repr(self.connect_addr)]
        return 'ndmp_mover_listen_reply_v4(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_mover_get_state_reply_v4:
    # XDR definition:
    # struct ndmp_mover_get_state_reply_v4 {
    #     ndmp_error error;
    #     ndmp_mover_mode mode;
    #     ndmp_mover_state state;
    #     ndmp_mover_pause_reason pause_reason;
    #     ndmp_mover_halt_reason halt_reason;
    #     u_long record_size;
    #     u_long record_num;
    #     ndmp_u_quad bytes_moved;
    #     ndmp_u_quad seek_position;
    #     ndmp_u_quad bytes_left_to_read;
    #     ndmp_u_quad window_offset;
    #     ndmp_u_quad window_length;
    #     ndmp_addr_v4 data_connection_addr;
    # };
    def __init__(self, error=None, mode=None, state=None, pause_reason=None, halt_reason=None, record_size=None, record_num=None, bytes_moved=None, seek_position=None, bytes_left_to_read=None, window_offset=None, window_length=None, data_connection_addr=None):
        self.error = error
        self.mode = mode
        self.state = state
        self.pause_reason = pause_reason
        self.halt_reason = halt_reason
        self.record_size = record_size
        self.record_num = record_num
        self.bytes_moved = bytes_moved
        self.seek_position = seek_position
        self.bytes_left_to_read = bytes_left_to_read
        self.window_offset = window_offset
        self.window_length = window_length
        self.data_connection_addr = data_connection_addr

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.mode is not None:
            out += ['mode=%s' % const.ndmp_mover_mode.get(self.mode, self.mode)]
        if self.state is not None:
            out += ['state=%s' % const.ndmp_mover_state.get(self.state, self.state)]
        if self.pause_reason is not None:
            out += ['pause_reason=%s' % const.ndmp_mover_pause_reason.get(self.pause_reason, self.pause_reason)]
        if self.halt_reason is not None:
            out += ['halt_reason=%s' % const.ndmp_mover_halt_reason.get(self.halt_reason, self.halt_reason)]
        if self.record_size is not None:
            out += ['record_size=%s' % repr(self.record_size)]
        if self.record_num is not None:
            out += ['record_num=%s' % repr(self.record_num)]
        if self.bytes_moved is not None:
            out += ['bytes_moved=%s' % repr(self.bytes_moved)]
        if self.seek_position is not None:
            out += ['seek_position=%s' % repr(self.seek_position)]
        if self.bytes_left_to_read is not None:
            out += ['bytes_left_to_read=%s' % repr(self.bytes_left_to_read)]
        if self.window_offset is not None:
            out += ['window_offset=%s' % repr(self.window_offset)]
        if self.window_length is not None:
            out += ['window_length=%s' % repr(self.window_length)]
        if self.data_connection_addr is not None:
            out += ['data_connection_addr=%s' % repr(self.data_connection_addr)]
        return 'ndmp_mover_get_state_reply_v4(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_data_get_state_reply:
    # XDR definition:
    # struct ndmp_data_get_state_reply {
    #     ndmp_error error;
    #     ndmp_data_operation operation;
    #     ndmp_data_state state;
    #     ndmp_data_halt_reason halt_reason;
    #     ndmp_u_quad bytes_processed;
    #     ndmp_u_quad est_bytes_remain;
    #     u_long est_time_remain;
    #     ndmp_mover_addr mover;
    #     ndmp_u_quad read_offset;
    #     ndmp_u_quad read_length;
    # };
    def __init__(self, error=None, operation=None, state=None, halt_reason=None, bytes_processed=None, est_bytes_remain=None, est_time_remain=None, mover=None, read_offset=None, read_length=None):
        self.error = error
        self.operation = operation
        self.state = state
        self.halt_reason = halt_reason
        self.bytes_processed = bytes_processed
        self.est_bytes_remain = est_bytes_remain
        self.est_time_remain = est_time_remain
        self.mover = mover
        self.read_offset = read_offset
        self.read_length = read_length

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.operation is not None:
            out += ['operation=%s' % const.ndmp_data_operation.get(self.operation, self.operation)]
        if self.state is not None:
            out += ['state=%s' % const.ndmp_data_state.get(self.state, self.state)]
        if self.halt_reason is not None:
            out += ['halt_reason=%s' % const.ndmp_data_halt_reason.get(self.halt_reason, self.halt_reason)]
        if self.bytes_processed is not None:
            out += ['bytes_processed=%s' % repr(self.bytes_processed)]
        if self.est_bytes_remain is not None:
            out += ['est_bytes_remain=%s' % repr(self.est_bytes_remain)]
        if self.est_time_remain is not None:
            out += ['est_time_remain=%s' % repr(self.est_time_remain)]
        if self.mover is not None:
            out += ['mover=%s' % repr(self.mover)]
        if self.read_offset is not None:
            out += ['read_offset=%s' % repr(self.read_offset)]
        if self.read_length is not None:
            out += ['read_length=%s' % repr(self.read_length)]
        return 'ndmp_data_get_state_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_data_start_backup_request:
    # XDR definition:
    # struct ndmp_data_start_backup_request {
    #     ndmp_mover_addr mover;
    #     string bu_type<>;
    #     ndmp_pval env<>;
    # };
    def __init__(self, mover=None, bu_type=None, env=None):
        self.mover = mover
        self.bu_type = bu_type
        self.env = env

    def __getattr__(self, attr):
        return getattr(self.mover, attr)

    def __repr__(self):
        out = []
        if self.mover is not None:
            out += ['mover=%s' % repr(self.mover)]
        if self.bu_type is not None:
            out += ['bu_type=%s' % repr(self.bu_type)]
        if self.env is not None:
            out += ['env=%s' % repr(self.env)]
        return 'ndmp_data_start_backup_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_data_start_backup_reply:
    # XDR definition:
    # struct ndmp_data_start_backup_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_data_start_backup_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_name:
    # XDR definition:
    # struct ndmp_name {
    #     string name<>;
    #     string dest<>;
    #     u_short ssid;
    #     ndmp_u_quad fh_info;
    # };
    def __init__(self, name=None, dest=None, ssid=None, fh_info=None):
        self.name = name
        self.dest = dest
        self.ssid = ssid
        self.fh_info = fh_info

    def __getattr__(self, attr):
        return getattr(self.fh_info, attr)

    def __repr__(self):
        out = []
        if self.name is not None:
            out += ['name=%s' % repr(self.name)]
        if self.dest is not None:
            out += ['dest=%s' % repr(self.dest)]
        if self.ssid is not None:
            out += ['ssid=%s' % repr(self.ssid)]
        if self.fh_info is not None:
            out += ['fh_info=%s' % repr(self.fh_info)]
        return 'ndmp_name(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_data_start_recover_request:
    # XDR definition:
    # struct ndmp_data_start_recover_request {
    #     ndmp_mover_addr mover;
    #     ndmp_pval env<>;
    #     ndmp_name nlist<>;
    #     string bu_type<>;
    # };
    def __init__(self, mover=None, env=None, nlist=None, bu_type=None):
        self.mover = mover
        self.env = env
        self.nlist = nlist
        self.bu_type = bu_type

    def __getattr__(self, attr):
        return getattr(self.mover, attr)

    def __repr__(self):
        out = []
        if self.mover is not None:
            out += ['mover=%s' % repr(self.mover)]
        if self.env is not None:
            out += ['env=%s' % repr(self.env)]
        if self.nlist is not None:
            out += ['nlist=%s' % repr(self.nlist)]
        if self.bu_type is not None:
            out += ['bu_type=%s' % repr(self.bu_type)]
        return 'ndmp_data_start_recover_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_data_start_recover_reply:
    # XDR definition:
    # struct ndmp_data_start_recover_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_data_start_recover_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_data_abort_reply:
    # XDR definition:
    # struct ndmp_data_abort_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_data_abort_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_data_stop_reply:
    # XDR definition:
    # struct ndmp_data_stop_reply {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_data_stop_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_data_get_env_reply:
    # XDR definition:
    # struct ndmp_data_get_env_reply {
    #     ndmp_error error;
    #     ndmp_pval env<>;
    # };
    def __init__(self, error=None, env=None):
        self.error = error
        self.env = env

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.env is not None:
            out += ['env=%s' % repr(self.env)]
        return 'ndmp_data_get_env_reply(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_notify_data_halted_request:
    # XDR definition:
    # struct ndmp_notify_data_halted_request {
    #     ndmp_data_halt_reason reason;
    #     string text_reason<>;
    # };
    def __init__(self, reason=None, text_reason=None):
        self.reason = reason
        self.text_reason = text_reason

    def __repr__(self):
        out = []
        if self.reason is not None:
            out += ['reason=%s' % const.ndmp_data_halt_reason.get(self.reason, self.reason)]
        if self.text_reason is not None:
            out += ['text_reason=%s' % repr(self.text_reason)]
        return 'ndmp_notify_data_halted_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_data_get_state_reply_v3:
    # XDR definition:
    # struct ndmp_data_get_state_reply_v3 {
    #     u_long invalid;
    #     ndmp_error error;
    #     ndmp_data_operation operation;
    #     ndmp_data_state state;
    #     ndmp_data_halt_reason halt_reason;
    #     ndmp_u_quad bytes_processed;
    #     ndmp_u_quad est_bytes_remain;
    #     u_long est_time_remain;
    #     ndmp_addr_v3 data_connection_addr;
    #     ndmp_u_quad read_offset;
    #     ndmp_u_quad read_length;
    # };
    def __init__(self, invalid=None, error=None, operation=None, state=None, halt_reason=None, bytes_processed=None, est_bytes_remain=None, est_time_remain=None, data_connection_addr=None, read_offset=None, read_length=None):
        self.invalid = invalid
        self.error = error
        self.operation = operation
        self.state = state
        self.halt_reason = halt_reason
        self.bytes_processed = bytes_processed
        self.est_bytes_remain = est_bytes_remain
        self.est_time_remain = est_time_remain
        self.data_connection_addr = data_connection_addr
        self.read_offset = read_offset
        self.read_length = read_length

    def __repr__(self):
        out = []
        if self.invalid is not None:
            out += ['invalid=%s' % repr(self.invalid)]
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.operation is not None:
            out += ['operation=%s' % const.ndmp_data_operation.get(self.operation, self.operation)]
        if self.state is not None:
            out += ['state=%s' % const.ndmp_data_state.get(self.state, self.state)]
        if self.halt_reason is not None:
            out += ['halt_reason=%s' % const.ndmp_data_halt_reason.get(self.halt_reason, self.halt_reason)]
        if self.bytes_processed is not None:
            out += ['bytes_processed=%s' % repr(self.bytes_processed)]
        if self.est_bytes_remain is not None:
            out += ['est_bytes_remain=%s' % repr(self.est_bytes_remain)]
        if self.est_time_remain is not None:
            out += ['est_time_remain=%s' % repr(self.est_time_remain)]
        if self.data_connection_addr is not None:
            out += ['data_connection_addr=%s' % repr(self.data_connection_addr)]
        if self.read_offset is not None:
            out += ['read_offset=%s' % repr(self.read_offset)]
        if self.read_length is not None:
            out += ['read_length=%s' % repr(self.read_length)]
        return 'ndmp_data_get_state_reply_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_data_start_backup_request_v3:
    # XDR definition:
    # struct ndmp_data_start_backup_request_v3 {
    #     string bu_type<>;
    #     ndmp_pval env<>;
    # };
    def __init__(self, bu_type=None, env=None):
        self.bu_type = bu_type
        self.env = env

    def __repr__(self):
        out = []
        if self.bu_type is not None:
            out += ['bu_type=%s' % repr(self.bu_type)]
        if self.env is not None:
            out += ['env=%s' % repr(self.env)]
        return 'ndmp_data_start_backup_request_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_name_v3:
    # XDR definition:
    # struct ndmp_name_v3 {
    #     string original_path<>;
    #     string destination_dir<>;
    #     string new_name<>;
    #     string other_name<>;
    #     ndmp_u_quad node;
    #     ndmp_u_quad fh_info;
    # };
    def __init__(self, original_path=None, destination_dir=None, new_name=None, other_name=None, node=None, fh_info=None):
        self.original_path = original_path
        self.destination_dir = destination_dir
        self.new_name = new_name
        self.other_name = other_name
        self.node = node
        self.fh_info = fh_info

    def __repr__(self):
        out = []
        if self.original_path is not None:
            out += ['original_path=%s' % repr(self.original_path)]
        if self.destination_dir is not None:
            out += ['destination_dir=%s' % repr(self.destination_dir)]
        if self.new_name is not None:
            out += ['new_name=%s' % repr(self.new_name)]
        if self.other_name is not None:
            out += ['other_name=%s' % repr(self.other_name)]
        if self.node is not None:
            out += ['node=%s' % repr(self.node)]
        if self.fh_info is not None:
            out += ['fh_info=%s' % repr(self.fh_info)]
        return 'ndmp_name_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_data_start_recover_request_v3:
    # XDR definition:
    # struct ndmp_data_start_recover_request_v3 {
    #     ndmp_pval env<>;
    #     ndmp_name_v3 nlist<>;
    #     string bu_type<>;
    # };
    def __init__(self, env=None, nlist=None, bu_type=None):
        self.env = env
        self.nlist = nlist
        self.bu_type = bu_type

    def __repr__(self):
        out = []
        if self.env is not None:
            out += ['env=%s' % repr(self.env)]
        if self.nlist is not None:
            out += ['nlist=%s' % repr(self.nlist)]
        if self.bu_type is not None:
            out += ['bu_type=%s' % repr(self.bu_type)]
        return 'ndmp_data_start_recover_request_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_data_listen_request_v3:
    # XDR definition:
    # struct ndmp_data_listen_request_v3 {
    #     ndmp_addr_type addr_type;
    # };
    def __init__(self, addr_type=None):
        self.addr_type = addr_type

    def __repr__(self):
        out = []
        if self.addr_type is not None:
            out += ['addr_type=%s' % const.ndmp_addr_type.get(self.addr_type, self.addr_type)]
        return 'ndmp_data_listen_request_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_data_listen_reply_v3:
    # XDR definition:
    # struct ndmp_data_listen_reply_v3 {
    #     ndmp_error error;
    #     ndmp_addr_v3 data_connection_addr;
    # };
    def __init__(self, error=None, data_connection_addr=None):
        self.error = error
        self.data_connection_addr = data_connection_addr

    def __getattr__(self, attr):
        return getattr(self.data_connection_addr, attr)

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.data_connection_addr is not None:
            out += ['data_connection_addr=%s' % repr(self.data_connection_addr)]
        return 'ndmp_data_listen_reply_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_data_connect_request_v3:
    # XDR definition:
    # struct ndmp_data_connect_request_v3 {
    #     ndmp_addr_v3 addr;
    # };
    def __init__(self, addr=None):
        self.addr = addr

    def __getattr__(self, attr):
        return getattr(self.addr, attr)

    def __repr__(self):
        out = []
        if self.addr is not None:
            out += ['addr=%s' % repr(self.addr)]
        return 'ndmp_data_connect_request_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_data_connect_reply_v3:
    # XDR definition:
    # struct ndmp_data_connect_reply_v3 {
    #     ndmp_error error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_data_connect_reply_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_data_get_state_reply_v4:
    # XDR definition:
    # struct ndmp_data_get_state_reply_v4 {
    #     u_long unsupported;
    #     ndmp_error error;
    #     ndmp_data_operation operation;
    #     ndmp_data_state state;
    #     ndmp_data_halt_reason halt_reason;
    #     ndmp_u_quad bytes_processed;
    #     ndmp_u_quad est_bytes_remain;
    #     u_long est_time_remain;
    #     ndmp_addr_v4 data_connection_addr;
    #     ndmp_u_quad read_offset;
    #     ndmp_u_quad read_length;
    # };
    def __init__(self, unsupported=None, error=None, operation=None, state=None, halt_reason=None, bytes_processed=None, est_bytes_remain=None, est_time_remain=None, data_connection_addr=None, read_offset=None, read_length=None):
        self.unsupported = unsupported
        self.error = error
        self.operation = operation
        self.state = state
        self.halt_reason = halt_reason
        self.bytes_processed = bytes_processed
        self.est_bytes_remain = est_bytes_remain
        self.est_time_remain = est_time_remain
        self.data_connection_addr = data_connection_addr
        self.read_offset = read_offset
        self.read_length = read_length

    def __repr__(self):
        out = []
        if self.unsupported is not None:
            out += ['unsupported=%s' % repr(self.unsupported)]
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.operation is not None:
            out += ['operation=%s' % const.ndmp_data_operation.get(self.operation, self.operation)]
        if self.state is not None:
            out += ['state=%s' % const.ndmp_data_state.get(self.state, self.state)]
        if self.halt_reason is not None:
            out += ['halt_reason=%s' % const.ndmp_data_halt_reason.get(self.halt_reason, self.halt_reason)]
        if self.bytes_processed is not None:
            out += ['bytes_processed=%s' % repr(self.bytes_processed)]
        if self.est_bytes_remain is not None:
            out += ['est_bytes_remain=%s' % repr(self.est_bytes_remain)]
        if self.est_time_remain is not None:
            out += ['est_time_remain=%s' % repr(self.est_time_remain)]
        if self.data_connection_addr is not None:
            out += ['data_connection_addr=%s' % repr(self.data_connection_addr)]
        if self.read_offset is not None:
            out += ['read_offset=%s' % repr(self.read_offset)]
        if self.read_length is not None:
            out += ['read_length=%s' % repr(self.read_length)]
        return 'ndmp_data_get_state_reply_v4(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_data_listen_reply_v4:
    # XDR definition:
    # struct ndmp_data_listen_reply_v4 {
    #     ndmp_error error;
    #     ndmp_addr_v4 connect_addr;
    # };
    def __init__(self, error=None, connect_addr=None):
        self.error = error
        self.connect_addr = connect_addr

    def __getattr__(self, attr):
        return getattr(self.connect_addr, attr)

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        if self.connect_addr is not None:
            out += ['connect_addr=%s' % repr(self.connect_addr)]
        return 'ndmp_data_listen_reply_v4(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_data_connect_request_v4:
    # XDR definition:
    # struct ndmp_data_connect_request_v4 {
    #     ndmp_addr_v4 addr;
    # };
    def __init__(self, addr=None):
        self.addr = addr

    def __getattr__(self, attr):
        return getattr(self.addr, attr)

    def __repr__(self):
        out = []
        if self.addr is not None:
            out += ['addr=%s' % repr(self.addr)]
        return 'ndmp_data_connect_request_v4(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_notify_connected_request:
    # XDR definition:
    # struct ndmp_notify_connected_request {
    #     ndmp_connect_reason reason;
    #     u_short protocol_version;
    #     string text_reason<>;
    # };
    def __init__(self, reason=None, protocol_version=None, text_reason=None):
        self.reason = reason
        self.protocol_version = protocol_version
        self.text_reason = text_reason

    def __repr__(self):
        out = []
        if self.reason is not None:
            out += ['reason=%s' % const.ndmp_connect_reason.get(self.reason, self.reason)]
        if self.protocol_version is not None:
            out += ['protocol_version=%s' % repr(self.protocol_version)]
        if self.text_reason is not None:
            out += ['text_reason=%s' % repr(self.text_reason)]
        return 'ndmp_notify_connected_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_notify_mover_paused_request:
    # XDR definition:
    # struct ndmp_notify_mover_paused_request {
    #     ndmp_mover_pause_reason reason;
    #     ndmp_u_quad seek_position;
    # };
    def __init__(self, reason=None, seek_position=None):
        self.reason = reason
        self.seek_position = seek_position

    def __getattr__(self, attr):
        return getattr(self.seek_position, attr)

    def __repr__(self):
        out = []
        if self.reason is not None:
            out += ['reason=%s' % const.ndmp_mover_pause_reason.get(self.reason, self.reason)]
        if self.seek_position is not None:
            out += ['seek_position=%s' % repr(self.seek_position)]
        return 'ndmp_notify_mover_paused_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_notify_mover_halted_request:
    # XDR definition:
    # struct ndmp_notify_mover_halted_request {
    #     ndmp_mover_halt_reason reason;
    #     string text_reason<>;
    # };
    def __init__(self, reason=None, text_reason=None):
        self.reason = reason
        self.text_reason = text_reason

    def __repr__(self):
        out = []
        if self.reason is not None:
            out += ['reason=%s' % const.ndmp_mover_halt_reason.get(self.reason, self.reason)]
        if self.text_reason is not None:
            out += ['text_reason=%s' % repr(self.text_reason)]
        return 'ndmp_notify_mover_halted_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_notify_data_read_request:
    # XDR definition:
    # struct ndmp_notify_data_read_request {
    #     ndmp_u_quad offset;
    #     ndmp_u_quad length;
    # };
    def __init__(self, offset=None, length=None):
        self.offset = offset
        self.length = length

    def __repr__(self):
        out = []
        if self.offset is not None:
            out += ['offset=%s' % repr(self.offset)]
        if self.length is not None:
            out += ['length=%s' % repr(self.length)]
        return 'ndmp_notify_data_read_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_notify_data_halted_request_v4:
    # XDR definition:
    # struct ndmp_notify_data_halted_request_v4 {
    #     ndmp_data_halt_reason reason;
    # };
    def __init__(self, reason=None):
        self.reason = reason

    def __repr__(self):
        out = []
        if self.reason is not None:
            out += ['reason=%s' % const.ndmp_data_halt_reason.get(self.reason, self.reason)]
        return 'ndmp_notify_data_halted_request_v4(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_notify_mover_halted_request_v4:
    # XDR definition:
    # struct ndmp_notify_mover_halted_request_v4 {
    #     ndmp_mover_halt_reason reason;
    # };
    def __init__(self, reason=None):
        self.reason = reason

    def __repr__(self):
        out = []
        if self.reason is not None:
            out += ['reason=%s' % const.ndmp_mover_halt_reason.get(self.reason, self.reason)]
        return 'ndmp_notify_mover_halted_request_v4(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_log_log_request:
    # XDR definition:
    # struct ndmp_log_log_request {
    #     string entry<>;
    # };
    def __init__(self, entry=None):
        self.entry = entry

    def __repr__(self):
        out = []
        if self.entry is not None:
            out += ['entry=%s' % repr(self.entry)]
        return 'ndmp_log_log_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_log_debug_request:
    # XDR definition:
    # struct ndmp_log_debug_request {
    #     ndmp_debug_level level;
    #     string message<>;
    # };
    def __init__(self, level=None, message=None):
        self.level = level
        self.message = message

    def __repr__(self):
        out = []
        if self.level is not None:
            out += ['level=%s' % const.ndmp_debug_level.get(self.level, self.level)]
        if self.message is not None:
            out += ['message=%s' % repr(self.message)]
        return 'ndmp_log_debug_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_log_file_request:
    # XDR definition:
    # struct ndmp_log_file_request {
    #     string name<>;
    #     u_short ssid;
    #     ndmp_error error;
    # };
    def __init__(self, name=None, ssid=None, error=None):
        self.name = name
        self.ssid = ssid
        self.error = error

    def __repr__(self):
        out = []
        if self.name is not None:
            out += ['name=%s' % repr(self.name)]
        if self.ssid is not None:
            out += ['ssid=%s' % repr(self.ssid)]
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_log_file_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_log_message_request_v3:
    # XDR definition:
    # struct ndmp_log_message_request_v3 {
    #     ndmp_log_type log_type;
    #     u_long message_id;
    #     string entry<>;
    # };
    def __init__(self, log_type=None, message_id=None, entry=None):
        self.log_type = log_type
        self.message_id = message_id
        self.entry = entry

    def __repr__(self):
        out = []
        if self.log_type is not None:
            out += ['log_type=%s' % const.ndmp_log_type.get(self.log_type, self.log_type)]
        if self.message_id is not None:
            out += ['message_id=%s' % repr(self.message_id)]
        if self.entry is not None:
            out += ['entry=%s' % repr(self.entry)]
        return 'ndmp_log_message_request_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_log_file_request_v3:
    # XDR definition:
    # struct ndmp_log_file_request_v3 {
    #     string name<>;
    #     ndmp_error error;
    # };
    def __init__(self, name=None, error=None):
        self.name = name
        self.error = error

    def __repr__(self):
        out = []
        if self.name is not None:
            out += ['name=%s' % repr(self.name)]
        if self.error is not None:
            out += ['error=%s' % const.ndmp_error.get(self.error, self.error)]
        return 'ndmp_log_file_request_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_log_message_request_v4:
    # XDR definition:
    # struct ndmp_log_message_request_v4 {
    #     ndmp_log_type log_type;
    #     u_long message_id;
    #     string entry<>;
    #     ndmp_has_associated_message associated_message_valid;
    #     u_long associated_message_sequence;
    # };
    def __init__(self, log_type=None, message_id=None, entry=None, associated_message_valid=None, associated_message_sequence=None):
        self.log_type = log_type
        self.message_id = message_id
        self.entry = entry
        self.associated_message_valid = associated_message_valid
        self.associated_message_sequence = associated_message_sequence

    def __repr__(self):
        out = []
        if self.log_type is not None:
            out += ['log_type=%s' % const.ndmp_log_type.get(self.log_type, self.log_type)]
        if self.message_id is not None:
            out += ['message_id=%s' % repr(self.message_id)]
        if self.entry is not None:
            out += ['entry=%s' % repr(self.entry)]
        if self.associated_message_valid is not None:
            out += ['associated_message_valid=%s' % const.ndmp_has_associated_message.get(self.associated_message_valid, self.associated_message_valid)]
        if self.associated_message_sequence is not None:
            out += ['associated_message_sequence=%s' % repr(self.associated_message_sequence)]
        return 'ndmp_log_message_request_v4(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_log_file_request_v4:
    # XDR definition:
    # struct ndmp_log_file_request_v4 {
    #     string name<>;
    #     ndmp_recovery_status recovery_status;
    # };
    def __init__(self, name=None, recovery_status=None):
        self.name = name
        self.recovery_status = recovery_status

    def __repr__(self):
        out = []
        if self.name is not None:
            out += ['name=%s' % repr(self.name)]
        if self.recovery_status is not None:
            out += ['recovery_status=%s' % const.ndmp_recovery_status.get(self.recovery_status, self.recovery_status)]
        return 'ndmp_log_file_request_v4(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_unix_file_stat:
    # XDR definition:
    # struct ndmp_unix_file_stat {
    #     ndmp_file_type ftype;
    #     u_long mtime;
    #     u_long atime;
    #     u_long ctime;
    #     u_long uid;
    #     u_long gid;
    #     u_long mode;
    #     ndmp_u_quad size;
    #     ndmp_u_quad fh_info;
    # };
    def __init__(self, ftype=None, mtime=None, atime=None, ctime=None, uid=None, gid=None, mode=None, size=None, fh_info=None):
        self.ftype = ftype
        self.mtime = mtime
        self.atime = atime
        self.ctime = ctime
        self.uid = uid
        self.gid = gid
        self.mode = mode
        self.size = size
        self.fh_info = fh_info

    def __repr__(self):
        out = []
        if self.ftype is not None:
            out += ['ftype=%s' % const.ndmp_file_type.get(self.ftype, self.ftype)]
        if self.mtime is not None:
            out += ['mtime=%s' % repr(self.mtime)]
        if self.atime is not None:
            out += ['atime=%s' % repr(self.atime)]
        if self.ctime is not None:
            out += ['ctime=%s' % repr(self.ctime)]
        if self.uid is not None:
            out += ['uid=%s' % repr(self.uid)]
        if self.gid is not None:
            out += ['gid=%s' % repr(self.gid)]
        if self.mode is not None:
            out += ['mode=%s' % repr(self.mode)]
        if self.size is not None:
            out += ['size=%s' % repr(self.size)]
        if self.fh_info is not None:
            out += ['fh_info=%s' % repr(self.fh_info)]
        return 'ndmp_unix_file_stat(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_fh_unix_path:
    # XDR definition:
    # struct ndmp_fh_unix_path {
    #     ndmp_unix_path name;
    #     ndmp_unix_file_stat fstat;
    # };
    def __init__(self, name=None, fstat=None):
        self.name = name
        self.fstat = fstat

    def __getattr__(self, attr):
        return getattr(self.fstat, attr)

    def __repr__(self):
        out = []
        if self.name is not None:
            out += ['name=%s' % repr(self.name)]
        if self.fstat is not None:
            out += ['fstat=%s' % repr(self.fstat)]
        return 'ndmp_fh_unix_path(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_fh_add_unix_path_request:
    # XDR definition:
    # struct ndmp_fh_add_unix_path_request {
    #     ndmp_fh_unix_path paths<>;
    # };
    def __init__(self, paths=None):
        self.paths = paths

    def __repr__(self):
        out = []
        if self.paths is not None:
            out += ['paths=%s' % repr(self.paths)]
        return 'ndmp_fh_add_unix_path_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_fh_unix_dir:
    # XDR definition:
    # struct ndmp_fh_unix_dir {
    #     ndmp_unix_path name;
    #     u_long node;
    #     u_long parent;
    # };
    def __init__(self, name=None, node=None, parent=None):
        self.name = name
        self.node = node
        self.parent = parent

    def __repr__(self):
        out = []
        if self.name is not None:
            out += ['name=%s' % repr(self.name)]
        if self.node is not None:
            out += ['node=%s' % repr(self.node)]
        if self.parent is not None:
            out += ['parent=%s' % repr(self.parent)]
        return 'ndmp_fh_unix_dir(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_fh_add_unix_dir_request:
    # XDR definition:
    # struct ndmp_fh_add_unix_dir_request {
    #     ndmp_fh_unix_dir dirs<>;
    # };
    def __init__(self, dirs=None):
        self.dirs = dirs

    def __repr__(self):
        out = []
        if self.dirs is not None:
            out += ['dirs=%s' % repr(self.dirs)]
        return 'ndmp_fh_add_unix_dir_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_fh_unix_node:
    # XDR definition:
    # struct ndmp_fh_unix_node {
    #     ndmp_unix_file_stat fstat;
    #     u_long node;
    # };
    def __init__(self, fstat=None, node=None):
        self.fstat = fstat
        self.node = node

    def __getattr__(self, attr):
        return getattr(self.fstat, attr)

    def __repr__(self):
        out = []
        if self.fstat is not None:
            out += ['fstat=%s' % repr(self.fstat)]
        if self.node is not None:
            out += ['node=%s' % repr(self.node)]
        return 'ndmp_fh_unix_node(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_fh_add_unix_node_request:
    # XDR definition:
    # struct ndmp_fh_add_unix_node_request {
    #     ndmp_fh_unix_node nodes<>;
    # };
    def __init__(self, nodes=None):
        self.nodes = nodes

    def __repr__(self):
        out = []
        if self.nodes is not None:
            out += ['nodes=%s' % repr(self.nodes)]
        return 'ndmp_fh_add_unix_node_request(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_nt_path_v3:
    # XDR definition:
    # struct ndmp_nt_path_v3 {
    #     ndmp_path_v3 nt_path;
    #     ndmp_path_v3 dos_path;
    # };
    def __init__(self, nt_path=None, dos_path=None):
        self.nt_path = nt_path
        self.dos_path = dos_path

    def __repr__(self):
        out = []
        if self.nt_path is not None:
            out += ['nt_path=%s' % repr(self.nt_path)]
        if self.dos_path is not None:
            out += ['dos_path=%s' % repr(self.dos_path)]
        return 'ndmp_nt_path_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_file_name_v3:
    # XDR definition:
    # union ndmp_file_name_v3 switch(ndmp_fs_type fs_type) {
    #     case NDMP_FS_UNIX:
    #         ndmp_path_v3 unix_name;
    #     case NDMP_FS_NT:
    #         ndmp_nt_path_v3 nt_name;
    #     default:
    #         ndmp_path_v3 other_name;
    # };
    def __init__(self, fs_type=None, unix_name=None, nt_name=None, other_name=None):
        self.fs_type = fs_type
        self.unix_name = unix_name
        self.nt_name = nt_name
        self.other_name = other_name

    switch = property(lambda s: {const.NDMP_FS_UNIX:s.unix_name,const.NDMP_FS_NT:s.nt_name,}.get(s.fs_type, s.other_name))

    def __getattr__(self, attr):
        return getattr(self.switch, attr)

    def __repr__(self):
        out = []
        if self.fs_type is not None:
            out += ['fs_type=%s' % const.ndmp_fs_type.get(self.fs_type, self.fs_type)]
        if self.unix_name is not None:
            out += ['unix_name=%s' % repr(self.unix_name)]
        if self.nt_name is not None:
            out += ['nt_name=%s' % repr(self.nt_name)]
        if self.other_name is not None:
            out += ['other_name=%s' % repr(self.other_name)]
        return 'ndmp_file_name_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_file_stat_v3:
    # XDR definition:
    # struct ndmp_file_stat_v3 {
    #     u_long invalid;
    #     ndmp_fs_type fs_type;
    #     ndmp_file_type ftype;
    #     u_long mtime;
    #     u_long atime;
    #     u_long ctime;
    #     u_long owner;
    #     u_long group;
    #     u_long fattr;
    #     ndmp_u_quad size;
    #     u_long links;
    # };
    def __init__(self, invalid=None, fs_type=None, ftype=None, mtime=None, atime=None, ctime=None, owner=None, group=None, fattr=None, size=None, links=None):
        self.invalid = invalid
        self.fs_type = fs_type
        self.ftype = ftype
        self.mtime = mtime
        self.atime = atime
        self.ctime = ctime
        self.owner = owner
        self.group = group
        self.fattr = fattr
        self.size = size
        self.links = links

    def __getattr__(self, attr):
        return getattr(self.size, attr)

    def __repr__(self):
        out = []
        if self.invalid is not None:
            out += ['invalid=%s' % repr(self.invalid)]
        if self.fs_type is not None:
            out += ['fs_type=%s' % const.ndmp_fs_type.get(self.fs_type, self.fs_type)]
        if self.ftype is not None:
            out += ['ftype=%s' % const.ndmp_file_type.get(self.ftype, self.ftype)]
        if self.mtime is not None:
            out += ['mtime=%s' % repr(self.mtime)]
        if self.atime is not None:
            out += ['atime=%s' % repr(self.atime)]
        if self.ctime is not None:
            out += ['ctime=%s' % repr(self.ctime)]
        if self.owner is not None:
            out += ['owner=%s' % repr(self.owner)]
        if self.group is not None:
            out += ['group=%s' % repr(self.group)]
        if self.fattr is not None:
            out += ['fattr=%s' % repr(self.fattr)]
        if self.size is not None:
            out += ['size=%s' % repr(self.size)]
        if self.links is not None:
            out += ['links=%s' % repr(self.links)]
        return 'ndmp_file_stat_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_file_v3:
    # XDR definition:
    # struct ndmp_file_v3 {
    #     ndmp_file_name_v3 names<>;
    #     ndmp_file_stat_v3 stats<>;
    #     ndmp_u_quad node;
    #     ndmp_u_quad fh_info;
    # };
    def __init__(self, names=None, stats=None, node=None, fh_info=None):
        self.names = names
        self.stats = stats
        self.node = node
        self.fh_info = fh_info

    def __repr__(self):
        out = []
        if self.names is not None:
            out += ['names=%s' % repr(self.names)]
        if self.stats is not None:
            out += ['stats=%s' % repr(self.stats)]
        if self.node is not None:
            out += ['node=%s' % repr(self.node)]
        if self.fh_info is not None:
            out += ['fh_info=%s' % repr(self.fh_info)]
        return 'ndmp_file_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_fh_add_file_request_v3:
    # XDR definition:
    # struct ndmp_fh_add_file_request_v3 {
    #     ndmp_file_v3 files<>;
    # };
    def __init__(self, files=None):
        self.files = files

    def __repr__(self):
        out = []
        if self.files is not None:
            out += ['files=<files>']
        return 'ndmp_fh_add_file_request_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_dir_v3:
    # XDR definition:
    # struct ndmp_dir_v3 {
    #     ndmp_file_name_v3 names<>;
    #     ndmp_u_quad node;
    #     ndmp_u_quad parent;
    # };
    def __init__(self, names=None, node=None, parent=None):
        self.names = names
        self.node = node
        self.parent = parent

    def __repr__(self):
        out = []
        if self.names is not None:
            out += ['names=%s' % repr(self.names)]
        if self.node is not None:
            out += ['node=%s' % repr(self.node)]
        if self.parent is not None:
            out += ['parent=%s' % repr(self.parent)]
        return 'ndmp_dir_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_fh_add_dir_request_v3:
    # XDR definition:
    # struct ndmp_fh_add_dir_request_v3 {
    #     ndmp_dir_v3 dirs<>;
    # };
    def __init__(self, dirs=None):
        self.dirs = dirs

    def __repr__(self):
        out = []
        if self.dirs is not None:
            out += ['dirs=%s' % repr(self.dirs)]
        return 'ndmp_fh_add_dir_request_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_node_v3:
    # XDR definition:
    # struct ndmp_node_v3 {
    #     ndmp_file_stat_v3 stats<>;
    #     ndmp_u_quad node;
    #     ndmp_u_quad fh_info;
    # };
    def __init__(self, stats=None, node=None, fh_info=None):
        self.stats = stats
        self.node = node
        self.fh_info = fh_info

    def __repr__(self):
        out = []
        if self.stats is not None:
            out += ['stats=%s' % repr(self.stats)]
        if self.node is not None:
            out += ['node=%s' % repr(self.node)]
        if self.fh_info is not None:
            out += ['fh_info=%s' % repr(self.fh_info)]
        return 'ndmp_node_v3(%s)' % ', '.join(out)
    __str__ = __repr__

class ndmp_fh_add_node_request_v3:
    # XDR definition:
    # struct ndmp_fh_add_node_request_v3 {
    #     ndmp_node_v3 nodes<>;
    # };
    def __init__(self, nodes=None):
        self.nodes = nodes

    def __repr__(self):
        out = []
        if self.nodes is not None:
            out += ['nodes=%s' % repr(self.nodes)]
        return 'ndmp_fh_add_node_request_v3(%s)' % ', '.join(out)
    __str__ = __repr__

ndmp_auth_text_v2 = ndmp_auth_text
ndmp_auth_text_v4 = ndmp_auth_text_v3
ndmp_auth_md5_v2 = ndmp_auth_md5
ndmp_auth_md5_v4 = ndmp_auth_md5_v3
ndmp_auth_data_v2 = ndmp_auth_data
ndmp_auth_data_v4 = ndmp_auth_data_v3
ndmp_connect_open_request_v2 = ndmp_connect_open_request
ndmp_connect_open_request_v3 = ndmp_connect_open_request
ndmp_connect_open_request_v4 = ndmp_connect_open_request
ndmp_connect_open_reply_v2 = ndmp_connect_open_reply
ndmp_connect_open_reply_v3 = ndmp_connect_open_reply
ndmp_connect_open_reply_v4 = ndmp_connect_open_reply
ndmp_connect_client_auth_request_v2 = ndmp_connect_client_auth_request
ndmp_connect_client_auth_request_v4 = ndmp_connect_client_auth_request_v3
ndmp_connect_client_auth_reply_v2 = ndmp_connect_client_auth_reply
ndmp_connect_client_auth_reply_v4 = ndmp_connect_client_auth_reply_v3
ndmp_connect_server_auth_request_v2 = ndmp_connect_server_auth_request
ndmp_connect_server_auth_request_v3 = ndmp_connect_server_auth_request
ndmp_connect_server_auth_request_v4 = ndmp_connect_server_auth_request
ndmp_connect_server_auth_reply_v2 = ndmp_connect_server_auth_reply
ndmp_connect_server_auth_reply_v3 = ndmp_connect_server_auth_reply
ndmp_connect_server_auth_reply_v4 = ndmp_connect_server_auth_reply
ndmp_config_get_host_info_reply_v2 = ndmp_config_get_host_info_reply
ndmp_config_get_host_info_reply_v4 = ndmp_config_get_host_info_reply_v3
ndmp_config_get_butype_attr_request_v2 = ndmp_config_get_butype_attr_request
ndmp_config_get_butype_attr_reply_v2 = ndmp_config_get_butype_attr_reply
ndmp_config_get_mover_type_reply_v2 = ndmp_config_get_mover_type_reply
ndmp_config_get_auth_attr_request_v2 = ndmp_config_get_auth_attr_request
ndmp_config_get_auth_attr_request_v3 = ndmp_config_get_auth_attr_request
ndmp_config_get_auth_attr_request_v4 = ndmp_config_get_auth_attr_request
ndmp_config_get_auth_attr_reply_v2 = ndmp_config_get_auth_attr_reply
ndmp_config_get_auth_attr_reply_v3 = ndmp_config_get_auth_attr_reply
ndmp_config_get_auth_attr_reply_v4 = ndmp_config_get_auth_attr_reply
ndmp_config_get_connection_type_reply_v4 = ndmp_config_get_connection_type_reply_v3
ndmp_config_get_server_info_reply_v4 = ndmp_config_get_server_info_reply_v3
ndmp_fs_info_v4 = ndmp_fs_info_v3
ndmp_config_get_fs_info_reply_v4 = ndmp_config_get_fs_info_reply_v3
ndmp_device_info_v4 = ndmp_device_info_v3
ndmp_config_get_tape_info_reply_v4 = ndmp_config_get_tape_info_reply_v3
ndmp_config_get_scsi_info_reply_v4 = ndmp_config_get_scsi_info_reply_v3
ndmp_config_get_ext_list_reply_v4 = ndmp_config_get_ext_list_reply
ndmp_config_set_ext_list_request_v4 = ndmp_config_set_ext_list_request
ndmp_config_set_ext_list_reply_v4 = ndmp_config_set_ext_list_reply
ndmp_scsi_open_request_v2 = ndmp_scsi_open_request
ndmp_scsi_open_request_v4 = ndmp_scsi_open_request_v3
ndmp_scsi_open_reply_v2 = ndmp_scsi_open_reply
ndmp_scsi_open_reply_v3 = ndmp_scsi_open_reply
ndmp_scsi_open_reply_v4 = ndmp_scsi_open_reply
ndmp_scsi_close_reply_v2 = ndmp_scsi_close_reply
ndmp_scsi_close_reply_v3 = ndmp_scsi_close_reply
ndmp_scsi_close_reply_v4 = ndmp_scsi_close_reply
ndmp_scsi_get_state_reply_v2 = ndmp_scsi_get_state_reply
ndmp_scsi_get_state_reply_v3 = ndmp_scsi_get_state_reply
ndmp_scsi_get_state_reply_v4 = ndmp_scsi_get_state_reply
ndmp_scsi_set_target_request_v2 = ndmp_scsi_set_target_request
ndmp_scsi_set_target_reply_v2 = ndmp_scsi_set_target_reply
ndmp_scsi_set_target_reply_v3 = ndmp_scsi_set_target_reply
ndmp_scsi_reset_device_reply_v2 = ndmp_scsi_reset_device_reply
ndmp_scsi_reset_device_reply_v3 = ndmp_scsi_reset_device_reply
ndmp_scsi_reset_device_reply_v4 = ndmp_scsi_reset_device_reply
ndmp_scsi_reset_bus_reply_v2 = ndmp_scsi_reset_bus_reply
ndmp_scsi_reset_bus_reply_v3 = ndmp_scsi_reset_bus_reply
ndmp_scsi_execute_cdb_request_v2 = ndmp_execute_cdb_request
ndmp_scsi_execute_cdb_request_v3 = ndmp_execute_cdb_request
ndmp_scsi_execute_cdb_request_v4 = ndmp_execute_cdb_request
ndmp_scsi_execute_cdb_reply_v2 = ndmp_execute_cdb_reply
ndmp_scsi_execute_cdb_reply_v3 = ndmp_execute_cdb_reply
ndmp_scsi_execute_cdb_reply_v4 = ndmp_execute_cdb_reply
ndmp_tape_open_request_v2 = ndmp_tape_open_request
ndmp_tape_open_request_v4 = ndmp_tape_open_request_v3
ndmp_tape_open_reply_v2 = ndmp_tape_open_reply
ndmp_tape_open_reply_v3 = ndmp_tape_open_reply
ndmp_tape_open_reply_v4 = ndmp_tape_open_reply
ndmp_tape_close_reply_v2 = ndmp_tape_close_reply
ndmp_tape_close_reply_v3 = ndmp_tape_close_reply
ndmp_tape_close_reply_v4 = ndmp_tape_close_reply
ndmp_tape_get_state_reply_v2 = ndmp_tape_get_state_reply
ndmp_tape_mtio_request_v2 = ndmp_tape_mtio_request
ndmp_tape_mtio_request_v3 = ndmp_tape_mtio_request
ndmp_tape_mtio_request_v4 = ndmp_tape_mtio_request
ndmp_tape_mtio_reply_v2 = ndmp_tape_mtio_reply
ndmp_tape_mtio_reply_v3 = ndmp_tape_mtio_reply
ndmp_tape_mtio_reply_v4 = ndmp_tape_mtio_reply
ndmp_tape_write_request_v2 = ndmp_tape_write_request
ndmp_tape_write_request_v3 = ndmp_tape_write_request
ndmp_tape_write_request_v4 = ndmp_tape_write_request
ndmp_tape_write_reply_v2 = ndmp_tape_write_reply
ndmp_tape_write_reply_v3 = ndmp_tape_write_reply
ndmp_tape_write_reply_v4 = ndmp_tape_write_reply
ndmp_tape_read_request_v2 = ndmp_tape_read_request
ndmp_tape_read_request_v3 = ndmp_tape_read_request
ndmp_tape_read_request_v4 = ndmp_tape_read_request
ndmp_tape_read_reply_v2 = ndmp_tape_read_reply
ndmp_tape_read_reply_v3 = ndmp_tape_read_reply
ndmp_tape_read_reply_v4 = ndmp_tape_read_reply
ndmp_fc_addr = ndmp_fc_addr_v3
ndmp_ipc_addr = ndmp_ipc_addr_v3
ndmp_mover_get_state_reply_v2 = ndmp_mover_get_state_reply
ndmp_mover_listen_request_v2 = ndmp_mover_listen_request
ndmp_mover_listen_request_v3 = ndmp_mover_listen_request
ndmp_mover_listen_request_v4 = ndmp_mover_listen_request
ndmp_mover_listen_reply_v2 = ndmp_mover_listen_reply
ndmp_mover_set_record_size_request_v2 = ndmp_mover_set_record_size_request
ndmp_mover_set_record_size_request_v3 = ndmp_mover_set_record_size_request
ndmp_mover_set_record_size_request_v4 = ndmp_mover_set_record_size_request
ndmp_mover_set_record_size_reply_v2 = ndmp_mover_set_record_size_reply
ndmp_mover_set_record_size_reply_v3 = ndmp_mover_set_record_size_reply
ndmp_mover_set_record_size_reply_v4 = ndmp_mover_set_record_size_reply
ndmp_mover_set_window_request_v2 = ndmp_mover_set_window_request
ndmp_mover_set_window_request_v3 = ndmp_mover_set_window_request
ndmp_mover_set_window_request_v4 = ndmp_mover_set_window_request
ndmp_mover_set_window_reply_v2 = ndmp_mover_set_window_reply
ndmp_mover_set_window_reply_v3 = ndmp_mover_set_window_reply
ndmp_mover_set_window_reply_v4 = ndmp_mover_set_window_reply
ndmp_mover_continue_reply_v2 = ndmp_mover_continue_reply
ndmp_mover_continue_reply_v3 = ndmp_mover_continue_reply
ndmp_mover_continue_reply_v4 = ndmp_mover_continue_reply
ndmp_mover_abort_reply_v2 = ndmp_mover_abort_reply
ndmp_mover_abort_reply_v3 = ndmp_mover_abort_reply
ndmp_mover_abort_reply_v4 = ndmp_mover_abort_reply
ndmp_mover_stop_reply_v2 = ndmp_mover_stop_reply
ndmp_mover_stop_reply_v3 = ndmp_mover_stop_reply
ndmp_mover_stop_reply_v4 = ndmp_mover_stop_reply
ndmp_mover_read_request_v2 = ndmp_mover_read_request
ndmp_mover_read_request_v3 = ndmp_mover_read_request
ndmp_mover_read_request_v4 = ndmp_mover_read_request
ndmp_mover_read_reply_v2 = ndmp_mover_read_reply
ndmp_mover_read_reply_v3 = ndmp_mover_read_reply
ndmp_mover_read_reply_v4 = ndmp_mover_read_reply
ndmp_mover_close_reply_v2 = ndmp_mover_close_reply
ndmp_mover_close_reply_v3 = ndmp_mover_close_reply
ndmp_mover_close_reply_v4 = ndmp_mover_close_reply
ndmp_mover_connect_reply_v4 = ndmp_mover_connect_reply_v3
ndmp_data_get_state_reply_v2 = ndmp_data_get_state_reply
ndmp_data_start_backup_request_v2 = ndmp_data_start_backup_request
ndmp_data_start_backup_request_v4 = ndmp_data_start_backup_request_v3
ndmp_data_start_backup_reply_v2 = ndmp_data_start_backup_reply
ndmp_data_start_backup_reply_v3 = ndmp_data_start_backup_reply
ndmp_data_start_backup_reply_v4 = ndmp_data_start_backup_reply
ndmp_name_v2 = ndmp_name
ndmp_data_start_recover_request_v2 = ndmp_data_start_recover_request
ndmp_data_start_recover_request_v4 = ndmp_data_start_recover_request_v3
ndmp_data_start_recover_reply_v2 = ndmp_data_start_recover_reply
ndmp_data_start_recover_reply_v3 = ndmp_data_start_recover_reply
ndmp_data_start_recover_reply_v4 = ndmp_data_start_recover_reply
ndmp_data_start_recover_filehist_reply_v4 = ndmp_data_start_recover_reply
ndmp_data_abort_reply_v2 = ndmp_data_abort_reply
ndmp_data_abort_reply_v3 = ndmp_data_abort_reply
ndmp_data_abort_reply_v4 = ndmp_data_abort_reply
ndmp_data_stop_reply_v2 = ndmp_data_stop_reply
ndmp_data_stop_reply_v3 = ndmp_data_stop_reply
ndmp_data_stop_reply_v4 = ndmp_data_stop_reply
ndmp_data_get_env_reply_v2 = ndmp_data_get_env_reply
ndmp_data_get_env_reply_v3 = ndmp_data_get_env_reply
ndmp_data_get_env_reply_v4 = ndmp_data_get_env_reply
ndmp_data_listen_request_v4 = ndmp_data_listen_request_v3
ndmp_data_connect_reply_v4 = ndmp_data_connect_reply_v3
ndmp_notify_data_halted_request_v2 = ndmp_notify_data_halted_request
ndmp_notify_data_halted_request_v3 = ndmp_notify_data_halted_request
ndmp_notify_connection_status_request_v2 = ndmp_notify_connected_request
ndmp_notify_connection_status_request_v3 = ndmp_notify_connected_request
ndmp_notify_connection_status_request_v4 = ndmp_notify_connected_request
ndmp_notify_mover_paused_request_v2 = ndmp_notify_mover_paused_request
ndmp_notify_mover_paused_request_v3 = ndmp_notify_mover_paused_request
ndmp_notify_mover_paused_request_v4 = ndmp_notify_mover_paused_request
ndmp_notify_mover_halted_request_v2 = ndmp_notify_mover_halted_request
ndmp_notify_mover_halted_request_v3 = ndmp_notify_mover_halted_request
ndmp_notify_data_read_request_v2 = ndmp_notify_data_read_request
ndmp_notify_data_read_request_v3 = ndmp_notify_data_read_request
ndmp_notify_data_read_request_v4 = ndmp_notify_data_read_request
ndmp_log_log_request_v2 = ndmp_log_log_request
ndmp_log_log_request_v3 = ndmp_log_log_request
ndmp_log_log_request_v4 = ndmp_log_log_request
ndmp_log_debug_request_v2 = ndmp_log_debug_request
ndmp_log_debug_request_v3 = ndmp_log_debug_request
ndmp_log_debug_request_v4 = ndmp_log_debug_request
ndmp_log_file_request_v2 = ndmp_log_file_request
ndmp_file = ndmp_file_v3
ndmp_dir = ndmp_dir_v3
ndmp_node = ndmp_node_v3
ndmp_fh_add_unix_path_request_v2 = ndmp_fh_add_unix_path_request
ndmp_fh_add_unix_path_request_v3 = ndmp_fh_add_unix_path_request
ndmp_fh_add_file_request_v4 = ndmp_fh_add_file_request_v3
ndmp_fh_add_unix_dir_request_v2 = ndmp_fh_add_unix_dir_request
ndmp_fh_add_unix_dir_request_v3 = ndmp_fh_add_unix_dir_request
ndmp_fh_add_dir_request_v4 = ndmp_fh_add_dir_request_v3
ndmp_fh_add_unix_node_request_v2 = ndmp_fh_add_unix_node_request
ndmp_fh_add_unix_node_request_v3 = ndmp_fh_add_unix_node_request
ndmp_fh_add_node_request_v4 = ndmp_fh_add_node_request_v3
